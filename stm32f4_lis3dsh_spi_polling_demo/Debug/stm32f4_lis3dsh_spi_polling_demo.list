
stm32f4_lis3dsh_spi_polling_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080049e8  080049e8  000059e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  000061c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ddc  08004ddc  00005ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de4  08004de4  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de4  08004de4  00005de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08004dec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000061c8  2**0
                  CONTENTS
 10 .bss          000001b8  200001c8  200001c8  000061c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  000061c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002fdb  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aaa  00000000  00000000  000091d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00009c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000021c  00000000  00000000  00009f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000254a  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000f53  00000000  00000000  0000c6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000d619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf4  00000000  00000000  0000d65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0000f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049d0 	.word	0x080049d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	080049d0 	.word	0x080049d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <GPIO_Init>:
/**
 * @brief Initializes a GPIO pin based on the provided configuration structure.
 * @note Assumes GPIO clock is already enabled.
 */
void GPIO_Init(GPIO_RegDef_t *GPIOx, uint8_t PinNumber, GPIO_Config_t *config)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	72fb      	strb	r3, [r7, #11]
    uint8_t mode  = config->Mode;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75fb      	strb	r3, [r7, #23]

    if (PinNumber > 15) return; // Ensure valid pin number
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d879      	bhi.n	8000cb6 <GPIO_Init+0x10e>

    // 1. Configure pin mode
    GPIOx->MODER &= ~(0x3U << (2 * PinNumber));
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2103      	movs	r1, #3
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= ((mode & 0x3U) << (2 * PinNumber));
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	f003 0103 	and.w	r1, r3, #3
 8000be2:	7afb      	ldrb	r3, [r7, #11]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	431a      	orrs	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	601a      	str	r2, [r3, #0]

    // 2. Configure output type
    if (mode == GPIO_MODE_OUTPUT || mode == GPIO_MODE_ALT)
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d002      	beq.n	8000bfc <GPIO_Init+0x54>
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d115      	bne.n	8000c28 <GPIO_Init+0x80>
    {
        GPIOx->OTYPER &= ~(1U << PinNumber);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= ((config->OutputType & 0x1U) << PinNumber);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	f003 0101 	and.w	r1, r3, #1
 8000c1c:	7afb      	ldrb	r3, [r7, #11]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	431a      	orrs	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	605a      	str	r2, [r3, #4]
    }

    // 3. Configure pull-up/pull-down
    GPIOx->PUPDR &= ~(0x3U << (2 * PinNumber));
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2103      	movs	r1, #3
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |= ((config->PuPd & 0x3U) << (2 * PinNumber));
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	789b      	ldrb	r3, [r3, #2]
 8000c46:	f003 0103 	and.w	r1, r3, #3
 8000c4a:	7afb      	ldrb	r3, [r7, #11]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	60da      	str	r2, [r3, #12]

    // 4. Configure alternate function if needed
    if (mode == GPIO_MODE_ALT)
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d12c      	bne.n	8000cb8 <GPIO_Init+0x110>
    {
        uint8_t afr_index = PinNumber / 8;
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	75bb      	strb	r3, [r7, #22]
        uint8_t afr_shift = (PinNumber % 8) * 4;
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	757b      	strb	r3, [r7, #21]
        GPIOx->AFR[afr_index] &= ~(0xFU << afr_shift);
 8000c70:	7dba      	ldrb	r2, [r7, #22]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c7a:	7d7b      	ldrb	r3, [r7, #21]
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	7dba      	ldrb	r2, [r7, #22]
 8000c86:	4019      	ands	r1, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        GPIOx->AFR[afr_index] |= ((config->AltFunction & 0xFU) << afr_shift);
 8000c90:	7dba      	ldrb	r2, [r7, #22]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3208      	adds	r2, #8
 8000c96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	78db      	ldrb	r3, [r3, #3]
 8000c9e:	f003 020f 	and.w	r2, r3, #15
 8000ca2:	7d7b      	ldrb	r3, [r7, #21]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	7dba      	ldrb	r2, [r7, #22]
 8000caa:	4319      	orrs	r1, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000cb4:	e000      	b.n	8000cb8 <GPIO_Init+0x110>
    if (PinNumber > 15) return; // Ensure valid pin number
 8000cb6:	bf00      	nop
    }
}
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <GPIO_OSpeed>:

/**
 * @brief Configures the output speed of a GPIO pin.
 */
void GPIO_OSpeed(GPIO_RegDef_t *GPIOx, uint8_t PinNumber, GPIO_Speed_t Speed)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	70bb      	strb	r3, [r7, #2]
    GPIOx->OSPEEDR &= ~(0x3U << (2 * PinNumber));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2103      	movs	r1, #3
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |= ((Speed & 0x3U) << (2 * PinNumber));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	f003 0103 	and.w	r1, r3, #3
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <GPIO_WritePin>:

/**
 * @brief Writes a value to a specific GPIO pin using BSRR register.
 */
void GPIO_WritePin(GPIO_RegDef_t *GPIOx, uint8_t PinNumber, uint8_t value)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	70bb      	strb	r3, [r7, #2]
    if (PinNumber < 16 && (value == 0 || value == 1)) {
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d814      	bhi.n	8000d4c <GPIO_WritePin+0x40>
 8000d22:	78bb      	ldrb	r3, [r7, #2]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <GPIO_WritePin+0x22>
 8000d28:	78bb      	ldrb	r3, [r7, #2]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d10e      	bne.n	8000d4c <GPIO_WritePin+0x40>
        GPIOx->BSRR = (value == 1) ? (1U << PinNumber) : (1U << (PinNumber + 16));
 8000d2e:	78bb      	ldrb	r3, [r7, #2]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d104      	bne.n	8000d3e <GPIO_WritePin+0x32>
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2201      	movs	r2, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	e004      	b.n	8000d48 <GPIO_WritePin+0x3c>
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	3310      	adds	r3, #16
 8000d42:	2201      	movs	r2, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6193      	str	r3, [r2, #24]
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <GPIO_EnableClock>:

/**
 * @brief Enables or disables the AHB1 clock for a GPIO port.
 */
void GPIO_EnableClock(gpio_port_t Port, en_state_t State)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
    if (Port <= GPIO_PORT_E || Port == GPIO_PORT_H)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d902      	bls.n	8000d74 <GPIO_EnableClock+0x1c>
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b07      	cmp	r3, #7
 8000d72:	d114      	bne.n	8000d9e <GPIO_EnableClock+0x46>
    {
        RCC->AHB1ENR = (State == ENABLE)
                     ? (RCC->AHB1ENR | (1U << Port))
                     : (RCC->AHB1ENR & ~(1U << Port));
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <GPIO_EnableClock+0x32>
                     ? (RCC->AHB1ENR | (1U << Port))
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <GPIO_EnableClock+0x54>)
 8000d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2101      	movs	r1, #1
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
                     : (RCC->AHB1ENR & ~(1U << Port));
 8000d86:	4313      	orrs	r3, r2
 8000d88:	e007      	b.n	8000d9a <GPIO_EnableClock+0x42>
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <GPIO_EnableClock+0x54>)
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4013      	ands	r3, r2
        RCC->AHB1ENR = (State == ENABLE)
 8000d9a:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <GPIO_EnableClock+0x54>)
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <cs_low>:
/* ============================= Local helpers ============================== */

#define READ_CMD(addr)   (uint8_t)(0x80U | ((addr) & 0x7FU))
#define WRITE_CMD(addr)  (uint8_t)((addr) & 0x7FU)

static inline void cs_low(LIS3DSH_Handle_t *h) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(h->cs_port, h->cs_pin, 0);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6858      	ldr	r0, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7a1b      	ldrb	r3, [r3, #8]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff ffa2 	bl	8000d0c <GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <cs_high>:
static inline void cs_high(LIS3DSH_Handle_t *h) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(h->cs_port, h->cs_pin, 1);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6858      	ldr	r0, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7a1b      	ldrb	r3, [r3, #8]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff ff92 	bl	8000d0c <GPIO_WritePin>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <LIS3DSH_ReadReg>:
	}
}

/* ============================ Low-level I/O =============================== */

uint8_t LIS3DSH_ReadReg(LIS3DSH_Handle_t *h, uint8_t reg) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tx = READ_CMD(reg);
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	73fb      	strb	r3, [r7, #15]
	uint8_t rx = 0, dummy = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73bb      	strb	r3, [r7, #14]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	737b      	strb	r3, [r7, #13]

	cs_low(h);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffce 	bl	8000db0 <cs_low>
	(void) SPI_TransmitReceive(h->spi, &tx, &rx, 1);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	f107 020e 	add.w	r2, r7, #14
 8000e1c:	f107 010f 	add.w	r1, r7, #15
 8000e20:	2301      	movs	r3, #1
 8000e22:	f000 f9b5 	bl	8001190 <SPI_TransmitReceive>
	(void) SPI_TransmitReceive(h->spi, &dummy, &rx, 1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	f107 020e 	add.w	r2, r7, #14
 8000e2e:	f107 010d 	add.w	r1, r7, #13
 8000e32:	2301      	movs	r3, #1
 8000e34:	f000 f9ac 	bl	8001190 <SPI_TransmitReceive>
	cs_high(h);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ffc9 	bl	8000dd0 <cs_high>
	return rx;
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LIS3DSH_WriteReg>:

void LIS3DSH_WriteReg(LIS3DSH_Handle_t *h, uint8_t reg, uint8_t val) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
 8000e54:	4613      	mov	r3, r2
 8000e56:	70bb      	strb	r3, [r7, #2]
	uint8_t tx = WRITE_CMD(reg);
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
	uint8_t rx = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73bb      	strb	r3, [r7, #14]

	cs_low(h);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <cs_low>
	(void) SPI_TransmitReceive(h->spi, &tx, &rx, 1);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	f107 020e 	add.w	r2, r7, #14
 8000e74:	f107 010f 	add.w	r1, r7, #15
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f000 f989 	bl	8001190 <SPI_TransmitReceive>
	(void) SPI_TransmitReceive(h->spi, &val, &rx, 1);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	f107 020e 	add.w	r2, r7, #14
 8000e86:	1cb9      	adds	r1, r7, #2
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f000 f981 	bl	8001190 <SPI_TransmitReceive>
	cs_high(h);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff9e 	bl	8000dd0 <cs_high>
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LIS3DSH_ReadMulti>:

void LIS3DSH_ReadMulti(LIS3DSH_Handle_t *h, uint8_t start_reg, uint8_t *buf,
		uint8_t len) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	72fb      	strb	r3, [r7, #11]
 8000eac:	4613      	mov	r3, r2
 8000eae:	72bb      	strb	r3, [r7, #10]
	uint8_t tx = READ_CMD(start_reg);
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
 8000eb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	75bb      	strb	r3, [r7, #22]
	uint8_t rx = 0, dummy = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	757b      	strb	r3, [r7, #21]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	753b      	strb	r3, [r7, #20]

	cs_low(h);
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ff74 	bl	8000db0 <cs_low>
	(void) SPI_TransmitReceive(h->spi, &tx, &rx, 1);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f107 0215 	add.w	r2, r7, #21
 8000ed0:	f107 0116 	add.w	r1, r7, #22
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f000 f95b 	bl	8001190 <SPI_TransmitReceive>
	for (uint8_t i = 0; i < len; ++i) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]
 8000ede:	e00c      	b.n	8000efa <LIS3DSH_ReadMulti+0x5e>
		(void) SPI_TransmitReceive(h->spi, &dummy, &buf[i], 1);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	441a      	add	r2, r3
 8000eea:	f107 0114 	add.w	r1, r7, #20
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f000 f94e 	bl	8001190 <SPI_TransmitReceive>
	for (uint8_t i = 0; i < len; ++i) {
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	75fb      	strb	r3, [r7, #23]
 8000efa:	7dfa      	ldrb	r2, [r7, #23]
 8000efc:	7abb      	ldrb	r3, [r7, #10]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3ee      	bcc.n	8000ee0 <LIS3DSH_ReadMulti+0x44>
	}
	cs_high(h);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff ff64 	bl	8000dd0 <cs_high>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LIS3DSH_WhoAmI>:

/* ============================== Public API ================================ */

uint8_t LIS3DSH_WhoAmI(LIS3DSH_Handle_t *h) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return LIS3DSH_ReadReg(h, LIS3DSH_REG_WHO_AM_I);
 8000f18:	210f      	movs	r1, #15
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff68 	bl	8000df0 <LIS3DSH_ReadReg>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <LIS3DSH_Init>:

int LIS3DSH_Init(LIS3DSH_Handle_t *h, SPI_Handle_t *spi, GPIO_RegDef_t *cs_port,
		uint8_t cs_pin, LIS3DSH_ODR_t odr, LIS3DSH_BW_t bw, LIS3DSH_FS_t fs) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	70fb      	strb	r3, [r7, #3]
	if ((h == NULL) || (spi == NULL) || (cs_port == NULL)) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <LIS3DSH_Init+0x20>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <LIS3DSH_Init+0x20>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <LIS3DSH_Init+0x26>
		return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e03e      	b.n	8000fce <LIS3DSH_Init+0xa4>
	}

	h->spi = spi;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	601a      	str	r2, [r3, #0]
	h->cs_port = cs_port;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
	h->cs_pin = cs_pin;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	721a      	strb	r2, [r3, #8]
	h->fs = fs;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f68:	72da      	strb	r2, [r3, #11]

	/* WHO_AM_I */
	uint8_t who = LIS3DSH_WhoAmI(h);
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff ffd0 	bl	8000f10 <LIS3DSH_WhoAmI>
 8000f70:	4603      	mov	r3, r0
 8000f72:	75fb      	strb	r3, [r7, #23]
	if (who != LIS3DSH_WHOAMI_VAL) {
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f78:	d002      	beq.n	8000f80 <LIS3DSH_Init+0x56>
		return -2;
 8000f7a:	f06f 0301 	mvn.w	r3, #1
 8000f7e:	e026      	b.n	8000fce <LIS3DSH_Init+0xa4>
	}

	/* CTRL4: ODR | BDU=1 | XYZ enable */
	h->ctrl4 = ((uint8_t) odr) | LIS3DSH_CTRL4_BDU | LIS3DSH_CTRL4_XEN
 8000f80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f84:	f043 030f 	orr.w	r3, r3, #15
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	725a      	strb	r2, [r3, #9]
			| LIS3DSH_CTRL4_YEN | LIS3DSH_CTRL4_ZEN;
	LIS3DSH_WriteReg(h, LIS3DSH_REG_CTRL4, h->ctrl4);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	7a5b      	ldrb	r3, [r3, #9]
 8000f92:	461a      	mov	r2, r3
 8000f94:	2120      	movs	r1, #32
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ff56 	bl	8000e48 <LIS3DSH_WriteReg>

	/* CTRL5: BW, FS, 4-wire SPI (SIM=0) */
	uint8_t bw_bits = ((uint8_t) bw & 0x03U) << LIS3DSH_CTRL5_BW_Pos;
 8000f9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	75bb      	strb	r3, [r7, #22]
	uint8_t fs_bits = ((uint8_t) fs & 0x07U) << LIS3DSH_CTRL5_FS_Pos;
 8000fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000fb0:	757b      	strb	r3, [r7, #21]
	h->ctrl5 = (uint8_t) (bw_bits | fs_bits); /* ST bits=0, SIM=0 */
 8000fb2:	7dba      	ldrb	r2, [r7, #22]
 8000fb4:	7d7b      	ldrb	r3, [r7, #21]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	729a      	strb	r2, [r3, #10]
	LIS3DSH_WriteReg(h, LIS3DSH_REG_CTRL5, h->ctrl5);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	7a9b      	ldrb	r3, [r3, #10]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2124      	movs	r1, #36	@ 0x24
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff ff3e 	bl	8000e48 <LIS3DSH_WriteReg>

	return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <LIS3DSH_DataReady>:

uint8_t LIS3DSH_DataReady(LIS3DSH_Handle_t *h) {
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	uint8_t s = LIS3DSH_ReadReg(h, LIS3DSH_REG_STATUS);
 8000fde:	2127      	movs	r1, #39	@ 0x27
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff05 	bl	8000df0 <LIS3DSH_ReadReg>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) ((s & LIS3DSH_STATUS_ZYXDA_Msk) ? 1U : 0U);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	08db      	lsrs	r3, r3, #3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <pack_le16>:

static inline int16_t pack_le16(uint8_t lo, uint8_t hi) {
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	460a      	mov	r2, r1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	4613      	mov	r3, r2
 800100c:	71bb      	strb	r3, [r7, #6]
	return (int16_t) ((((uint16_t) hi) << 8) | lo);
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	b21b      	sxth	r3, r3
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21b      	sxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LIS3DSH_ReadXYZ_Raw>:

void LIS3DSH_ReadXYZ_Raw(LIS3DSH_Handle_t *h, int16_t *x, int16_t *y,
		int16_t *z) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	603b      	str	r3, [r7, #0]
	uint8_t buf[6];
	LIS3DSH_ReadMulti(h, LIS3DSH_REG_OUT_X_L, buf, 6);
 8001038:	f107 0210 	add.w	r2, r7, #16
 800103c:	2306      	movs	r3, #6
 800103e:	2128      	movs	r1, #40	@ 0x28
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff ff2b 	bl	8000e9c <LIS3DSH_ReadMulti>
	if (x)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d009      	beq.n	8001060 <LIS3DSH_ReadXYZ_Raw+0x36>
		*x = pack_le16(buf[0], buf[1]);
 800104c:	7c3b      	ldrb	r3, [r7, #16]
 800104e:	7c7a      	ldrb	r2, [r7, #17]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ffd3 	bl	8000ffe <pack_le16>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	801a      	strh	r2, [r3, #0]
	if (y)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d009      	beq.n	800107a <LIS3DSH_ReadXYZ_Raw+0x50>
		*y = pack_le16(buf[2], buf[3]);
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	7cfa      	ldrb	r2, [r7, #19]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffc6 	bl	8000ffe <pack_le16>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	801a      	strh	r2, [r3, #0]
	if (z)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d009      	beq.n	8001094 <LIS3DSH_ReadXYZ_Raw+0x6a>
		*z = pack_le16(buf[4], buf[5]);
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	7d7a      	ldrb	r2, [r7, #21]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffb9 	bl	8000ffe <pack_le16>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	801a      	strh	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SPI_Init>:
 *         - DFF (bit 11), CPOL (bit 1), CPHA (bit 0)
 *         - SSM (bit 9); if SSM=1 then SSI (bit 8)=1
 *         The function does NOT set SPE; call SPI_PeripheralControl() to enable.
 */
void SPI_Init(SPI_Handle_t *hspi)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    uint32_t cr1 = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

    /* 1) Master/slave (CR1.MSTR bit 2) */
    cr1 |= ((uint32_t)hspi->config.deviceMode << 2);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    /* 2) Bus configuration */
    if (hspi->config.busConfig == SPI_BUS_FULL_DUPLEX)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	795b      	ldrb	r3, [r3, #5]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d104      	bne.n	80010c6 <SPI_Init+0x2a>
    {
        cr1 &= ~(1U << 15);                 /* BIDIMODE=0 */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e014      	b.n	80010f0 <SPI_Init+0x54>
    }
    else if (hspi->config.busConfig == SPI_BUS_HALF_DUPLEX)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <SPI_Init+0x44>
    {
        cr1 |=  (1U << 15);                 /* BIDIMODE=1 (1-line) */
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010d4:	60fb      	str	r3, [r7, #12]
        cr1 |=  (1U << 14);                 /* BIDIOE=1 (output enabled) */
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e007      	b.n	80010f0 <SPI_Init+0x54>
    }
    else /* SPI_BUS_SIMPLEX_RXONLY */
    {
        cr1 &= ~(1U << 15);                 /* BIDIMODE=0 */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010e6:	60fb      	str	r3, [r7, #12]
        cr1 |=  (1U << 10);                 /* RXONLY=1  */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ee:	60fb      	str	r3, [r7, #12]
    }

    /* 3) Baud rate (CR1.BR[2:0] = bits [5:3]) */
    cr1 |= ((uint32_t)hspi->config.clkSpeed << 3);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7a9b      	ldrb	r3, [r3, #10]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    /* 4) Frame size (CR1.DFF bit 11) */
    cr1 |= ((uint32_t)hspi->config.dff << 11);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	799b      	ldrb	r3, [r3, #6]
 8001100:	02db      	lsls	r3, r3, #11
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]

    /* 5) Polarity/phase (CR1.CPOL bit 1, CR1.CPHA bit 0) */
    cr1 |= ((uint32_t)hspi->config.cpol << 1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	79db      	ldrb	r3, [r3, #7]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
    cr1 |= ((uint32_t)hspi->config.cpha << 0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7a1b      	ldrb	r3, [r3, #8]
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    /* 6) Software slave management (CR1.SSM bit 9) */
    cr1 |= ((uint32_t)hspi->config.ssm << 9);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7a5b      	ldrb	r3, [r3, #9]
 8001124:	025b      	lsls	r3, r3, #9
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    /* 7) Internal NSS when SSM=1 (CR1.SSI bit 8) */
    if (hspi->config.ssm == SPI_SSM_ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7a5b      	ldrb	r3, [r3, #9]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d103      	bne.n	800113c <SPI_Init+0xa0>
    {
        cr1 |= (1U << 8);                   /* keep NSS high internally (SSI = 1)*/
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113a:	60fb      	str	r3, [r7, #12]
    }

    /* 8) Program CR1 */
    hspi->SPIx->CR1 = cr1;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SPI_PeripheralControl>:
 * @param  hspi    Pointer to SPI handle
 * @param  enable  ENABLE(1) or DISABLE(0)
 * @note   Do not toggle SPE during an active frame.
 */
void SPI_PeripheralControl(SPI_Handle_t *hspi, uint8_t enable)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    if (enable) { hspi->SPIx->CR1 |=  (1U << 6); }  /* SPE=1 */
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <SPI_PeripheralControl+0x24>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001170:	601a      	str	r2, [r3, #0]
    else        { hspi->SPIx->CR1 &= ~(1U << 6); }  /* SPE=0 */
}
 8001172:	e007      	b.n	8001184 <SPI_PeripheralControl+0x34>
    else        { hspi->SPIx->CR1 &= ~(1U << 6); }  /* SPE=0 */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SPI_TransmitReceive>:
 */
int SPI_TransmitReceive(SPI_Handle_t *hspi,
                        const uint8_t *pTx,
                        uint8_t       *pRx,
                        uint32_t       len)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
    if (len == 0U) return 0;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <SPI_TransmitReceive+0x18>
 80011a4:	2300      	movs	r3, #0
 80011a6:	e0ae      	b.n	8001306 <SPI_TransmitReceive+0x176>

    if (hspi->config.dff == SPI_DFF_16BITS)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d155      	bne.n	800125c <SPI_TransmitReceive+0xcc>
    {
        if (len & 1U) return -1; /* two bytes per frame */
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <SPI_TransmitReceive+0x30>
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e0a2      	b.n	8001306 <SPI_TransmitReceive+0x176>

        for (uint32_t i = 0; i < len; i += 2)
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	e045      	b.n	8001252 <SPI_TransmitReceive+0xc2>
        {
            /* Write 16-bit (dummy if pTx==NULL) */
            while (!(hspi->SPIx->SR & (1U << 1))) { /* TXE */ }
 80011c6:	bf00      	nop
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f8      	beq.n	80011c8 <SPI_TransmitReceive+0x38>
            uint16_t t = pTx ? (uint16_t)(((uint16_t)pTx[i] << 8) | pTx[i+1U])
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d010      	beq.n	80011fe <SPI_TransmitReceive+0x6e>
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	440b      	add	r3, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	e001      	b.n	8001202 <SPI_TransmitReceive+0x72>
 80011fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001202:	82bb      	strh	r3, [r7, #20]
                             : (uint16_t)0xFFFFU;
            *(__vo uint16_t *)&hspi->SPIx->DR = t;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	330c      	adds	r3, #12
 800120a:	8aba      	ldrh	r2, [r7, #20]
 800120c:	801a      	strh	r2, [r3, #0]

            /* Read 16-bit */
            while (!(hspi->SPIx->SR & (1U << 0))) { /* RXNE */ }
 800120e:	bf00      	nop
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f8      	beq.n	8001210 <SPI_TransmitReceive+0x80>
            uint16_t r = *(__vo uint16_t *)&hspi->SPIx->DR;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	330c      	adds	r3, #12
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	827b      	strh	r3, [r7, #18]

            if (pRx)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00e      	beq.n	800124c <SPI_TransmitReceive+0xbc>
            {
                pRx[i]   = (uint8_t)(r >> 8);
 800122e:	8a7b      	ldrh	r3, [r7, #18]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b299      	uxth	r1, r3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	4413      	add	r3, r2
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
                pRx[i+1] = (uint8_t)(r & 0xFFU);
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	8a7a      	ldrh	r2, [r7, #18]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < len; i += 2)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3302      	adds	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3b5      	bcc.n	80011c6 <SPI_TransmitReceive+0x36>
 800125a:	e035      	b.n	80012c8 <SPI_TransmitReceive+0x138>
            }
        }
    }
    else /* 8-bit frames */
    {
        for (uint32_t i = 0; i < len; ++i)
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	e02e      	b.n	80012c0 <SPI_TransmitReceive+0x130>
        {
            /* Write 8-bit (dummy if pTx==NULL) */
            while (!(hspi->SPIx->SR & (1U << 1))) { /* TXE */ }
 8001262:	bf00      	nop
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f8      	beq.n	8001264 <SPI_TransmitReceive+0xd4>
            uint8_t t = pTx ? pTx[i] : 0xFFU;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <SPI_TransmitReceive+0xf2>
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	e000      	b.n	8001284 <SPI_TransmitReceive+0xf4>
 8001282:	23ff      	movs	r3, #255	@ 0xff
 8001284:	75fb      	strb	r3, [r7, #23]
            *(__vo uint8_t *)&hspi->SPIx->DR = t;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	330c      	adds	r3, #12
 800128c:	7dfa      	ldrb	r2, [r7, #23]
 800128e:	701a      	strb	r2, [r3, #0]

            /* Read 8-bit */
            while (!(hspi->SPIx->SR & (1U << 0))) { /* RXNE */ }
 8001290:	bf00      	nop
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f8      	beq.n	8001292 <SPI_TransmitReceive+0x102>
            uint8_t r = *(__vo uint8_t *)&hspi->SPIx->DR;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	330c      	adds	r3, #12
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	75bb      	strb	r3, [r7, #22]

            if (pRx) { pRx[i] = r; }
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <SPI_TransmitReceive+0x12a>
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4413      	add	r3, r2
 80012b6:	7dba      	ldrb	r2, [r7, #22]
 80012b8:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < len; ++i)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	3301      	adds	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3cc      	bcc.n	8001262 <SPI_TransmitReceive+0xd2>
        }
    }

    /* Tail flush & defensive OVR clear */
    while (!(hspi->SPIx->SR & (1U << 1))) { /* TXE */ }
 80012c8:	bf00      	nop
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f8      	beq.n	80012ca <SPI_TransmitReceive+0x13a>
    while  ( hspi->SPIx->SR & (1U << 7))  { /* BSY */ }
 80012d8:	bf00      	nop
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f8      	bne.n	80012da <SPI_TransmitReceive+0x14a>

    if (hspi->SPIx->SR & (1U << 6))        /* OVR */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <SPI_TransmitReceive+0x174>
    {
        (void)*(__vo uint16_t *)&hspi->SPIx->DR;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	330c      	adds	r3, #12
 80012fc:	881b      	ldrh	r3, [r3, #0]
        (void)hspi->SPIx->SR;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
    }

    return (int)len;
 8001304:	683b      	ldr	r3, [r7, #0]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <lpf_alpha>:
 * @brief Compute LPF alpha from cutoff and sample rate.
 * @param fc_hz  Cutoff frequency (Hz).
 * @param fs_hz  Sampling frequency (Hz).
 * @return alpha in [0..1]. Higher a = faster response, less smoothing.
 */
static inline float lpf_alpha(float fc_hz, float fs_hz) {
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	edc7 0a00 	vstr	s1, [r7]
	const float two_pi_fc = 6.28318530718f * fc_hz;
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001358 <lpf_alpha+0x44>
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	edc7 7a03 	vstr	s15, [r7, #12]
	return (two_pi_fc) / (two_pi_fc + fs_hz);
 8001332:	ed97 7a03 	vldr	s14, [r7, #12]
 8001336:	edd7 7a00 	vldr	s15, [r7]
 800133a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001342:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001346:	eef0 7a66 	vmov.f32	s15, s13
}
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40c90fdb 	.word	0x40c90fdb

0800135c <lpf_init>:

/**
 * @brief Initialize a 1st-order LPF.
 */
static inline void lpf_init(LPF1_t *f, float fc_hz, float fs_hz) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	ed87 0a02 	vstr	s0, [r7, #8]
 8001368:	edc7 0a01 	vstr	s1, [r7, #4]
	f->a = lpf_alpha(fc_hz, fs_hz);
 800136c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001370:	ed97 0a02 	vldr	s0, [r7, #8]
 8001374:	f7ff ffce 	bl	8001314 <lpf_alpha>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	edc3 7a00 	vstr	s15, [r3]
	f->y = 0.0f;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <lpf_update>:

/**
 * @brief Update a 1st-order LPF with new sample.
 * @return New filtered output.
 */
static inline float lpf_update(LPF1_t *f, float x) {
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	ed87 0a00 	vstr	s0, [r7]
	f->y += f->a * (x - f->y);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edd3 6a00 	vldr	s13, [r3]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80013b0:	ed97 6a00 	vldr	s12, [r7]
 80013b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edc3 7a01 	vstr	s15, [r3, #4]
	return f->y;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	ee07 3a90 	vmov	s15, r3
}
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <add_sample>:
 *        Integer-domain accumulation to keep cost low; returns float averages.
 *
 * @note  Uses static ring buffers (not re-entrant).
 */
static void add_sample(int16_t x, int16_t y, int16_t z, float *x_avg,
		float *y_avg, float *z_avg) {
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4603      	mov	r3, r0
 80013e6:	81fb      	strh	r3, [r7, #14]
 80013e8:	460b      	mov	r3, r1
 80013ea:	81bb      	strh	r3, [r7, #12]
 80013ec:	4613      	mov	r3, r2
 80013ee:	817b      	strh	r3, [r7, #10]
	static int16_t bx[AVG_SAMPLES], by[AVG_SAMPLES], bz[AVG_SAMPLES];
	static uint8_t idx = 0;

	bx[idx] = x;
 80013f0:	4b37      	ldr	r3, [pc, #220]	@ (80014d0 <add_sample+0xf4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4a37      	ldr	r2, [pc, #220]	@ (80014d4 <add_sample+0xf8>)
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	by[idx] = y;
 80013fe:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <add_sample+0xf4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	4a34      	ldr	r2, [pc, #208]	@ (80014d8 <add_sample+0xfc>)
 8001406:	89bb      	ldrh	r3, [r7, #12]
 8001408:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	bz[idx] = z;
 800140c:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <add_sample+0xf4>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4a32      	ldr	r2, [pc, #200]	@ (80014dc <add_sample+0x100>)
 8001414:	897b      	ldrh	r3, [r7, #10]
 8001416:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	idx = (uint8_t) ((idx + 1U) % AVG_SAMPLES);
 800141a:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <add_sample+0xf4>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b29      	ldr	r3, [pc, #164]	@ (80014d0 <add_sample+0xf4>)
 800142a:	701a      	strb	r2, [r3, #0]

	int32_t sx = 0, sy = 0, sz = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AVG_SAMPLES; ++i) {
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	e01a      	b.n	8001474 <add_sample+0x98>
		sx += bx[i];
 800143e:	4a25      	ldr	r2, [pc, #148]	@ (80014d4 <add_sample+0xf8>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001446:	461a      	mov	r2, r3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	61fb      	str	r3, [r7, #28]
		sy += by[i];
 800144e:	4a22      	ldr	r2, [pc, #136]	@ (80014d8 <add_sample+0xfc>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001456:	461a      	mov	r2, r3
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4413      	add	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
		sz += bz[i];
 800145e:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <add_sample+0x100>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001466:	461a      	mov	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AVG_SAMPLES; ++i) {
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	3301      	adds	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d9e1      	bls.n	800143e <add_sample+0x62>
	}

	*x_avg = (float) (sx / (int32_t) AVG_SAMPLES);
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da00      	bge.n	8001482 <add_sample+0xa6>
 8001480:	3307      	adds	r3, #7
 8001482:	10db      	asrs	r3, r3, #3
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a00 	vstr	s15, [r3]
	*y_avg = (float) (sy / (int32_t) AVG_SAMPLES);
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <add_sample+0xbe>
 8001498:	3307      	adds	r3, #7
 800149a:	10db      	asrs	r3, r3, #3
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a6:	edc3 7a00 	vstr	s15, [r3]
	*z_avg = (float) (sz / (int32_t) AVG_SAMPLES);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da00      	bge.n	80014b2 <add_sample+0xd6>
 80014b0:	3307      	adds	r3, #7
 80014b2:	10db      	asrs	r3, r3, #3
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	edc3 7a00 	vstr	s15, [r3]
}
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001fc 	.word	0x200001fc
 80014d4:	20000200 	.word	0x20000200
 80014d8:	20000210 	.word	0x20000210
 80014dc:	20000220 	.word	0x20000220

080014e0 <lis3dsh_spi_polling_demo_main>:
 *   4) Loop: wait data-ready → burst read → MA → LPF → convert to g →
 *            clamp → axis-only tilt angles (deg) → print + LED UI.
 *
 * @return 0 on success (never returns in practice).
 */
int lis3dsh_spi_polling_demo_main(void) {
 80014e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e4:	b0a2      	sub	sp, #136	@ 0x88
 80014e6:	af04      	add	r7, sp, #16
	/* -------- Bring-up -------- */
	Init_LEDs();
 80014e8:	f000 fa38 	bl	800195c <Init_LEDs>
	Init_SPI1_GPIO_CS();
 80014ec:	f000 fa8c 	bl	8001a08 <Init_SPI1_GPIO_CS>
	Config_SPI1();
 80014f0:	f000 fae2 	bl	8001ab8 <Config_SPI1>
	SPI_PeripheralControl(&hspi1, ENABLE); /* SPE=1: enable SPI peripheral */
 80014f4:	2101      	movs	r1, #1
 80014f6:	4862      	ldr	r0, [pc, #392]	@ (8001680 <lis3dsh_spi_polling_demo_main+0x1a0>)
 80014f8:	f7ff fe2a 	bl	8001150 <SPI_PeripheralControl>

	/* -------- Sensor init (WHO_AM_I, XYZ enable, BDU=1, ODR/BW/FS) -------- */
	if (LIS3DSH_Init(&hlis, &hspi1, SPI1_CS_PORT, SPI1_CS_PIN,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2303      	movs	r3, #3
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2360      	movs	r3, #96	@ 0x60
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2303      	movs	r3, #3
 800150a:	4a5e      	ldr	r2, [pc, #376]	@ (8001684 <lis3dsh_spi_polling_demo_main+0x1a4>)
 800150c:	495c      	ldr	r1, [pc, #368]	@ (8001680 <lis3dsh_spi_polling_demo_main+0x1a0>)
 800150e:	485e      	ldr	r0, [pc, #376]	@ (8001688 <lis3dsh_spi_polling_demo_main+0x1a8>)
 8001510:	f7ff fd0b 	bl	8000f2a <LIS3DSH_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	da14      	bge.n	8001544 <lis3dsh_spi_polling_demo_main+0x64>
	APP_ODR, APP_BW, APP_FS) < 0) {
		/* Visual error: blink RED forever */
		printf("ERR: LIS3DSH init failed\r\n");
 800151a:	485c      	ldr	r0, [pc, #368]	@ (800168c <lis3dsh_spi_polling_demo_main+0x1ac>)
 800151c:	f001 f9c4 	bl	80028a8 <puts>
		while (1) {
			GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 1);
 8001520:	2201      	movs	r2, #1
 8001522:	210e      	movs	r1, #14
 8001524:	485a      	ldr	r0, [pc, #360]	@ (8001690 <lis3dsh_spi_polling_demo_main+0x1b0>)
 8001526:	f7ff fbf1 	bl	8000d0c <GPIO_WritePin>
			delay_cycles(800000);
 800152a:	485a      	ldr	r0, [pc, #360]	@ (8001694 <lis3dsh_spi_polling_demo_main+0x1b4>)
 800152c:	f000 faf8 	bl	8001b20 <delay_cycles>
			GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	210e      	movs	r1, #14
 8001534:	4856      	ldr	r0, [pc, #344]	@ (8001690 <lis3dsh_spi_polling_demo_main+0x1b0>)
 8001536:	f7ff fbe9 	bl	8000d0c <GPIO_WritePin>
			delay_cycles(400000);
 800153a:	4857      	ldr	r0, [pc, #348]	@ (8001698 <lis3dsh_spi_polling_demo_main+0x1b8>)
 800153c:	f000 faf0 	bl	8001b20 <delay_cycles>
			GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 1);
 8001540:	bf00      	nop
 8001542:	e7ed      	b.n	8001520 <lis3dsh_spi_polling_demo_main+0x40>
		}
	}
	printf("WHO_AM_I=0x%02X\r\n", (unsigned) LIS3DSH_WhoAmI(&hlis));
 8001544:	4850      	ldr	r0, [pc, #320]	@ (8001688 <lis3dsh_spi_polling_demo_main+0x1a8>)
 8001546:	f7ff fce3 	bl	8000f10 <LIS3DSH_WhoAmI>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	4853      	ldr	r0, [pc, #332]	@ (800169c <lis3dsh_spi_polling_demo_main+0x1bc>)
 8001550:	f001 f942 	bl	80027d8 <iprintf>

	/* -------- Filters (per-axis) -------- */
	LPF1_t fx, fy, fz;
	lpf_init(&fx, APP_FC_HZ, APP_FS_HZ);
 8001554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001558:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80016a0 <lis3dsh_spi_polling_demo_main+0x1c0>
 800155c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fefb 	bl	800135c <lpf_init>
	lpf_init(&fy, APP_FC_HZ, APP_FS_HZ);
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 80016a0 <lis3dsh_spi_polling_demo_main+0x1c0>
 800156e:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fef2 	bl	800135c <lpf_init>
	lpf_init(&fz, APP_FC_HZ, APP_FS_HZ);
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80016a0 <lis3dsh_spi_polling_demo_main+0x1c0>
 8001580:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fee9 	bl	800135c <lpf_init>

	/* -------- Startup offset calibration (board still) -------- */
	float x_off = 0, y_off = 0, z_off = 0;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	673b      	str	r3, [r7, #112]	@ 0x70
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	for (uint32_t i = 0; i < CALIB_SAMPLES; ++i) {
 800159c:	2300      	movs	r3, #0
 800159e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015a0:	e033      	b.n	800160a <lis3dsh_spi_polling_demo_main+0x12a>
		int16_t rx, ry, rz;
		LIS3DSH_ReadXYZ_Raw(&hlis, &rx, &ry, &rz);
 80015a2:	f107 0312 	add.w	r3, r7, #18
 80015a6:	f107 0214 	add.w	r2, r7, #20
 80015aa:	f107 0116 	add.w	r1, r7, #22
 80015ae:	4836      	ldr	r0, [pc, #216]	@ (8001688 <lis3dsh_spi_polling_demo_main+0x1a8>)
 80015b0:	f7ff fd3b 	bl	800102a <LIS3DSH_ReadXYZ_Raw>
		x_off += rx;
 80015b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		y_off += ry;
 80015cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		z_off += rz;
 80015e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		delay_cycles(50000); /* gentle pacing */
 80015fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001600:	f000 fa8e 	bl	8001b20 <delay_cycles>
	for (uint32_t i = 0; i < CALIB_SAMPLES; ++i) {
 8001604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001606:	3301      	adds	r3, #1
 8001608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800160a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800160c:	2b31      	cmp	r3, #49	@ 0x31
 800160e:	d9c8      	bls.n	80015a2 <lis3dsh_spi_polling_demo_main+0xc2>
	}
	x_off /= (float) CALIB_SAMPLES;
 8001610:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001614:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80016a4 <lis3dsh_spi_polling_demo_main+0x1c4>
 8001618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	y_off /= (float) CALIB_SAMPLES;
 8001620:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001624:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80016a4 <lis3dsh_spi_polling_demo_main+0x1c4>
 8001628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	z_off /= (float) CALIB_SAMPLES;
 8001630:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001634:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80016a4 <lis3dsh_spi_polling_demo_main+0x1c4>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

	/* -------- Main loop -------- */
	while (1) {
		/* Data-ready poll (with timeout as a safety net) */
		uint32_t tries = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	667b      	str	r3, [r7, #100]	@ 0x64
		while (!LIS3DSH_DataReady(&hlis) && (++tries < STATUS_MAX_TRIES)) {
 8001644:	bf00      	nop
 8001646:	4810      	ldr	r0, [pc, #64]	@ (8001688 <lis3dsh_spi_polling_demo_main+0x1a8>)
 8001648:	f7ff fcc5 	bl	8000fd6 <LIS3DSH_DataReady>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <lis3dsh_spi_polling_demo_main+0x182>
 8001652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001654:	3301      	adds	r3, #1
 8001656:	667b      	str	r3, [r7, #100]	@ 0x64
 8001658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800165a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800165e:	4293      	cmp	r3, r2
 8001660:	d9f1      	bls.n	8001646 <lis3dsh_spi_polling_demo_main+0x166>
			/* spin */
		}
		if (tries >= STATUS_MAX_TRIES) {
 8001662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001664:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001668:	4293      	cmp	r3, r2
 800166a:	d91f      	bls.n	80016ac <lis3dsh_spi_polling_demo_main+0x1cc>
			/* If DR never sets, print status for debugging and continue. */
			printf("WARN: no data ready; WHO=0x%02X\r\n",
					(unsigned) LIS3DSH_WhoAmI(&hlis));
 800166c:	4806      	ldr	r0, [pc, #24]	@ (8001688 <lis3dsh_spi_polling_demo_main+0x1a8>)
 800166e:	f7ff fc4f 	bl	8000f10 <LIS3DSH_WhoAmI>
 8001672:	4603      	mov	r3, r0
			printf("WARN: no data ready; WHO=0x%02X\r\n",
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <lis3dsh_spi_polling_demo_main+0x1c8>)
 8001678:	f001 f8ae 	bl	80027d8 <iprintf>
 800167c:	e7e0      	b.n	8001640 <lis3dsh_spi_polling_demo_main+0x160>
 800167e:	bf00      	nop
 8001680:	200001e4 	.word	0x200001e4
 8001684:	40021000 	.word	0x40021000
 8001688:	200001f0 	.word	0x200001f0
 800168c:	080049e8 	.word	0x080049e8
 8001690:	40020c00 	.word	0x40020c00
 8001694:	000c3500 	.word	0x000c3500
 8001698:	00061a80 	.word	0x00061a80
 800169c:	08004a04 	.word	0x08004a04
 80016a0:	42c80000 	.word	0x42c80000
 80016a4:	42480000 	.word	0x42480000
 80016a8:	08004a18 	.word	0x08004a18
			continue;
		}

		/* Burst read raw XYZ (little-endian 16-bit each) */
		int16_t rx, ry, rz;
		LIS3DSH_ReadXYZ_Raw(&hlis, &rx, &ry, &rz);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	f107 020e 	add.w	r2, r7, #14
 80016b4:	f107 0110 	add.w	r1, r7, #16
 80016b8:	48a2      	ldr	r0, [pc, #648]	@ (8001944 <lis3dsh_spi_polling_demo_main+0x464>)
 80016ba:	f7ff fcb6 	bl	800102a <LIS3DSH_ReadXYZ_Raw>

		/* Moving average (reduces quantization + random noise) */
		float x_ma, y_ma, z_ma;
		add_sample(rx, ry, rz, &x_ma, &y_ma, &z_ma);
 80016be:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 80016c2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80016c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016ca:	f107 0408 	add.w	r4, r7, #8
 80016ce:	463b      	mov	r3, r7
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff fe80 	bl	80013dc <add_sample>

		/* Remove initial biases estimated at startup */
		float x = x_ma - x_off, y = y_ma - y_off, z = z_ma - z_off;
 80016dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80016ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80016f0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80016fc:	ed97 7a00 	vldr	s14, [r7]
 8001700:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

		/* 1st-order LPF (suppress residual noise/jerk) */
		float xf = lpf_update(&fx, x);
 800170c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001710:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fe3c 	bl	8001392 <lpf_update>
 800171a:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
		float yf = lpf_update(&fy, y);
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fe33 	bl	8001392 <lpf_update>
 800172c:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		float zf = lpf_update(&fz, z);
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe2a 	bl	8001392 <lpf_update>
 800173e:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40

		/* Convert LSB → g (FS=±2g sensitivity: 0.06 mg/LSB) */
		const float LSB_TO_G = 0.00006f; /* 60 µg/LSB */
 8001742:	4b81      	ldr	r3, [pc, #516]	@ (8001948 <lis3dsh_spi_polling_demo_main+0x468>)
 8001744:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float ax = xf * LSB_TO_G, ay = yf * LSB_TO_G, az = zf * LSB_TO_G;
 8001746:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800174a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 8001756:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800175a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001762:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8001766:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800176a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

		/* Clamp to [-1, 1] to keep asin() in domain */
		if (ax > 1)
 8001776:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800177a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	dd02      	ble.n	800178e <lis3dsh_spi_polling_demo_main+0x2ae>
			ax = 1;
 8001788:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800178c:	663b      	str	r3, [r7, #96]	@ 0x60
		if (ax < -1)
 800178e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001792:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d501      	bpl.n	80017a4 <lis3dsh_spi_polling_demo_main+0x2c4>
			ax = -1;
 80017a0:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <lis3dsh_spi_polling_demo_main+0x46c>)
 80017a2:	663b      	str	r3, [r7, #96]	@ 0x60
		if (ay > 1)
 80017a4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80017a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	dd02      	ble.n	80017bc <lis3dsh_spi_polling_demo_main+0x2dc>
			ay = 1;
 80017b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (ay < -1)
 80017bc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80017c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d501      	bpl.n	80017d2 <lis3dsh_spi_polling_demo_main+0x2f2>
			ay = -1;
 80017ce:	4b5f      	ldr	r3, [pc, #380]	@ (800194c <lis3dsh_spi_polling_demo_main+0x46c>)
 80017d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (az > 1)
 80017d2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	dd02      	ble.n	80017ea <lis3dsh_spi_polling_demo_main+0x30a>
			az = 1;
 80017e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017e8:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (az < -1)
 80017ea:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017ee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80017f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d501      	bpl.n	8001800 <lis3dsh_spi_polling_demo_main+0x320>
			az = -1;
 80017fc:	4b53      	ldr	r3, [pc, #332]	@ (800194c <lis3dsh_spi_polling_demo_main+0x46c>)
 80017fe:	65bb      	str	r3, [r7, #88]	@ 0x58

		/* Axis-only tilt angles (deg). For simple UI (not full 3D orientation). */
		float x_deg = asinf(ax) * RAD2DEG;
 8001800:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8001804:	f002 ffc2 	bl	800478c <asinf>
 8001808:	eef0 7a40 	vmov.f32	s15, s0
 800180c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001950 <lis3dsh_spi_polling_demo_main+0x470>
 8001810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001814:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		float y_deg = asinf(ay) * RAD2DEG;
 8001818:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 800181c:	f002 ffb6 	bl	800478c <asinf>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001950 <lis3dsh_spi_polling_demo_main+0x470>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float z_deg = asinf(az) * RAD2DEG;
 8001830:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001834:	f002 ffaa 	bl	800478c <asinf>
 8001838:	eef0 7a40 	vmov.f32	s15, s0
 800183c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001950 <lis3dsh_spi_polling_demo_main+0x470>
 8001840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001844:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		printf("Axis-only ang  X:%8.2f  Y:%8.2f  Z:%8.2f deg\r\n", x_deg, y_deg,
 8001848:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	4680      	mov	r8, r0
 8001850:	4689      	mov	r9, r1
 8001852:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001854:	f7fe fe78 	bl	8000548 <__aeabi_f2d>
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
 800185c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800185e:	f7fe fe73 	bl	8000548 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800186a:	e9cd 4500 	strd	r4, r5, [sp]
 800186e:	4642      	mov	r2, r8
 8001870:	464b      	mov	r3, r9
 8001872:	4838      	ldr	r0, [pc, #224]	@ (8001954 <lis3dsh_spi_polling_demo_main+0x474>)
 8001874:	f000 ffb0 	bl	80027d8 <iprintf>
		 * PD13 = ORANGE = UP    (Y > +15)
		 * PD15 = BLUE   = DOWN  (Y < -15)
		 * ------------------------------------------------------------------ */

		/* X-axis LEFT/RIGHT with deadband around 0 deg */
		if (x_deg > 15.0f) {
 8001878:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800187c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd0a      	ble.n	80018a0 <lis3dsh_spi_polling_demo_main+0x3c0>
			GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	210e      	movs	r1, #14
 800188e:	4832      	ldr	r0, [pc, #200]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 8001890:	f7ff fa3c 	bl	8000d0c <GPIO_WritePin>
			GPIO_WritePin(LED_PORT, LED_PIN_GREEN_LX, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	210c      	movs	r1, #12
 8001898:	482f      	ldr	r0, [pc, #188]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 800189a:	f7ff fa37 	bl	8000d0c <GPIO_WritePin>
 800189e:	e01d      	b.n	80018dc <lis3dsh_spi_polling_demo_main+0x3fc>
		} else if (x_deg < -15.0f) {
 80018a0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018a4:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80018a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d50a      	bpl.n	80018c8 <lis3dsh_spi_polling_demo_main+0x3e8>
			GPIO_WritePin(LED_PORT, LED_PIN_GREEN_LX, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	210c      	movs	r1, #12
 80018b6:	4828      	ldr	r0, [pc, #160]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 80018b8:	f7ff fa28 	bl	8000d0c <GPIO_WritePin>
			GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	210e      	movs	r1, #14
 80018c0:	4825      	ldr	r0, [pc, #148]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 80018c2:	f7ff fa23 	bl	8000d0c <GPIO_WritePin>
 80018c6:	e009      	b.n	80018dc <lis3dsh_spi_polling_demo_main+0x3fc>
		} else {
			GPIO_WritePin(LED_PORT, LED_PIN_GREEN_LX, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	210c      	movs	r1, #12
 80018cc:	4822      	ldr	r0, [pc, #136]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 80018ce:	f7ff fa1d 	bl	8000d0c <GPIO_WritePin>
			GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	210e      	movs	r1, #14
 80018d6:	4820      	ldr	r0, [pc, #128]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 80018d8:	f7ff fa18 	bl	8000d0c <GPIO_WritePin>
		}

		/* Y-axis UP/DOWN with deadband */
		if (y_deg > 15.0f) {
 80018dc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018e0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80018e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd0a      	ble.n	8001904 <lis3dsh_spi_polling_demo_main+0x424>
			GPIO_WritePin(LED_PORT, LED_PIN_ORANGE_UPY, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	210d      	movs	r1, #13
 80018f2:	4819      	ldr	r0, [pc, #100]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 80018f4:	f7ff fa0a 	bl	8000d0c <GPIO_WritePin>
			GPIO_WritePin(LED_PORT, LED_PIN_BLUE_DOY, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	210f      	movs	r1, #15
 80018fc:	4816      	ldr	r0, [pc, #88]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 80018fe:	f7ff fa05 	bl	8000d0c <GPIO_WritePin>
 8001902:	e69d      	b.n	8001640 <lis3dsh_spi_polling_demo_main+0x160>
		} else if (y_deg < -15.0f) {
 8001904:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001908:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 800190c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d50a      	bpl.n	800192c <lis3dsh_spi_polling_demo_main+0x44c>
			GPIO_WritePin(LED_PORT, LED_PIN_BLUE_DOY, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	210f      	movs	r1, #15
 800191a:	480f      	ldr	r0, [pc, #60]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 800191c:	f7ff f9f6 	bl	8000d0c <GPIO_WritePin>
			GPIO_WritePin(LED_PORT, LED_PIN_ORANGE_UPY, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	210d      	movs	r1, #13
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 8001926:	f7ff f9f1 	bl	8000d0c <GPIO_WritePin>
 800192a:	e689      	b.n	8001640 <lis3dsh_spi_polling_demo_main+0x160>
		} else {
			GPIO_WritePin(LED_PORT, LED_PIN_ORANGE_UPY, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	210d      	movs	r1, #13
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 8001932:	f7ff f9eb 	bl	8000d0c <GPIO_WritePin>
			GPIO_WritePin(LED_PORT, LED_PIN_BLUE_DOY, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	210f      	movs	r1, #15
 800193a:	4807      	ldr	r0, [pc, #28]	@ (8001958 <lis3dsh_spi_polling_demo_main+0x478>)
 800193c:	f7ff f9e6 	bl	8000d0c <GPIO_WritePin>
	while (1) {
 8001940:	e67e      	b.n	8001640 <lis3dsh_spi_polling_demo_main+0x160>
 8001942:	bf00      	nop
 8001944:	200001f0 	.word	0x200001f0
 8001948:	387ba882 	.word	0x387ba882
 800194c:	bf800000 	.word	0xbf800000
 8001950:	42652ee1 	.word	0x42652ee1
 8001954:	08004a3c 	.word	0x08004a3c
 8001958:	40020c00 	.word	0x40020c00

0800195c <Init_LEDs>:
/* =============================== Peripherals ============================== */

/**
 * @brief Configure LED pins on GPIOD as push-pull outputs (default LOW).
 */
static void Init_LEDs(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	GPIO_EnableClock(GPIO_PORT_D, ENABLE);
 8001962:	2101      	movs	r1, #1
 8001964:	2003      	movs	r0, #3
 8001966:	f7ff f9f7 	bl	8000d58 <GPIO_EnableClock>

	GPIO_Config_t led = { 0 };
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
	led.Mode = GPIO_MODE_OUTPUT;
 800196e:	2301      	movs	r3, #1
 8001970:	713b      	strb	r3, [r7, #4]
	led.OutputType = GPIO_OTYPE_PP;
 8001972:	2300      	movs	r3, #0
 8001974:	717b      	strb	r3, [r7, #5]
	led.PuPd = GPIO_PULLDOWN;
 8001976:	2302      	movs	r3, #2
 8001978:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(LED_PORT, LED_PIN_GREEN_LX, &led);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	461a      	mov	r2, r3
 800197e:	210c      	movs	r1, #12
 8001980:	4820      	ldr	r0, [pc, #128]	@ (8001a04 <Init_LEDs+0xa8>)
 8001982:	f7ff f911 	bl	8000ba8 <GPIO_Init>
	GPIO_Init(LED_PORT, LED_PIN_ORANGE_UPY, &led);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	461a      	mov	r2, r3
 800198a:	210d      	movs	r1, #13
 800198c:	481d      	ldr	r0, [pc, #116]	@ (8001a04 <Init_LEDs+0xa8>)
 800198e:	f7ff f90b 	bl	8000ba8 <GPIO_Init>
	GPIO_Init(LED_PORT, LED_PIN_RED_RX, &led);
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	461a      	mov	r2, r3
 8001996:	210e      	movs	r1, #14
 8001998:	481a      	ldr	r0, [pc, #104]	@ (8001a04 <Init_LEDs+0xa8>)
 800199a:	f7ff f905 	bl	8000ba8 <GPIO_Init>
	GPIO_Init(LED_PORT, LED_PIN_BLUE_DOY, &led);
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	461a      	mov	r2, r3
 80019a2:	210f      	movs	r1, #15
 80019a4:	4817      	ldr	r0, [pc, #92]	@ (8001a04 <Init_LEDs+0xa8>)
 80019a6:	f7ff f8ff 	bl	8000ba8 <GPIO_Init>

	GPIO_OSpeed(LED_PORT, LED_PIN_GREEN_LX, GPIO_SPEED_LOW);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210c      	movs	r1, #12
 80019ae:	4815      	ldr	r0, [pc, #84]	@ (8001a04 <Init_LEDs+0xa8>)
 80019b0:	f7ff f987 	bl	8000cc2 <GPIO_OSpeed>
	GPIO_OSpeed(LED_PORT, LED_PIN_ORANGE_UPY, GPIO_SPEED_LOW);
 80019b4:	2200      	movs	r2, #0
 80019b6:	210d      	movs	r1, #13
 80019b8:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <Init_LEDs+0xa8>)
 80019ba:	f7ff f982 	bl	8000cc2 <GPIO_OSpeed>
	GPIO_OSpeed(LED_PORT, LED_PIN_RED_RX, GPIO_SPEED_LOW);
 80019be:	2200      	movs	r2, #0
 80019c0:	210e      	movs	r1, #14
 80019c2:	4810      	ldr	r0, [pc, #64]	@ (8001a04 <Init_LEDs+0xa8>)
 80019c4:	f7ff f97d 	bl	8000cc2 <GPIO_OSpeed>
	GPIO_OSpeed(LED_PORT, LED_PIN_BLUE_DOY, GPIO_SPEED_LOW);
 80019c8:	2200      	movs	r2, #0
 80019ca:	210f      	movs	r1, #15
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <Init_LEDs+0xa8>)
 80019ce:	f7ff f978 	bl	8000cc2 <GPIO_OSpeed>

	GPIO_WritePin(LED_PORT, LED_PIN_GREEN_LX, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	210c      	movs	r1, #12
 80019d6:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <Init_LEDs+0xa8>)
 80019d8:	f7ff f998 	bl	8000d0c <GPIO_WritePin>
	GPIO_WritePin(LED_PORT, LED_PIN_ORANGE_UPY, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	210d      	movs	r1, #13
 80019e0:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <Init_LEDs+0xa8>)
 80019e2:	f7ff f993 	bl	8000d0c <GPIO_WritePin>
	GPIO_WritePin(LED_PORT, LED_PIN_RED_RX, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210e      	movs	r1, #14
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <Init_LEDs+0xa8>)
 80019ec:	f7ff f98e 	bl	8000d0c <GPIO_WritePin>
	GPIO_WritePin(LED_PORT, LED_PIN_BLUE_DOY, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	210f      	movs	r1, #15
 80019f4:	4803      	ldr	r0, [pc, #12]	@ (8001a04 <Init_LEDs+0xa8>)
 80019f6:	f7ff f989 	bl	8000d0c <GPIO_WritePin>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40020c00 	.word	0x40020c00

08001a08 <Init_SPI1_GPIO_CS>:

/**
 * @brief Configure SPI1 pins (PA5/6/7 as AF5) and manual CS on PE3 (idle HIGH).
 */
static void Init_SPI1_GPIO_CS(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	/* SPI pins */
	GPIO_EnableClock(GPIO_PORT_A, ENABLE);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff f9a1 	bl	8000d58 <GPIO_EnableClock>

	GPIO_Config_t af = { 0 };
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
	af.Mode = GPIO_MODE_ALT;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	713b      	strb	r3, [r7, #4]
	af.OutputType = GPIO_OTYPE_PP;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	717b      	strb	r3, [r7, #5]
	af.PuPd = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71bb      	strb	r3, [r7, #6]
	af.AltFunction = 5; /* AF5 = SPI1 */
 8001a26:	2305      	movs	r3, #5
 8001a28:	71fb      	strb	r3, [r7, #7]

	/* High speed to keep clean edges at higher SPI clocks. */
	GPIO_OSpeed(GPIOA, 5U, GPIO_SPEED_HIGH);
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	4820      	ldr	r0, [pc, #128]	@ (8001ab0 <Init_SPI1_GPIO_CS+0xa8>)
 8001a30:	f7ff f947 	bl	8000cc2 <GPIO_OSpeed>
	GPIO_OSpeed(GPIOA, 6U, GPIO_SPEED_HIGH);
 8001a34:	2203      	movs	r2, #3
 8001a36:	2106      	movs	r1, #6
 8001a38:	481d      	ldr	r0, [pc, #116]	@ (8001ab0 <Init_SPI1_GPIO_CS+0xa8>)
 8001a3a:	f7ff f942 	bl	8000cc2 <GPIO_OSpeed>
	GPIO_OSpeed(GPIOA, 7U, GPIO_SPEED_HIGH);
 8001a3e:	2203      	movs	r2, #3
 8001a40:	2107      	movs	r1, #7
 8001a42:	481b      	ldr	r0, [pc, #108]	@ (8001ab0 <Init_SPI1_GPIO_CS+0xa8>)
 8001a44:	f7ff f93d 	bl	8000cc2 <GPIO_OSpeed>

	GPIO_Init(GPIOA, 7U, &af); /* MOSI */
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2107      	movs	r1, #7
 8001a4e:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <Init_SPI1_GPIO_CS+0xa8>)
 8001a50:	f7ff f8aa 	bl	8000ba8 <GPIO_Init>
	GPIO_Init(GPIOA, 6U, &af); /* MISO */
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	461a      	mov	r2, r3
 8001a58:	2106      	movs	r1, #6
 8001a5a:	4815      	ldr	r0, [pc, #84]	@ (8001ab0 <Init_SPI1_GPIO_CS+0xa8>)
 8001a5c:	f7ff f8a4 	bl	8000ba8 <GPIO_Init>
	af.PuPd = GPIO_PULLDOWN; /* Optional pad idle on SCK */
 8001a60:	2302      	movs	r3, #2
 8001a62:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, 5U, &af); /* SCK  */
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	461a      	mov	r2, r3
 8001a68:	2105      	movs	r1, #5
 8001a6a:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <Init_SPI1_GPIO_CS+0xa8>)
 8001a6c:	f7ff f89c 	bl	8000ba8 <GPIO_Init>

	/* CS pin (manual control, active LOW) */
	GPIO_EnableClock(GPIO_PORT_E, ENABLE);
 8001a70:	2101      	movs	r1, #1
 8001a72:	2004      	movs	r0, #4
 8001a74:	f7ff f970 	bl	8000d58 <GPIO_EnableClock>
	GPIO_Config_t cs = { 0 };
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
	cs.Mode = GPIO_MODE_OUTPUT;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	703b      	strb	r3, [r7, #0]
	cs.OutputType = GPIO_OTYPE_PP;
 8001a80:	2300      	movs	r3, #0
 8001a82:	707b      	strb	r3, [r7, #1]
	cs.PuPd = GPIO_PULLUP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	70bb      	strb	r3, [r7, #2]

	GPIO_OSpeed(GPIOE, SPI1_CS_PIN, GPIO_SPEED_HIGH);
 8001a88:	2203      	movs	r2, #3
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <Init_SPI1_GPIO_CS+0xac>)
 8001a8e:	f7ff f918 	bl	8000cc2 <GPIO_OSpeed>
	GPIO_Init(GPIOE, SPI1_CS_PIN, &cs);
 8001a92:	463b      	mov	r3, r7
 8001a94:	461a      	mov	r2, r3
 8001a96:	2103      	movs	r1, #3
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <Init_SPI1_GPIO_CS+0xac>)
 8001a9a:	f7ff f885 	bl	8000ba8 <GPIO_Init>
	GPIO_WritePin(GPIOE, SPI1_CS_PIN, 1); /* idle HIGH */
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <Init_SPI1_GPIO_CS+0xac>)
 8001aa4:	f7ff f932 	bl	8000d0c <GPIO_WritePin>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <Config_SPI1>:
 * @brief Configure SPI1 peripheral (master, full-duplex, 8-bit, Mode 0 initially).
 *
 * @note If reads look wrong (all 0xFF or 0x00), switch to Mode 3:
 *       cpol = SPI_CPOL_HIGH; cpha = SPI_CPHA_SECOND;
 */
static void Config_SPI1(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	hspi1.SPIx = SPI1;
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <Config_SPI1+0x5c>)
 8001abe:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <Config_SPI1+0x60>)
 8001ac0:	601a      	str	r2, [r3, #0]
	hspi1.config.deviceMode = SPI_MODE_MASTER;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <Config_SPI1+0x5c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	711a      	strb	r2, [r3, #4]
	hspi1.config.busConfig = SPI_BUS_FULL_DUPLEX;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <Config_SPI1+0x5c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	715a      	strb	r2, [r3, #5]
	hspi1.config.dff = SPI_DFF_8BITS;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <Config_SPI1+0x5c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	719a      	strb	r2, [r3, #6]

	/* Start with Mode 0; many LIS3DSH boards prefer Mode 3. */
	hspi1.config.cpol = SPI_CPOL_LOW;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <Config_SPI1+0x5c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	71da      	strb	r2, [r3, #7]
	hspi1.config.cpha = SPI_CPHA_FIRST;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <Config_SPI1+0x5c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	721a      	strb	r2, [r3, #8]

	/* Software NSS (SSM=1) with SSI=1 to avoid MODF. */
	hspi1.config.ssm = SPI_SSM_ENABLE;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <Config_SPI1+0x5c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	725a      	strb	r2, [r3, #9]

	/* Start slow (BR=/256). Increase after basic comms verified. */
	hspi1.config.clkSpeed = 7;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <Config_SPI1+0x5c>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	729a      	strb	r2, [r3, #10]

	/* Enable peripheral clock and program CR1. */
	RCC->APB2ENR |= (1U << 12); /* SPI1EN */
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <Config_SPI1+0x64>)
 8001aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <Config_SPI1+0x64>)
 8001af2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af6:	6453      	str	r3, [r2, #68]	@ 0x44
	SPI_Init(&hspi1);
 8001af8:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <Config_SPI1+0x5c>)
 8001afa:	f7ff facf 	bl	800109c <SPI_Init>

	/* With SSM=1, set SSI=1 so NSS is seen high internally. */
	hspi1.SPIx->CR1 |= (1U << 8);
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <Config_SPI1+0x5c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <Config_SPI1+0x5c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200001e4 	.word	0x200001e4
 8001b18:	40013000 	.word	0x40013000
 8001b1c:	40023800 	.word	0x40023800

08001b20 <delay_cycles>:

/**
 * @brief Small cycle-burning delay (portable NOP loop).
 * @param n  Number of iterations (approximate).
 */
static void delay_cycles(volatile uint32_t n) {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	while (n--) {
 8001b28:	e000      	b.n	8001b2c <delay_cycles+0xc>
		__asm__("nop");
 8001b2a:	bf00      	nop
	while (n--) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1e5a      	subs	r2, r3, #1
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <delay_cycles+0xa>
	}
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <FPU_Enable>:
 * UsageFault:contentReference[oaicite:2]{index=2}.
 *
 * Writing 0b11 to CP10 and CP11 fields in SCB->CPACR (bits 20–23) grants
 * full access to the FPU for both privileged and unprivileged code.
 */
static inline void FPU_Enable(void) {
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
    SCB_CPACR |= (0xF << 20);   // CP10=11 (full), CP11=11 (full)
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <FPU_Enable+0x24>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <FPU_Enable+0x24>)
 8001b4e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b52:	6013      	str	r3, [r2, #0]
    __asm volatile ("dsb");     // Data Synchronization Barrier
 8001b54:	f3bf 8f4f 	dsb	sy
    __asm volatile ("isb");     // Instruction Synchronization Barrier
 8001b58:	f3bf 8f6f 	isb	sy
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed88 	.word	0xe000ed88

08001b6c <main>:
/* ==========================================================================
 *                               MAIN PROGRAM
 * ==========================================================================
 */

int main(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
    /* ---- Core bring-up ---- */
    FPU_Enable();   // Enable floating-point unit before any FP math is used
 8001b70:	f7ff ffe8 	bl	8001b44 <FPU_Enable>
     *   - Moving average + LPF filtering
     *   - Tilt angle calculation (roll/pitch from accelerometer data)
     *   - LED direction indicators on the Discovery board
     */
    while (1) {
        lis3dsh_spi_polling_demo_main();
 8001b74:	f7ff fcb4 	bl	80014e0 <lis3dsh_spi_polling_demo_main>
 8001b78:	e7fc      	b.n	8001b74 <main+0x8>
	...

08001b7c <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <ITM_SendChar+0x48>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <ITM_SendChar+0x48>)
 8001b8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <ITM_SendChar+0x4c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <ITM_SendChar+0x4c>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8001b9e:	bf00      	nop
 8001ba0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f8      	beq.n	8001ba0 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001bae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	6013      	str	r3, [r2, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000edfc 	.word	0xe000edfc
 8001bc8:	e0000e00 	.word	0xe0000e00

08001bcc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_kill>:

int _kill(int pid, int sig) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001be6:	f000 ff91 	bl	8002b0c <__errno>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2216      	movs	r2, #22
 8001bee:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_exit>:

void _exit(int status) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffe7 	bl	8001bdc <_kill>
	while (1) {
 8001c0e:	bf00      	nop
 8001c10:	e7fd      	b.n	8001c0e <_exit+0x12>

08001c12 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e00a      	b.n	8001c3a <_read+0x28>
		*ptr++ = __io_getchar();
 8001c24:	f3af 8000 	nop.w
 8001c28:	4601      	mov	r1, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	60ba      	str	r2, [r7, #8]
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbf0      	blt.n	8001c24 <_read+0x12>
	}

	return len;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e009      	b.n	8001c72 <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	60ba      	str	r2, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff88 	bl	8001b7c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbf1      	blt.n	8001c5e <_write+0x12>
	}
	return len;
 8001c7a:	687b      	ldr	r3, [r7, #4]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_close>:

int _close(int file) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_fstat>:

int _fstat(int file, struct stat *st) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cac:	605a      	str	r2, [r3, #4]
	return 0;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_isatty>:

int _isatty(int file) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f000 fef6 	bl	8002b0c <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000230 	.word	0x20000230
 8001d54:	20000380 	.word	0x20000380

08001d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	@ (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	@ (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001d86:	f000 fec7 	bl	8002b18 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001d8a:	f7ff feef 	bl	8001b6c <main>

08001d8e <LoopForever>:

LoopForever:
  b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   r0, =_estack
 8001d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001d9c:	08004dec 	.word	0x08004dec
  ldr r2, =_sbss
 8001da0:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001da4:	20000380 	.word	0x20000380

08001da8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>

08001daa <__cvt>:
 8001daa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dae:	ec57 6b10 	vmov	r6, r7, d0
 8001db2:	2f00      	cmp	r7, #0
 8001db4:	460c      	mov	r4, r1
 8001db6:	4619      	mov	r1, r3
 8001db8:	463b      	mov	r3, r7
 8001dba:	bfbb      	ittet	lt
 8001dbc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001dc0:	461f      	movlt	r7, r3
 8001dc2:	2300      	movge	r3, #0
 8001dc4:	232d      	movlt	r3, #45	@ 0x2d
 8001dc6:	700b      	strb	r3, [r1, #0]
 8001dc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001dca:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001dce:	4691      	mov	r9, r2
 8001dd0:	f023 0820 	bic.w	r8, r3, #32
 8001dd4:	bfbc      	itt	lt
 8001dd6:	4632      	movlt	r2, r6
 8001dd8:	4616      	movlt	r6, r2
 8001dda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001dde:	d005      	beq.n	8001dec <__cvt+0x42>
 8001de0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001de4:	d100      	bne.n	8001de8 <__cvt+0x3e>
 8001de6:	3401      	adds	r4, #1
 8001de8:	2102      	movs	r1, #2
 8001dea:	e000      	b.n	8001dee <__cvt+0x44>
 8001dec:	2103      	movs	r1, #3
 8001dee:	ab03      	add	r3, sp, #12
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	ab02      	add	r3, sp, #8
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	ec47 6b10 	vmov	d0, r6, r7
 8001dfa:	4653      	mov	r3, sl
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	f000 ff3b 	bl	8002c78 <_dtoa_r>
 8001e02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001e06:	4605      	mov	r5, r0
 8001e08:	d119      	bne.n	8001e3e <__cvt+0x94>
 8001e0a:	f019 0f01 	tst.w	r9, #1
 8001e0e:	d00e      	beq.n	8001e2e <__cvt+0x84>
 8001e10:	eb00 0904 	add.w	r9, r0, r4
 8001e14:	2200      	movs	r2, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	4630      	mov	r0, r6
 8001e1a:	4639      	mov	r1, r7
 8001e1c:	f7fe fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e20:	b108      	cbz	r0, 8001e26 <__cvt+0x7c>
 8001e22:	f8cd 900c 	str.w	r9, [sp, #12]
 8001e26:	2230      	movs	r2, #48	@ 0x30
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	454b      	cmp	r3, r9
 8001e2c:	d31e      	bcc.n	8001e6c <__cvt+0xc2>
 8001e2e:	9b03      	ldr	r3, [sp, #12]
 8001e30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001e32:	1b5b      	subs	r3, r3, r5
 8001e34:	4628      	mov	r0, r5
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	b004      	add	sp, #16
 8001e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001e42:	eb00 0904 	add.w	r9, r0, r4
 8001e46:	d1e5      	bne.n	8001e14 <__cvt+0x6a>
 8001e48:	7803      	ldrb	r3, [r0, #0]
 8001e4a:	2b30      	cmp	r3, #48	@ 0x30
 8001e4c:	d10a      	bne.n	8001e64 <__cvt+0xba>
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2300      	movs	r3, #0
 8001e52:	4630      	mov	r0, r6
 8001e54:	4639      	mov	r1, r7
 8001e56:	f7fe fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e5a:	b918      	cbnz	r0, 8001e64 <__cvt+0xba>
 8001e5c:	f1c4 0401 	rsb	r4, r4, #1
 8001e60:	f8ca 4000 	str.w	r4, [sl]
 8001e64:	f8da 3000 	ldr.w	r3, [sl]
 8001e68:	4499      	add	r9, r3
 8001e6a:	e7d3      	b.n	8001e14 <__cvt+0x6a>
 8001e6c:	1c59      	adds	r1, r3, #1
 8001e6e:	9103      	str	r1, [sp, #12]
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e7d9      	b.n	8001e28 <__cvt+0x7e>

08001e74 <__exponent>:
 8001e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e76:	2900      	cmp	r1, #0
 8001e78:	bfba      	itte	lt
 8001e7a:	4249      	neglt	r1, r1
 8001e7c:	232d      	movlt	r3, #45	@ 0x2d
 8001e7e:	232b      	movge	r3, #43	@ 0x2b
 8001e80:	2909      	cmp	r1, #9
 8001e82:	7002      	strb	r2, [r0, #0]
 8001e84:	7043      	strb	r3, [r0, #1]
 8001e86:	dd29      	ble.n	8001edc <__exponent+0x68>
 8001e88:	f10d 0307 	add.w	r3, sp, #7
 8001e8c:	461d      	mov	r5, r3
 8001e8e:	270a      	movs	r7, #10
 8001e90:	461a      	mov	r2, r3
 8001e92:	fbb1 f6f7 	udiv	r6, r1, r7
 8001e96:	fb07 1416 	mls	r4, r7, r6, r1
 8001e9a:	3430      	adds	r4, #48	@ 0x30
 8001e9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	2c63      	cmp	r4, #99	@ 0x63
 8001ea4:	f103 33ff 	add.w	r3, r3, #4294967295
 8001ea8:	4631      	mov	r1, r6
 8001eaa:	dcf1      	bgt.n	8001e90 <__exponent+0x1c>
 8001eac:	3130      	adds	r1, #48	@ 0x30
 8001eae:	1e94      	subs	r4, r2, #2
 8001eb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001eb4:	1c41      	adds	r1, r0, #1
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	42ab      	cmp	r3, r5
 8001eba:	d30a      	bcc.n	8001ed2 <__exponent+0x5e>
 8001ebc:	f10d 0309 	add.w	r3, sp, #9
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	42ac      	cmp	r4, r5
 8001ec4:	bf88      	it	hi
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	3302      	adds	r3, #2
 8001eca:	4403      	add	r3, r0
 8001ecc:	1a18      	subs	r0, r3, r0
 8001ece:	b003      	add	sp, #12
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001ed6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001eda:	e7ed      	b.n	8001eb8 <__exponent+0x44>
 8001edc:	2330      	movs	r3, #48	@ 0x30
 8001ede:	3130      	adds	r1, #48	@ 0x30
 8001ee0:	7083      	strb	r3, [r0, #2]
 8001ee2:	70c1      	strb	r1, [r0, #3]
 8001ee4:	1d03      	adds	r3, r0, #4
 8001ee6:	e7f1      	b.n	8001ecc <__exponent+0x58>

08001ee8 <_printf_float>:
 8001ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eec:	b08d      	sub	sp, #52	@ 0x34
 8001eee:	460c      	mov	r4, r1
 8001ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001ef4:	4616      	mov	r6, r2
 8001ef6:	461f      	mov	r7, r3
 8001ef8:	4605      	mov	r5, r0
 8001efa:	f000 fdbd 	bl	8002a78 <_localeconv_r>
 8001efe:	6803      	ldr	r3, [r0, #0]
 8001f00:	9304      	str	r3, [sp, #16]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe f9b4 	bl	8000270 <strlen>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8001f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f10:	9005      	str	r0, [sp, #20]
 8001f12:	3307      	adds	r3, #7
 8001f14:	f023 0307 	bic.w	r3, r3, #7
 8001f18:	f103 0208 	add.w	r2, r3, #8
 8001f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001f20:	f8d4 b000 	ldr.w	fp, [r4]
 8001f24:	f8c8 2000 	str.w	r2, [r8]
 8001f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001f2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001f30:	9307      	str	r3, [sp, #28]
 8001f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8001f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80021b0 <_printf_float+0x2c8>)
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	f7fe fdf2 	bl	8000b2c <__aeabi_dcmpun>
 8001f48:	bb70      	cbnz	r0, 8001fa8 <_printf_float+0xc0>
 8001f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001f4e:	4b98      	ldr	r3, [pc, #608]	@ (80021b0 <_printf_float+0x2c8>)
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	f7fe fdcc 	bl	8000af0 <__aeabi_dcmple>
 8001f58:	bb30      	cbnz	r0, 8001fa8 <_printf_float+0xc0>
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	4640      	mov	r0, r8
 8001f60:	4649      	mov	r1, r9
 8001f62:	f7fe fdbb 	bl	8000adc <__aeabi_dcmplt>
 8001f66:	b110      	cbz	r0, 8001f6e <_printf_float+0x86>
 8001f68:	232d      	movs	r3, #45	@ 0x2d
 8001f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f6e:	4a91      	ldr	r2, [pc, #580]	@ (80021b4 <_printf_float+0x2cc>)
 8001f70:	4b91      	ldr	r3, [pc, #580]	@ (80021b8 <_printf_float+0x2d0>)
 8001f72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8001f76:	bf8c      	ite	hi
 8001f78:	4690      	movhi	r8, r2
 8001f7a:	4698      	movls	r8, r3
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	6123      	str	r3, [r4, #16]
 8001f80:	f02b 0304 	bic.w	r3, fp, #4
 8001f84:	6023      	str	r3, [r4, #0]
 8001f86:	f04f 0900 	mov.w	r9, #0
 8001f8a:	9700      	str	r7, [sp, #0]
 8001f8c:	4633      	mov	r3, r6
 8001f8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001f90:	4621      	mov	r1, r4
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 f9d2 	bl	800233c <_printf_common>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	f040 808d 	bne.w	80020b8 <_printf_float+0x1d0>
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	b00d      	add	sp, #52	@ 0x34
 8001fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	4640      	mov	r0, r8
 8001fae:	4649      	mov	r1, r9
 8001fb0:	f7fe fdbc 	bl	8000b2c <__aeabi_dcmpun>
 8001fb4:	b140      	cbz	r0, 8001fc8 <_printf_float+0xe0>
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfbc      	itt	lt
 8001fbc:	232d      	movlt	r3, #45	@ 0x2d
 8001fbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8001fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80021bc <_printf_float+0x2d4>)
 8001fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80021c0 <_printf_float+0x2d8>)
 8001fc6:	e7d4      	b.n	8001f72 <_printf_float+0x8a>
 8001fc8:	6863      	ldr	r3, [r4, #4]
 8001fca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001fce:	9206      	str	r2, [sp, #24]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	d13b      	bne.n	800204c <_printf_float+0x164>
 8001fd4:	2306      	movs	r3, #6
 8001fd6:	6063      	str	r3, [r4, #4]
 8001fd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6022      	str	r2, [r4, #0]
 8001fe0:	9303      	str	r3, [sp, #12]
 8001fe2:	ab0a      	add	r3, sp, #40	@ 0x28
 8001fe4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	6861      	ldr	r1, [r4, #4]
 8001fee:	ec49 8b10 	vmov	d0, r8, r9
 8001ff2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	f7ff fed7 	bl	8001daa <__cvt>
 8001ffc:	9b06      	ldr	r3, [sp, #24]
 8001ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002000:	2b47      	cmp	r3, #71	@ 0x47
 8002002:	4680      	mov	r8, r0
 8002004:	d129      	bne.n	800205a <_printf_float+0x172>
 8002006:	1cc8      	adds	r0, r1, #3
 8002008:	db02      	blt.n	8002010 <_printf_float+0x128>
 800200a:	6863      	ldr	r3, [r4, #4]
 800200c:	4299      	cmp	r1, r3
 800200e:	dd41      	ble.n	8002094 <_printf_float+0x1ac>
 8002010:	f1aa 0a02 	sub.w	sl, sl, #2
 8002014:	fa5f fa8a 	uxtb.w	sl, sl
 8002018:	3901      	subs	r1, #1
 800201a:	4652      	mov	r2, sl
 800201c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002020:	9109      	str	r1, [sp, #36]	@ 0x24
 8002022:	f7ff ff27 	bl	8001e74 <__exponent>
 8002026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002028:	1813      	adds	r3, r2, r0
 800202a:	2a01      	cmp	r2, #1
 800202c:	4681      	mov	r9, r0
 800202e:	6123      	str	r3, [r4, #16]
 8002030:	dc02      	bgt.n	8002038 <_printf_float+0x150>
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	07d2      	lsls	r2, r2, #31
 8002036:	d501      	bpl.n	800203c <_printf_float+0x154>
 8002038:	3301      	adds	r3, #1
 800203a:	6123      	str	r3, [r4, #16]
 800203c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0a2      	beq.n	8001f8a <_printf_float+0xa2>
 8002044:	232d      	movs	r3, #45	@ 0x2d
 8002046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800204a:	e79e      	b.n	8001f8a <_printf_float+0xa2>
 800204c:	9a06      	ldr	r2, [sp, #24]
 800204e:	2a47      	cmp	r2, #71	@ 0x47
 8002050:	d1c2      	bne.n	8001fd8 <_printf_float+0xf0>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1c0      	bne.n	8001fd8 <_printf_float+0xf0>
 8002056:	2301      	movs	r3, #1
 8002058:	e7bd      	b.n	8001fd6 <_printf_float+0xee>
 800205a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800205e:	d9db      	bls.n	8002018 <_printf_float+0x130>
 8002060:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002064:	d118      	bne.n	8002098 <_printf_float+0x1b0>
 8002066:	2900      	cmp	r1, #0
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	dd0b      	ble.n	8002084 <_printf_float+0x19c>
 800206c:	6121      	str	r1, [r4, #16]
 800206e:	b913      	cbnz	r3, 8002076 <_printf_float+0x18e>
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	07d0      	lsls	r0, r2, #31
 8002074:	d502      	bpl.n	800207c <_printf_float+0x194>
 8002076:	3301      	adds	r3, #1
 8002078:	440b      	add	r3, r1
 800207a:	6123      	str	r3, [r4, #16]
 800207c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800207e:	f04f 0900 	mov.w	r9, #0
 8002082:	e7db      	b.n	800203c <_printf_float+0x154>
 8002084:	b913      	cbnz	r3, 800208c <_printf_float+0x1a4>
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	07d2      	lsls	r2, r2, #31
 800208a:	d501      	bpl.n	8002090 <_printf_float+0x1a8>
 800208c:	3302      	adds	r3, #2
 800208e:	e7f4      	b.n	800207a <_printf_float+0x192>
 8002090:	2301      	movs	r3, #1
 8002092:	e7f2      	b.n	800207a <_printf_float+0x192>
 8002094:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800209a:	4299      	cmp	r1, r3
 800209c:	db05      	blt.n	80020aa <_printf_float+0x1c2>
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	6121      	str	r1, [r4, #16]
 80020a2:	07d8      	lsls	r0, r3, #31
 80020a4:	d5ea      	bpl.n	800207c <_printf_float+0x194>
 80020a6:	1c4b      	adds	r3, r1, #1
 80020a8:	e7e7      	b.n	800207a <_printf_float+0x192>
 80020aa:	2900      	cmp	r1, #0
 80020ac:	bfd4      	ite	le
 80020ae:	f1c1 0202 	rsble	r2, r1, #2
 80020b2:	2201      	movgt	r2, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	e7e0      	b.n	800207a <_printf_float+0x192>
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	055a      	lsls	r2, r3, #21
 80020bc:	d407      	bmi.n	80020ce <_printf_float+0x1e6>
 80020be:	6923      	ldr	r3, [r4, #16]
 80020c0:	4642      	mov	r2, r8
 80020c2:	4631      	mov	r1, r6
 80020c4:	4628      	mov	r0, r5
 80020c6:	47b8      	blx	r7
 80020c8:	3001      	adds	r0, #1
 80020ca:	d12b      	bne.n	8002124 <_printf_float+0x23c>
 80020cc:	e767      	b.n	8001f9e <_printf_float+0xb6>
 80020ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80020d2:	f240 80dd 	bls.w	8002290 <_printf_float+0x3a8>
 80020d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80020da:	2200      	movs	r2, #0
 80020dc:	2300      	movs	r3, #0
 80020de:	f7fe fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d033      	beq.n	800214e <_printf_float+0x266>
 80020e6:	4a37      	ldr	r2, [pc, #220]	@ (80021c4 <_printf_float+0x2dc>)
 80020e8:	2301      	movs	r3, #1
 80020ea:	4631      	mov	r1, r6
 80020ec:	4628      	mov	r0, r5
 80020ee:	47b8      	blx	r7
 80020f0:	3001      	adds	r0, #1
 80020f2:	f43f af54 	beq.w	8001f9e <_printf_float+0xb6>
 80020f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80020fa:	4543      	cmp	r3, r8
 80020fc:	db02      	blt.n	8002104 <_printf_float+0x21c>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	07d8      	lsls	r0, r3, #31
 8002102:	d50f      	bpl.n	8002124 <_printf_float+0x23c>
 8002104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002108:	4631      	mov	r1, r6
 800210a:	4628      	mov	r0, r5
 800210c:	47b8      	blx	r7
 800210e:	3001      	adds	r0, #1
 8002110:	f43f af45 	beq.w	8001f9e <_printf_float+0xb6>
 8002114:	f04f 0900 	mov.w	r9, #0
 8002118:	f108 38ff 	add.w	r8, r8, #4294967295
 800211c:	f104 0a1a 	add.w	sl, r4, #26
 8002120:	45c8      	cmp	r8, r9
 8002122:	dc09      	bgt.n	8002138 <_printf_float+0x250>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	079b      	lsls	r3, r3, #30
 8002128:	f100 8103 	bmi.w	8002332 <_printf_float+0x44a>
 800212c:	68e0      	ldr	r0, [r4, #12]
 800212e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002130:	4298      	cmp	r0, r3
 8002132:	bfb8      	it	lt
 8002134:	4618      	movlt	r0, r3
 8002136:	e734      	b.n	8001fa2 <_printf_float+0xba>
 8002138:	2301      	movs	r3, #1
 800213a:	4652      	mov	r2, sl
 800213c:	4631      	mov	r1, r6
 800213e:	4628      	mov	r0, r5
 8002140:	47b8      	blx	r7
 8002142:	3001      	adds	r0, #1
 8002144:	f43f af2b 	beq.w	8001f9e <_printf_float+0xb6>
 8002148:	f109 0901 	add.w	r9, r9, #1
 800214c:	e7e8      	b.n	8002120 <_printf_float+0x238>
 800214e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	dc39      	bgt.n	80021c8 <_printf_float+0x2e0>
 8002154:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <_printf_float+0x2dc>)
 8002156:	2301      	movs	r3, #1
 8002158:	4631      	mov	r1, r6
 800215a:	4628      	mov	r0, r5
 800215c:	47b8      	blx	r7
 800215e:	3001      	adds	r0, #1
 8002160:	f43f af1d 	beq.w	8001f9e <_printf_float+0xb6>
 8002164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002168:	ea59 0303 	orrs.w	r3, r9, r3
 800216c:	d102      	bne.n	8002174 <_printf_float+0x28c>
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	07d9      	lsls	r1, r3, #31
 8002172:	d5d7      	bpl.n	8002124 <_printf_float+0x23c>
 8002174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002178:	4631      	mov	r1, r6
 800217a:	4628      	mov	r0, r5
 800217c:	47b8      	blx	r7
 800217e:	3001      	adds	r0, #1
 8002180:	f43f af0d 	beq.w	8001f9e <_printf_float+0xb6>
 8002184:	f04f 0a00 	mov.w	sl, #0
 8002188:	f104 0b1a 	add.w	fp, r4, #26
 800218c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800218e:	425b      	negs	r3, r3
 8002190:	4553      	cmp	r3, sl
 8002192:	dc01      	bgt.n	8002198 <_printf_float+0x2b0>
 8002194:	464b      	mov	r3, r9
 8002196:	e793      	b.n	80020c0 <_printf_float+0x1d8>
 8002198:	2301      	movs	r3, #1
 800219a:	465a      	mov	r2, fp
 800219c:	4631      	mov	r1, r6
 800219e:	4628      	mov	r0, r5
 80021a0:	47b8      	blx	r7
 80021a2:	3001      	adds	r0, #1
 80021a4:	f43f aefb 	beq.w	8001f9e <_printf_float+0xb6>
 80021a8:	f10a 0a01 	add.w	sl, sl, #1
 80021ac:	e7ee      	b.n	800218c <_printf_float+0x2a4>
 80021ae:	bf00      	nop
 80021b0:	7fefffff 	.word	0x7fefffff
 80021b4:	08004a6f 	.word	0x08004a6f
 80021b8:	08004a6b 	.word	0x08004a6b
 80021bc:	08004a77 	.word	0x08004a77
 80021c0:	08004a73 	.word	0x08004a73
 80021c4:	08004a7b 	.word	0x08004a7b
 80021c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80021ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80021ce:	4553      	cmp	r3, sl
 80021d0:	bfa8      	it	ge
 80021d2:	4653      	movge	r3, sl
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	4699      	mov	r9, r3
 80021d8:	dc36      	bgt.n	8002248 <_printf_float+0x360>
 80021da:	f04f 0b00 	mov.w	fp, #0
 80021de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80021e2:	f104 021a 	add.w	r2, r4, #26
 80021e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80021e8:	9306      	str	r3, [sp, #24]
 80021ea:	eba3 0309 	sub.w	r3, r3, r9
 80021ee:	455b      	cmp	r3, fp
 80021f0:	dc31      	bgt.n	8002256 <_printf_float+0x36e>
 80021f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021f4:	459a      	cmp	sl, r3
 80021f6:	dc3a      	bgt.n	800226e <_printf_float+0x386>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	07da      	lsls	r2, r3, #31
 80021fc:	d437      	bmi.n	800226e <_printf_float+0x386>
 80021fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002200:	ebaa 0903 	sub.w	r9, sl, r3
 8002204:	9b06      	ldr	r3, [sp, #24]
 8002206:	ebaa 0303 	sub.w	r3, sl, r3
 800220a:	4599      	cmp	r9, r3
 800220c:	bfa8      	it	ge
 800220e:	4699      	movge	r9, r3
 8002210:	f1b9 0f00 	cmp.w	r9, #0
 8002214:	dc33      	bgt.n	800227e <_printf_float+0x396>
 8002216:	f04f 0800 	mov.w	r8, #0
 800221a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800221e:	f104 0b1a 	add.w	fp, r4, #26
 8002222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002224:	ebaa 0303 	sub.w	r3, sl, r3
 8002228:	eba3 0309 	sub.w	r3, r3, r9
 800222c:	4543      	cmp	r3, r8
 800222e:	f77f af79 	ble.w	8002124 <_printf_float+0x23c>
 8002232:	2301      	movs	r3, #1
 8002234:	465a      	mov	r2, fp
 8002236:	4631      	mov	r1, r6
 8002238:	4628      	mov	r0, r5
 800223a:	47b8      	blx	r7
 800223c:	3001      	adds	r0, #1
 800223e:	f43f aeae 	beq.w	8001f9e <_printf_float+0xb6>
 8002242:	f108 0801 	add.w	r8, r8, #1
 8002246:	e7ec      	b.n	8002222 <_printf_float+0x33a>
 8002248:	4642      	mov	r2, r8
 800224a:	4631      	mov	r1, r6
 800224c:	4628      	mov	r0, r5
 800224e:	47b8      	blx	r7
 8002250:	3001      	adds	r0, #1
 8002252:	d1c2      	bne.n	80021da <_printf_float+0x2f2>
 8002254:	e6a3      	b.n	8001f9e <_printf_float+0xb6>
 8002256:	2301      	movs	r3, #1
 8002258:	4631      	mov	r1, r6
 800225a:	4628      	mov	r0, r5
 800225c:	9206      	str	r2, [sp, #24]
 800225e:	47b8      	blx	r7
 8002260:	3001      	adds	r0, #1
 8002262:	f43f ae9c 	beq.w	8001f9e <_printf_float+0xb6>
 8002266:	9a06      	ldr	r2, [sp, #24]
 8002268:	f10b 0b01 	add.w	fp, fp, #1
 800226c:	e7bb      	b.n	80021e6 <_printf_float+0x2fe>
 800226e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002272:	4631      	mov	r1, r6
 8002274:	4628      	mov	r0, r5
 8002276:	47b8      	blx	r7
 8002278:	3001      	adds	r0, #1
 800227a:	d1c0      	bne.n	80021fe <_printf_float+0x316>
 800227c:	e68f      	b.n	8001f9e <_printf_float+0xb6>
 800227e:	9a06      	ldr	r2, [sp, #24]
 8002280:	464b      	mov	r3, r9
 8002282:	4442      	add	r2, r8
 8002284:	4631      	mov	r1, r6
 8002286:	4628      	mov	r0, r5
 8002288:	47b8      	blx	r7
 800228a:	3001      	adds	r0, #1
 800228c:	d1c3      	bne.n	8002216 <_printf_float+0x32e>
 800228e:	e686      	b.n	8001f9e <_printf_float+0xb6>
 8002290:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002294:	f1ba 0f01 	cmp.w	sl, #1
 8002298:	dc01      	bgt.n	800229e <_printf_float+0x3b6>
 800229a:	07db      	lsls	r3, r3, #31
 800229c:	d536      	bpl.n	800230c <_printf_float+0x424>
 800229e:	2301      	movs	r3, #1
 80022a0:	4642      	mov	r2, r8
 80022a2:	4631      	mov	r1, r6
 80022a4:	4628      	mov	r0, r5
 80022a6:	47b8      	blx	r7
 80022a8:	3001      	adds	r0, #1
 80022aa:	f43f ae78 	beq.w	8001f9e <_printf_float+0xb6>
 80022ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80022b2:	4631      	mov	r1, r6
 80022b4:	4628      	mov	r0, r5
 80022b6:	47b8      	blx	r7
 80022b8:	3001      	adds	r0, #1
 80022ba:	f43f ae70 	beq.w	8001f9e <_printf_float+0xb6>
 80022be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80022c2:	2200      	movs	r2, #0
 80022c4:	2300      	movs	r3, #0
 80022c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80022ca:	f7fe fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80022ce:	b9c0      	cbnz	r0, 8002302 <_printf_float+0x41a>
 80022d0:	4653      	mov	r3, sl
 80022d2:	f108 0201 	add.w	r2, r8, #1
 80022d6:	4631      	mov	r1, r6
 80022d8:	4628      	mov	r0, r5
 80022da:	47b8      	blx	r7
 80022dc:	3001      	adds	r0, #1
 80022de:	d10c      	bne.n	80022fa <_printf_float+0x412>
 80022e0:	e65d      	b.n	8001f9e <_printf_float+0xb6>
 80022e2:	2301      	movs	r3, #1
 80022e4:	465a      	mov	r2, fp
 80022e6:	4631      	mov	r1, r6
 80022e8:	4628      	mov	r0, r5
 80022ea:	47b8      	blx	r7
 80022ec:	3001      	adds	r0, #1
 80022ee:	f43f ae56 	beq.w	8001f9e <_printf_float+0xb6>
 80022f2:	f108 0801 	add.w	r8, r8, #1
 80022f6:	45d0      	cmp	r8, sl
 80022f8:	dbf3      	blt.n	80022e2 <_printf_float+0x3fa>
 80022fa:	464b      	mov	r3, r9
 80022fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002300:	e6df      	b.n	80020c2 <_printf_float+0x1da>
 8002302:	f04f 0800 	mov.w	r8, #0
 8002306:	f104 0b1a 	add.w	fp, r4, #26
 800230a:	e7f4      	b.n	80022f6 <_printf_float+0x40e>
 800230c:	2301      	movs	r3, #1
 800230e:	4642      	mov	r2, r8
 8002310:	e7e1      	b.n	80022d6 <_printf_float+0x3ee>
 8002312:	2301      	movs	r3, #1
 8002314:	464a      	mov	r2, r9
 8002316:	4631      	mov	r1, r6
 8002318:	4628      	mov	r0, r5
 800231a:	47b8      	blx	r7
 800231c:	3001      	adds	r0, #1
 800231e:	f43f ae3e 	beq.w	8001f9e <_printf_float+0xb6>
 8002322:	f108 0801 	add.w	r8, r8, #1
 8002326:	68e3      	ldr	r3, [r4, #12]
 8002328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800232a:	1a5b      	subs	r3, r3, r1
 800232c:	4543      	cmp	r3, r8
 800232e:	dcf0      	bgt.n	8002312 <_printf_float+0x42a>
 8002330:	e6fc      	b.n	800212c <_printf_float+0x244>
 8002332:	f04f 0800 	mov.w	r8, #0
 8002336:	f104 0919 	add.w	r9, r4, #25
 800233a:	e7f4      	b.n	8002326 <_printf_float+0x43e>

0800233c <_printf_common>:
 800233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	4616      	mov	r6, r2
 8002342:	4698      	mov	r8, r3
 8002344:	688a      	ldr	r2, [r1, #8]
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800234c:	4293      	cmp	r3, r2
 800234e:	bfb8      	it	lt
 8002350:	4613      	movlt	r3, r2
 8002352:	6033      	str	r3, [r6, #0]
 8002354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002358:	4607      	mov	r7, r0
 800235a:	460c      	mov	r4, r1
 800235c:	b10a      	cbz	r2, 8002362 <_printf_common+0x26>
 800235e:	3301      	adds	r3, #1
 8002360:	6033      	str	r3, [r6, #0]
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	0699      	lsls	r1, r3, #26
 8002366:	bf42      	ittt	mi
 8002368:	6833      	ldrmi	r3, [r6, #0]
 800236a:	3302      	addmi	r3, #2
 800236c:	6033      	strmi	r3, [r6, #0]
 800236e:	6825      	ldr	r5, [r4, #0]
 8002370:	f015 0506 	ands.w	r5, r5, #6
 8002374:	d106      	bne.n	8002384 <_printf_common+0x48>
 8002376:	f104 0a19 	add.w	sl, r4, #25
 800237a:	68e3      	ldr	r3, [r4, #12]
 800237c:	6832      	ldr	r2, [r6, #0]
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	42ab      	cmp	r3, r5
 8002382:	dc26      	bgt.n	80023d2 <_printf_common+0x96>
 8002384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	3b00      	subs	r3, #0
 800238c:	bf18      	it	ne
 800238e:	2301      	movne	r3, #1
 8002390:	0692      	lsls	r2, r2, #26
 8002392:	d42b      	bmi.n	80023ec <_printf_common+0xb0>
 8002394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002398:	4641      	mov	r1, r8
 800239a:	4638      	mov	r0, r7
 800239c:	47c8      	blx	r9
 800239e:	3001      	adds	r0, #1
 80023a0:	d01e      	beq.n	80023e0 <_printf_common+0xa4>
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	6922      	ldr	r2, [r4, #16]
 80023a6:	f003 0306 	and.w	r3, r3, #6
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf02      	ittt	eq
 80023ae:	68e5      	ldreq	r5, [r4, #12]
 80023b0:	6833      	ldreq	r3, [r6, #0]
 80023b2:	1aed      	subeq	r5, r5, r3
 80023b4:	68a3      	ldr	r3, [r4, #8]
 80023b6:	bf0c      	ite	eq
 80023b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023bc:	2500      	movne	r5, #0
 80023be:	4293      	cmp	r3, r2
 80023c0:	bfc4      	itt	gt
 80023c2:	1a9b      	subgt	r3, r3, r2
 80023c4:	18ed      	addgt	r5, r5, r3
 80023c6:	2600      	movs	r6, #0
 80023c8:	341a      	adds	r4, #26
 80023ca:	42b5      	cmp	r5, r6
 80023cc:	d11a      	bne.n	8002404 <_printf_common+0xc8>
 80023ce:	2000      	movs	r0, #0
 80023d0:	e008      	b.n	80023e4 <_printf_common+0xa8>
 80023d2:	2301      	movs	r3, #1
 80023d4:	4652      	mov	r2, sl
 80023d6:	4641      	mov	r1, r8
 80023d8:	4638      	mov	r0, r7
 80023da:	47c8      	blx	r9
 80023dc:	3001      	adds	r0, #1
 80023de:	d103      	bne.n	80023e8 <_printf_common+0xac>
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e8:	3501      	adds	r5, #1
 80023ea:	e7c6      	b.n	800237a <_printf_common+0x3e>
 80023ec:	18e1      	adds	r1, r4, r3
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	2030      	movs	r0, #48	@ 0x30
 80023f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023f6:	4422      	add	r2, r4
 80023f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002400:	3302      	adds	r3, #2
 8002402:	e7c7      	b.n	8002394 <_printf_common+0x58>
 8002404:	2301      	movs	r3, #1
 8002406:	4622      	mov	r2, r4
 8002408:	4641      	mov	r1, r8
 800240a:	4638      	mov	r0, r7
 800240c:	47c8      	blx	r9
 800240e:	3001      	adds	r0, #1
 8002410:	d0e6      	beq.n	80023e0 <_printf_common+0xa4>
 8002412:	3601      	adds	r6, #1
 8002414:	e7d9      	b.n	80023ca <_printf_common+0x8e>
	...

08002418 <_printf_i>:
 8002418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800241c:	7e0f      	ldrb	r7, [r1, #24]
 800241e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002420:	2f78      	cmp	r7, #120	@ 0x78
 8002422:	4691      	mov	r9, r2
 8002424:	4680      	mov	r8, r0
 8002426:	460c      	mov	r4, r1
 8002428:	469a      	mov	sl, r3
 800242a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800242e:	d807      	bhi.n	8002440 <_printf_i+0x28>
 8002430:	2f62      	cmp	r7, #98	@ 0x62
 8002432:	d80a      	bhi.n	800244a <_printf_i+0x32>
 8002434:	2f00      	cmp	r7, #0
 8002436:	f000 80d1 	beq.w	80025dc <_printf_i+0x1c4>
 800243a:	2f58      	cmp	r7, #88	@ 0x58
 800243c:	f000 80b8 	beq.w	80025b0 <_printf_i+0x198>
 8002440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002448:	e03a      	b.n	80024c0 <_printf_i+0xa8>
 800244a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800244e:	2b15      	cmp	r3, #21
 8002450:	d8f6      	bhi.n	8002440 <_printf_i+0x28>
 8002452:	a101      	add	r1, pc, #4	@ (adr r1, 8002458 <_printf_i+0x40>)
 8002454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002458:	080024b1 	.word	0x080024b1
 800245c:	080024c5 	.word	0x080024c5
 8002460:	08002441 	.word	0x08002441
 8002464:	08002441 	.word	0x08002441
 8002468:	08002441 	.word	0x08002441
 800246c:	08002441 	.word	0x08002441
 8002470:	080024c5 	.word	0x080024c5
 8002474:	08002441 	.word	0x08002441
 8002478:	08002441 	.word	0x08002441
 800247c:	08002441 	.word	0x08002441
 8002480:	08002441 	.word	0x08002441
 8002484:	080025c3 	.word	0x080025c3
 8002488:	080024ef 	.word	0x080024ef
 800248c:	0800257d 	.word	0x0800257d
 8002490:	08002441 	.word	0x08002441
 8002494:	08002441 	.word	0x08002441
 8002498:	080025e5 	.word	0x080025e5
 800249c:	08002441 	.word	0x08002441
 80024a0:	080024ef 	.word	0x080024ef
 80024a4:	08002441 	.word	0x08002441
 80024a8:	08002441 	.word	0x08002441
 80024ac:	08002585 	.word	0x08002585
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	1d1a      	adds	r2, r3, #4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6032      	str	r2, [r6, #0]
 80024b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024c0:	2301      	movs	r3, #1
 80024c2:	e09c      	b.n	80025fe <_printf_i+0x1e6>
 80024c4:	6833      	ldr	r3, [r6, #0]
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	1d19      	adds	r1, r3, #4
 80024ca:	6031      	str	r1, [r6, #0]
 80024cc:	0606      	lsls	r6, r0, #24
 80024ce:	d501      	bpl.n	80024d4 <_printf_i+0xbc>
 80024d0:	681d      	ldr	r5, [r3, #0]
 80024d2:	e003      	b.n	80024dc <_printf_i+0xc4>
 80024d4:	0645      	lsls	r5, r0, #25
 80024d6:	d5fb      	bpl.n	80024d0 <_printf_i+0xb8>
 80024d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024dc:	2d00      	cmp	r5, #0
 80024de:	da03      	bge.n	80024e8 <_printf_i+0xd0>
 80024e0:	232d      	movs	r3, #45	@ 0x2d
 80024e2:	426d      	negs	r5, r5
 80024e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024e8:	4858      	ldr	r0, [pc, #352]	@ (800264c <_printf_i+0x234>)
 80024ea:	230a      	movs	r3, #10
 80024ec:	e011      	b.n	8002512 <_printf_i+0xfa>
 80024ee:	6821      	ldr	r1, [r4, #0]
 80024f0:	6833      	ldr	r3, [r6, #0]
 80024f2:	0608      	lsls	r0, r1, #24
 80024f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80024f8:	d402      	bmi.n	8002500 <_printf_i+0xe8>
 80024fa:	0649      	lsls	r1, r1, #25
 80024fc:	bf48      	it	mi
 80024fe:	b2ad      	uxthmi	r5, r5
 8002500:	2f6f      	cmp	r7, #111	@ 0x6f
 8002502:	4852      	ldr	r0, [pc, #328]	@ (800264c <_printf_i+0x234>)
 8002504:	6033      	str	r3, [r6, #0]
 8002506:	bf14      	ite	ne
 8002508:	230a      	movne	r3, #10
 800250a:	2308      	moveq	r3, #8
 800250c:	2100      	movs	r1, #0
 800250e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002512:	6866      	ldr	r6, [r4, #4]
 8002514:	60a6      	str	r6, [r4, #8]
 8002516:	2e00      	cmp	r6, #0
 8002518:	db05      	blt.n	8002526 <_printf_i+0x10e>
 800251a:	6821      	ldr	r1, [r4, #0]
 800251c:	432e      	orrs	r6, r5
 800251e:	f021 0104 	bic.w	r1, r1, #4
 8002522:	6021      	str	r1, [r4, #0]
 8002524:	d04b      	beq.n	80025be <_printf_i+0x1a6>
 8002526:	4616      	mov	r6, r2
 8002528:	fbb5 f1f3 	udiv	r1, r5, r3
 800252c:	fb03 5711 	mls	r7, r3, r1, r5
 8002530:	5dc7      	ldrb	r7, [r0, r7]
 8002532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002536:	462f      	mov	r7, r5
 8002538:	42bb      	cmp	r3, r7
 800253a:	460d      	mov	r5, r1
 800253c:	d9f4      	bls.n	8002528 <_printf_i+0x110>
 800253e:	2b08      	cmp	r3, #8
 8002540:	d10b      	bne.n	800255a <_printf_i+0x142>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	07df      	lsls	r7, r3, #31
 8002546:	d508      	bpl.n	800255a <_printf_i+0x142>
 8002548:	6923      	ldr	r3, [r4, #16]
 800254a:	6861      	ldr	r1, [r4, #4]
 800254c:	4299      	cmp	r1, r3
 800254e:	bfde      	ittt	le
 8002550:	2330      	movle	r3, #48	@ 0x30
 8002552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800255a:	1b92      	subs	r2, r2, r6
 800255c:	6122      	str	r2, [r4, #16]
 800255e:	f8cd a000 	str.w	sl, [sp]
 8002562:	464b      	mov	r3, r9
 8002564:	aa03      	add	r2, sp, #12
 8002566:	4621      	mov	r1, r4
 8002568:	4640      	mov	r0, r8
 800256a:	f7ff fee7 	bl	800233c <_printf_common>
 800256e:	3001      	adds	r0, #1
 8002570:	d14a      	bne.n	8002608 <_printf_i+0x1f0>
 8002572:	f04f 30ff 	mov.w	r0, #4294967295
 8002576:	b004      	add	sp, #16
 8002578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	f043 0320 	orr.w	r3, r3, #32
 8002582:	6023      	str	r3, [r4, #0]
 8002584:	4832      	ldr	r0, [pc, #200]	@ (8002650 <_printf_i+0x238>)
 8002586:	2778      	movs	r7, #120	@ 0x78
 8002588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	6831      	ldr	r1, [r6, #0]
 8002590:	061f      	lsls	r7, r3, #24
 8002592:	f851 5b04 	ldr.w	r5, [r1], #4
 8002596:	d402      	bmi.n	800259e <_printf_i+0x186>
 8002598:	065f      	lsls	r7, r3, #25
 800259a:	bf48      	it	mi
 800259c:	b2ad      	uxthmi	r5, r5
 800259e:	6031      	str	r1, [r6, #0]
 80025a0:	07d9      	lsls	r1, r3, #31
 80025a2:	bf44      	itt	mi
 80025a4:	f043 0320 	orrmi.w	r3, r3, #32
 80025a8:	6023      	strmi	r3, [r4, #0]
 80025aa:	b11d      	cbz	r5, 80025b4 <_printf_i+0x19c>
 80025ac:	2310      	movs	r3, #16
 80025ae:	e7ad      	b.n	800250c <_printf_i+0xf4>
 80025b0:	4826      	ldr	r0, [pc, #152]	@ (800264c <_printf_i+0x234>)
 80025b2:	e7e9      	b.n	8002588 <_printf_i+0x170>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f023 0320 	bic.w	r3, r3, #32
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	e7f6      	b.n	80025ac <_printf_i+0x194>
 80025be:	4616      	mov	r6, r2
 80025c0:	e7bd      	b.n	800253e <_printf_i+0x126>
 80025c2:	6833      	ldr	r3, [r6, #0]
 80025c4:	6825      	ldr	r5, [r4, #0]
 80025c6:	6961      	ldr	r1, [r4, #20]
 80025c8:	1d18      	adds	r0, r3, #4
 80025ca:	6030      	str	r0, [r6, #0]
 80025cc:	062e      	lsls	r6, r5, #24
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	d501      	bpl.n	80025d6 <_printf_i+0x1be>
 80025d2:	6019      	str	r1, [r3, #0]
 80025d4:	e002      	b.n	80025dc <_printf_i+0x1c4>
 80025d6:	0668      	lsls	r0, r5, #25
 80025d8:	d5fb      	bpl.n	80025d2 <_printf_i+0x1ba>
 80025da:	8019      	strh	r1, [r3, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	6123      	str	r3, [r4, #16]
 80025e0:	4616      	mov	r6, r2
 80025e2:	e7bc      	b.n	800255e <_printf_i+0x146>
 80025e4:	6833      	ldr	r3, [r6, #0]
 80025e6:	1d1a      	adds	r2, r3, #4
 80025e8:	6032      	str	r2, [r6, #0]
 80025ea:	681e      	ldr	r6, [r3, #0]
 80025ec:	6862      	ldr	r2, [r4, #4]
 80025ee:	2100      	movs	r1, #0
 80025f0:	4630      	mov	r0, r6
 80025f2:	f7fd fded 	bl	80001d0 <memchr>
 80025f6:	b108      	cbz	r0, 80025fc <_printf_i+0x1e4>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	6060      	str	r0, [r4, #4]
 80025fc:	6863      	ldr	r3, [r4, #4]
 80025fe:	6123      	str	r3, [r4, #16]
 8002600:	2300      	movs	r3, #0
 8002602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002606:	e7aa      	b.n	800255e <_printf_i+0x146>
 8002608:	6923      	ldr	r3, [r4, #16]
 800260a:	4632      	mov	r2, r6
 800260c:	4649      	mov	r1, r9
 800260e:	4640      	mov	r0, r8
 8002610:	47d0      	blx	sl
 8002612:	3001      	adds	r0, #1
 8002614:	d0ad      	beq.n	8002572 <_printf_i+0x15a>
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	079b      	lsls	r3, r3, #30
 800261a:	d413      	bmi.n	8002644 <_printf_i+0x22c>
 800261c:	68e0      	ldr	r0, [r4, #12]
 800261e:	9b03      	ldr	r3, [sp, #12]
 8002620:	4298      	cmp	r0, r3
 8002622:	bfb8      	it	lt
 8002624:	4618      	movlt	r0, r3
 8002626:	e7a6      	b.n	8002576 <_printf_i+0x15e>
 8002628:	2301      	movs	r3, #1
 800262a:	4632      	mov	r2, r6
 800262c:	4649      	mov	r1, r9
 800262e:	4640      	mov	r0, r8
 8002630:	47d0      	blx	sl
 8002632:	3001      	adds	r0, #1
 8002634:	d09d      	beq.n	8002572 <_printf_i+0x15a>
 8002636:	3501      	adds	r5, #1
 8002638:	68e3      	ldr	r3, [r4, #12]
 800263a:	9903      	ldr	r1, [sp, #12]
 800263c:	1a5b      	subs	r3, r3, r1
 800263e:	42ab      	cmp	r3, r5
 8002640:	dcf2      	bgt.n	8002628 <_printf_i+0x210>
 8002642:	e7eb      	b.n	800261c <_printf_i+0x204>
 8002644:	2500      	movs	r5, #0
 8002646:	f104 0619 	add.w	r6, r4, #25
 800264a:	e7f5      	b.n	8002638 <_printf_i+0x220>
 800264c:	08004a7d 	.word	0x08004a7d
 8002650:	08004a8e 	.word	0x08004a8e

08002654 <std>:
 8002654:	2300      	movs	r3, #0
 8002656:	b510      	push	{r4, lr}
 8002658:	4604      	mov	r4, r0
 800265a:	e9c0 3300 	strd	r3, r3, [r0]
 800265e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002662:	6083      	str	r3, [r0, #8]
 8002664:	8181      	strh	r1, [r0, #12]
 8002666:	6643      	str	r3, [r0, #100]	@ 0x64
 8002668:	81c2      	strh	r2, [r0, #14]
 800266a:	6183      	str	r3, [r0, #24]
 800266c:	4619      	mov	r1, r3
 800266e:	2208      	movs	r2, #8
 8002670:	305c      	adds	r0, #92	@ 0x5c
 8002672:	f000 f9f9 	bl	8002a68 <memset>
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <std+0x58>)
 8002678:	6263      	str	r3, [r4, #36]	@ 0x24
 800267a:	4b0d      	ldr	r3, [pc, #52]	@ (80026b0 <std+0x5c>)
 800267c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800267e:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <std+0x60>)
 8002680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <std+0x64>)
 8002684:	6323      	str	r3, [r4, #48]	@ 0x30
 8002686:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <std+0x68>)
 8002688:	6224      	str	r4, [r4, #32]
 800268a:	429c      	cmp	r4, r3
 800268c:	d006      	beq.n	800269c <std+0x48>
 800268e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002692:	4294      	cmp	r4, r2
 8002694:	d002      	beq.n	800269c <std+0x48>
 8002696:	33d0      	adds	r3, #208	@ 0xd0
 8002698:	429c      	cmp	r4, r3
 800269a:	d105      	bne.n	80026a8 <std+0x54>
 800269c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80026a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a4:	f000 ba5c 	b.w	8002b60 <__retarget_lock_init_recursive>
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	bf00      	nop
 80026ac:	080028b9 	.word	0x080028b9
 80026b0:	080028db 	.word	0x080028db
 80026b4:	08002913 	.word	0x08002913
 80026b8:	08002937 	.word	0x08002937
 80026bc:	20000234 	.word	0x20000234

080026c0 <stdio_exit_handler>:
 80026c0:	4a02      	ldr	r2, [pc, #8]	@ (80026cc <stdio_exit_handler+0xc>)
 80026c2:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <stdio_exit_handler+0x10>)
 80026c4:	4803      	ldr	r0, [pc, #12]	@ (80026d4 <stdio_exit_handler+0x14>)
 80026c6:	f000 b869 	b.w	800279c <_fwalk_sglue>
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	08004499 	.word	0x08004499
 80026d4:	20000010 	.word	0x20000010

080026d8 <cleanup_stdio>:
 80026d8:	6841      	ldr	r1, [r0, #4]
 80026da:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <cleanup_stdio+0x34>)
 80026dc:	4299      	cmp	r1, r3
 80026de:	b510      	push	{r4, lr}
 80026e0:	4604      	mov	r4, r0
 80026e2:	d001      	beq.n	80026e8 <cleanup_stdio+0x10>
 80026e4:	f001 fed8 	bl	8004498 <_fflush_r>
 80026e8:	68a1      	ldr	r1, [r4, #8]
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <cleanup_stdio+0x38>)
 80026ec:	4299      	cmp	r1, r3
 80026ee:	d002      	beq.n	80026f6 <cleanup_stdio+0x1e>
 80026f0:	4620      	mov	r0, r4
 80026f2:	f001 fed1 	bl	8004498 <_fflush_r>
 80026f6:	68e1      	ldr	r1, [r4, #12]
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <cleanup_stdio+0x3c>)
 80026fa:	4299      	cmp	r1, r3
 80026fc:	d004      	beq.n	8002708 <cleanup_stdio+0x30>
 80026fe:	4620      	mov	r0, r4
 8002700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002704:	f001 bec8 	b.w	8004498 <_fflush_r>
 8002708:	bd10      	pop	{r4, pc}
 800270a:	bf00      	nop
 800270c:	20000234 	.word	0x20000234
 8002710:	2000029c 	.word	0x2000029c
 8002714:	20000304 	.word	0x20000304

08002718 <global_stdio_init.part.0>:
 8002718:	b510      	push	{r4, lr}
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <global_stdio_init.part.0+0x30>)
 800271c:	4c0b      	ldr	r4, [pc, #44]	@ (800274c <global_stdio_init.part.0+0x34>)
 800271e:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <global_stdio_init.part.0+0x38>)
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4620      	mov	r0, r4
 8002724:	2200      	movs	r2, #0
 8002726:	2104      	movs	r1, #4
 8002728:	f7ff ff94 	bl	8002654 <std>
 800272c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002730:	2201      	movs	r2, #1
 8002732:	2109      	movs	r1, #9
 8002734:	f7ff ff8e 	bl	8002654 <std>
 8002738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800273c:	2202      	movs	r2, #2
 800273e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002742:	2112      	movs	r1, #18
 8002744:	f7ff bf86 	b.w	8002654 <std>
 8002748:	2000036c 	.word	0x2000036c
 800274c:	20000234 	.word	0x20000234
 8002750:	080026c1 	.word	0x080026c1

08002754 <__sfp_lock_acquire>:
 8002754:	4801      	ldr	r0, [pc, #4]	@ (800275c <__sfp_lock_acquire+0x8>)
 8002756:	f000 ba04 	b.w	8002b62 <__retarget_lock_acquire_recursive>
 800275a:	bf00      	nop
 800275c:	20000375 	.word	0x20000375

08002760 <__sfp_lock_release>:
 8002760:	4801      	ldr	r0, [pc, #4]	@ (8002768 <__sfp_lock_release+0x8>)
 8002762:	f000 b9ff 	b.w	8002b64 <__retarget_lock_release_recursive>
 8002766:	bf00      	nop
 8002768:	20000375 	.word	0x20000375

0800276c <__sinit>:
 800276c:	b510      	push	{r4, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	f7ff fff0 	bl	8002754 <__sfp_lock_acquire>
 8002774:	6a23      	ldr	r3, [r4, #32]
 8002776:	b11b      	cbz	r3, 8002780 <__sinit+0x14>
 8002778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277c:	f7ff bff0 	b.w	8002760 <__sfp_lock_release>
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <__sinit+0x28>)
 8002782:	6223      	str	r3, [r4, #32]
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <__sinit+0x2c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f5      	bne.n	8002778 <__sinit+0xc>
 800278c:	f7ff ffc4 	bl	8002718 <global_stdio_init.part.0>
 8002790:	e7f2      	b.n	8002778 <__sinit+0xc>
 8002792:	bf00      	nop
 8002794:	080026d9 	.word	0x080026d9
 8002798:	2000036c 	.word	0x2000036c

0800279c <_fwalk_sglue>:
 800279c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a0:	4607      	mov	r7, r0
 80027a2:	4688      	mov	r8, r1
 80027a4:	4614      	mov	r4, r2
 80027a6:	2600      	movs	r6, #0
 80027a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027ac:	f1b9 0901 	subs.w	r9, r9, #1
 80027b0:	d505      	bpl.n	80027be <_fwalk_sglue+0x22>
 80027b2:	6824      	ldr	r4, [r4, #0]
 80027b4:	2c00      	cmp	r4, #0
 80027b6:	d1f7      	bne.n	80027a8 <_fwalk_sglue+0xc>
 80027b8:	4630      	mov	r0, r6
 80027ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027be:	89ab      	ldrh	r3, [r5, #12]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d907      	bls.n	80027d4 <_fwalk_sglue+0x38>
 80027c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027c8:	3301      	adds	r3, #1
 80027ca:	d003      	beq.n	80027d4 <_fwalk_sglue+0x38>
 80027cc:	4629      	mov	r1, r5
 80027ce:	4638      	mov	r0, r7
 80027d0:	47c0      	blx	r8
 80027d2:	4306      	orrs	r6, r0
 80027d4:	3568      	adds	r5, #104	@ 0x68
 80027d6:	e7e9      	b.n	80027ac <_fwalk_sglue+0x10>

080027d8 <iprintf>:
 80027d8:	b40f      	push	{r0, r1, r2, r3}
 80027da:	b507      	push	{r0, r1, r2, lr}
 80027dc:	4906      	ldr	r1, [pc, #24]	@ (80027f8 <iprintf+0x20>)
 80027de:	ab04      	add	r3, sp, #16
 80027e0:	6808      	ldr	r0, [r1, #0]
 80027e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80027e6:	6881      	ldr	r1, [r0, #8]
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	f001 fcb9 	bl	8004160 <_vfiprintf_r>
 80027ee:	b003      	add	sp, #12
 80027f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027f4:	b004      	add	sp, #16
 80027f6:	4770      	bx	lr
 80027f8:	2000000c 	.word	0x2000000c

080027fc <_puts_r>:
 80027fc:	6a03      	ldr	r3, [r0, #32]
 80027fe:	b570      	push	{r4, r5, r6, lr}
 8002800:	6884      	ldr	r4, [r0, #8]
 8002802:	4605      	mov	r5, r0
 8002804:	460e      	mov	r6, r1
 8002806:	b90b      	cbnz	r3, 800280c <_puts_r+0x10>
 8002808:	f7ff ffb0 	bl	800276c <__sinit>
 800280c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800280e:	07db      	lsls	r3, r3, #31
 8002810:	d405      	bmi.n	800281e <_puts_r+0x22>
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	0598      	lsls	r0, r3, #22
 8002816:	d402      	bmi.n	800281e <_puts_r+0x22>
 8002818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800281a:	f000 f9a2 	bl	8002b62 <__retarget_lock_acquire_recursive>
 800281e:	89a3      	ldrh	r3, [r4, #12]
 8002820:	0719      	lsls	r1, r3, #28
 8002822:	d502      	bpl.n	800282a <_puts_r+0x2e>
 8002824:	6923      	ldr	r3, [r4, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d135      	bne.n	8002896 <_puts_r+0x9a>
 800282a:	4621      	mov	r1, r4
 800282c:	4628      	mov	r0, r5
 800282e:	f000 f8c5 	bl	80029bc <__swsetup_r>
 8002832:	b380      	cbz	r0, 8002896 <_puts_r+0x9a>
 8002834:	f04f 35ff 	mov.w	r5, #4294967295
 8002838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800283a:	07da      	lsls	r2, r3, #31
 800283c:	d405      	bmi.n	800284a <_puts_r+0x4e>
 800283e:	89a3      	ldrh	r3, [r4, #12]
 8002840:	059b      	lsls	r3, r3, #22
 8002842:	d402      	bmi.n	800284a <_puts_r+0x4e>
 8002844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002846:	f000 f98d 	bl	8002b64 <__retarget_lock_release_recursive>
 800284a:	4628      	mov	r0, r5
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	2b00      	cmp	r3, #0
 8002850:	da04      	bge.n	800285c <_puts_r+0x60>
 8002852:	69a2      	ldr	r2, [r4, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	dc17      	bgt.n	8002888 <_puts_r+0x8c>
 8002858:	290a      	cmp	r1, #10
 800285a:	d015      	beq.n	8002888 <_puts_r+0x8c>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	6022      	str	r2, [r4, #0]
 8002862:	7019      	strb	r1, [r3, #0]
 8002864:	68a3      	ldr	r3, [r4, #8]
 8002866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800286a:	3b01      	subs	r3, #1
 800286c:	60a3      	str	r3, [r4, #8]
 800286e:	2900      	cmp	r1, #0
 8002870:	d1ed      	bne.n	800284e <_puts_r+0x52>
 8002872:	2b00      	cmp	r3, #0
 8002874:	da11      	bge.n	800289a <_puts_r+0x9e>
 8002876:	4622      	mov	r2, r4
 8002878:	210a      	movs	r1, #10
 800287a:	4628      	mov	r0, r5
 800287c:	f000 f85f 	bl	800293e <__swbuf_r>
 8002880:	3001      	adds	r0, #1
 8002882:	d0d7      	beq.n	8002834 <_puts_r+0x38>
 8002884:	250a      	movs	r5, #10
 8002886:	e7d7      	b.n	8002838 <_puts_r+0x3c>
 8002888:	4622      	mov	r2, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f000 f857 	bl	800293e <__swbuf_r>
 8002890:	3001      	adds	r0, #1
 8002892:	d1e7      	bne.n	8002864 <_puts_r+0x68>
 8002894:	e7ce      	b.n	8002834 <_puts_r+0x38>
 8002896:	3e01      	subs	r6, #1
 8002898:	e7e4      	b.n	8002864 <_puts_r+0x68>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	6022      	str	r2, [r4, #0]
 80028a0:	220a      	movs	r2, #10
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e7ee      	b.n	8002884 <_puts_r+0x88>
	...

080028a8 <puts>:
 80028a8:	4b02      	ldr	r3, [pc, #8]	@ (80028b4 <puts+0xc>)
 80028aa:	4601      	mov	r1, r0
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f7ff bfa5 	b.w	80027fc <_puts_r>
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <__sread>:
 80028b8:	b510      	push	{r4, lr}
 80028ba:	460c      	mov	r4, r1
 80028bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c0:	f000 f900 	bl	8002ac4 <_read_r>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	bfab      	itete	ge
 80028c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80028ca:	89a3      	ldrhlt	r3, [r4, #12]
 80028cc:	181b      	addge	r3, r3, r0
 80028ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80028d2:	bfac      	ite	ge
 80028d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80028d6:	81a3      	strhlt	r3, [r4, #12]
 80028d8:	bd10      	pop	{r4, pc}

080028da <__swrite>:
 80028da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028de:	461f      	mov	r7, r3
 80028e0:	898b      	ldrh	r3, [r1, #12]
 80028e2:	05db      	lsls	r3, r3, #23
 80028e4:	4605      	mov	r5, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	4616      	mov	r6, r2
 80028ea:	d505      	bpl.n	80028f8 <__swrite+0x1e>
 80028ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f0:	2302      	movs	r3, #2
 80028f2:	2200      	movs	r2, #0
 80028f4:	f000 f8d4 	bl	8002aa0 <_lseek_r>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	4632      	mov	r2, r6
 8002906:	463b      	mov	r3, r7
 8002908:	4628      	mov	r0, r5
 800290a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800290e:	f000 b8eb 	b.w	8002ae8 <_write_r>

08002912 <__sseek>:
 8002912:	b510      	push	{r4, lr}
 8002914:	460c      	mov	r4, r1
 8002916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291a:	f000 f8c1 	bl	8002aa0 <_lseek_r>
 800291e:	1c43      	adds	r3, r0, #1
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	bf15      	itete	ne
 8002924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800292a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800292e:	81a3      	strheq	r3, [r4, #12]
 8002930:	bf18      	it	ne
 8002932:	81a3      	strhne	r3, [r4, #12]
 8002934:	bd10      	pop	{r4, pc}

08002936 <__sclose>:
 8002936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800293a:	f000 b8a1 	b.w	8002a80 <_close_r>

0800293e <__swbuf_r>:
 800293e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002940:	460e      	mov	r6, r1
 8002942:	4614      	mov	r4, r2
 8002944:	4605      	mov	r5, r0
 8002946:	b118      	cbz	r0, 8002950 <__swbuf_r+0x12>
 8002948:	6a03      	ldr	r3, [r0, #32]
 800294a:	b90b      	cbnz	r3, 8002950 <__swbuf_r+0x12>
 800294c:	f7ff ff0e 	bl	800276c <__sinit>
 8002950:	69a3      	ldr	r3, [r4, #24]
 8002952:	60a3      	str	r3, [r4, #8]
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	071a      	lsls	r2, r3, #28
 8002958:	d501      	bpl.n	800295e <__swbuf_r+0x20>
 800295a:	6923      	ldr	r3, [r4, #16]
 800295c:	b943      	cbnz	r3, 8002970 <__swbuf_r+0x32>
 800295e:	4621      	mov	r1, r4
 8002960:	4628      	mov	r0, r5
 8002962:	f000 f82b 	bl	80029bc <__swsetup_r>
 8002966:	b118      	cbz	r0, 8002970 <__swbuf_r+0x32>
 8002968:	f04f 37ff 	mov.w	r7, #4294967295
 800296c:	4638      	mov	r0, r7
 800296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	6922      	ldr	r2, [r4, #16]
 8002974:	1a98      	subs	r0, r3, r2
 8002976:	6963      	ldr	r3, [r4, #20]
 8002978:	b2f6      	uxtb	r6, r6
 800297a:	4283      	cmp	r3, r0
 800297c:	4637      	mov	r7, r6
 800297e:	dc05      	bgt.n	800298c <__swbuf_r+0x4e>
 8002980:	4621      	mov	r1, r4
 8002982:	4628      	mov	r0, r5
 8002984:	f001 fd88 	bl	8004498 <_fflush_r>
 8002988:	2800      	cmp	r0, #0
 800298a:	d1ed      	bne.n	8002968 <__swbuf_r+0x2a>
 800298c:	68a3      	ldr	r3, [r4, #8]
 800298e:	3b01      	subs	r3, #1
 8002990:	60a3      	str	r3, [r4, #8]
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	6022      	str	r2, [r4, #0]
 8002998:	701e      	strb	r6, [r3, #0]
 800299a:	6962      	ldr	r2, [r4, #20]
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	429a      	cmp	r2, r3
 80029a0:	d004      	beq.n	80029ac <__swbuf_r+0x6e>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	07db      	lsls	r3, r3, #31
 80029a6:	d5e1      	bpl.n	800296c <__swbuf_r+0x2e>
 80029a8:	2e0a      	cmp	r6, #10
 80029aa:	d1df      	bne.n	800296c <__swbuf_r+0x2e>
 80029ac:	4621      	mov	r1, r4
 80029ae:	4628      	mov	r0, r5
 80029b0:	f001 fd72 	bl	8004498 <_fflush_r>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0d9      	beq.n	800296c <__swbuf_r+0x2e>
 80029b8:	e7d6      	b.n	8002968 <__swbuf_r+0x2a>
	...

080029bc <__swsetup_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <__swsetup_r+0xa8>)
 80029c0:	4605      	mov	r5, r0
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	460c      	mov	r4, r1
 80029c6:	b118      	cbz	r0, 80029d0 <__swsetup_r+0x14>
 80029c8:	6a03      	ldr	r3, [r0, #32]
 80029ca:	b90b      	cbnz	r3, 80029d0 <__swsetup_r+0x14>
 80029cc:	f7ff fece 	bl	800276c <__sinit>
 80029d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029d4:	0719      	lsls	r1, r3, #28
 80029d6:	d422      	bmi.n	8002a1e <__swsetup_r+0x62>
 80029d8:	06da      	lsls	r2, r3, #27
 80029da:	d407      	bmi.n	80029ec <__swsetup_r+0x30>
 80029dc:	2209      	movs	r2, #9
 80029de:	602a      	str	r2, [r5, #0]
 80029e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029e4:	81a3      	strh	r3, [r4, #12]
 80029e6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ea:	e033      	b.n	8002a54 <__swsetup_r+0x98>
 80029ec:	0758      	lsls	r0, r3, #29
 80029ee:	d512      	bpl.n	8002a16 <__swsetup_r+0x5a>
 80029f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029f2:	b141      	cbz	r1, 8002a06 <__swsetup_r+0x4a>
 80029f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029f8:	4299      	cmp	r1, r3
 80029fa:	d002      	beq.n	8002a02 <__swsetup_r+0x46>
 80029fc:	4628      	mov	r0, r5
 80029fe:	f000 ff0b 	bl	8003818 <_free_r>
 8002a02:	2300      	movs	r3, #0
 8002a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a06:	89a3      	ldrh	r3, [r4, #12]
 8002a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002a0c:	81a3      	strh	r3, [r4, #12]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	6063      	str	r3, [r4, #4]
 8002a12:	6923      	ldr	r3, [r4, #16]
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	89a3      	ldrh	r3, [r4, #12]
 8002a18:	f043 0308 	orr.w	r3, r3, #8
 8002a1c:	81a3      	strh	r3, [r4, #12]
 8002a1e:	6923      	ldr	r3, [r4, #16]
 8002a20:	b94b      	cbnz	r3, 8002a36 <__swsetup_r+0x7a>
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a2c:	d003      	beq.n	8002a36 <__swsetup_r+0x7a>
 8002a2e:	4621      	mov	r1, r4
 8002a30:	4628      	mov	r0, r5
 8002a32:	f001 fd7f 	bl	8004534 <__smakebuf_r>
 8002a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a3a:	f013 0201 	ands.w	r2, r3, #1
 8002a3e:	d00a      	beq.n	8002a56 <__swsetup_r+0x9a>
 8002a40:	2200      	movs	r2, #0
 8002a42:	60a2      	str	r2, [r4, #8]
 8002a44:	6962      	ldr	r2, [r4, #20]
 8002a46:	4252      	negs	r2, r2
 8002a48:	61a2      	str	r2, [r4, #24]
 8002a4a:	6922      	ldr	r2, [r4, #16]
 8002a4c:	b942      	cbnz	r2, 8002a60 <__swsetup_r+0xa4>
 8002a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002a52:	d1c5      	bne.n	80029e0 <__swsetup_r+0x24>
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 8002a56:	0799      	lsls	r1, r3, #30
 8002a58:	bf58      	it	pl
 8002a5a:	6962      	ldrpl	r2, [r4, #20]
 8002a5c:	60a2      	str	r2, [r4, #8]
 8002a5e:	e7f4      	b.n	8002a4a <__swsetup_r+0x8e>
 8002a60:	2000      	movs	r0, #0
 8002a62:	e7f7      	b.n	8002a54 <__swsetup_r+0x98>
 8002a64:	2000000c 	.word	0x2000000c

08002a68 <memset>:
 8002a68:	4402      	add	r2, r0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <_localeconv_r>:
 8002a78:	4800      	ldr	r0, [pc, #0]	@ (8002a7c <_localeconv_r+0x4>)
 8002a7a:	4770      	bx	lr
 8002a7c:	2000014c 	.word	0x2000014c

08002a80 <_close_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4d06      	ldr	r5, [pc, #24]	@ (8002a9c <_close_r+0x1c>)
 8002a84:	2300      	movs	r3, #0
 8002a86:	4604      	mov	r4, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	f7ff f8fa 	bl	8001c84 <_close>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_close_r+0x1a>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_close_r+0x1a>
 8002a98:	6023      	str	r3, [r4, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000370 	.word	0x20000370

08002aa0 <_lseek_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4d07      	ldr	r5, [pc, #28]	@ (8002ac0 <_lseek_r+0x20>)
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	4608      	mov	r0, r1
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	2200      	movs	r2, #0
 8002aac:	602a      	str	r2, [r5, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f7ff f90f 	bl	8001cd2 <_lseek>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	d102      	bne.n	8002abe <_lseek_r+0x1e>
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	b103      	cbz	r3, 8002abe <_lseek_r+0x1e>
 8002abc:	6023      	str	r3, [r4, #0]
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	20000370 	.word	0x20000370

08002ac4 <_read_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4d07      	ldr	r5, [pc, #28]	@ (8002ae4 <_read_r+0x20>)
 8002ac8:	4604      	mov	r4, r0
 8002aca:	4608      	mov	r0, r1
 8002acc:	4611      	mov	r1, r2
 8002ace:	2200      	movs	r2, #0
 8002ad0:	602a      	str	r2, [r5, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f7ff f89d 	bl	8001c12 <_read>
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	d102      	bne.n	8002ae2 <_read_r+0x1e>
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	b103      	cbz	r3, 8002ae2 <_read_r+0x1e>
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	20000370 	.word	0x20000370

08002ae8 <_write_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4d07      	ldr	r5, [pc, #28]	@ (8002b08 <_write_r+0x20>)
 8002aec:	4604      	mov	r4, r0
 8002aee:	4608      	mov	r0, r1
 8002af0:	4611      	mov	r1, r2
 8002af2:	2200      	movs	r2, #0
 8002af4:	602a      	str	r2, [r5, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7ff f8a8 	bl	8001c4c <_write>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_write_r+0x1e>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_write_r+0x1e>
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	20000370 	.word	0x20000370

08002b0c <__errno>:
 8002b0c:	4b01      	ldr	r3, [pc, #4]	@ (8002b14 <__errno+0x8>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000000c 	.word	0x2000000c

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b50 <__libc_init_array+0x38>)
 8002b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b54 <__libc_init_array+0x3c>)
 8002b1e:	1b64      	subs	r4, r4, r5
 8002b20:	10a4      	asrs	r4, r4, #2
 8002b22:	2600      	movs	r6, #0
 8002b24:	42a6      	cmp	r6, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	4d0b      	ldr	r5, [pc, #44]	@ (8002b58 <__libc_init_array+0x40>)
 8002b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002b5c <__libc_init_array+0x44>)
 8002b2c:	f001 ff50 	bl	80049d0 <_init>
 8002b30:	1b64      	subs	r4, r4, r5
 8002b32:	10a4      	asrs	r4, r4, #2
 8002b34:	2600      	movs	r6, #0
 8002b36:	42a6      	cmp	r6, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b40:	4798      	blx	r3
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4a:	4798      	blx	r3
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	08004de4 	.word	0x08004de4
 8002b54:	08004de4 	.word	0x08004de4
 8002b58:	08004de4 	.word	0x08004de4
 8002b5c:	08004de8 	.word	0x08004de8

08002b60 <__retarget_lock_init_recursive>:
 8002b60:	4770      	bx	lr

08002b62 <__retarget_lock_acquire_recursive>:
 8002b62:	4770      	bx	lr

08002b64 <__retarget_lock_release_recursive>:
 8002b64:	4770      	bx	lr

08002b66 <quorem>:
 8002b66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	6903      	ldr	r3, [r0, #16]
 8002b6c:	690c      	ldr	r4, [r1, #16]
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	4607      	mov	r7, r0
 8002b72:	db7e      	blt.n	8002c72 <quorem+0x10c>
 8002b74:	3c01      	subs	r4, #1
 8002b76:	f101 0814 	add.w	r8, r1, #20
 8002b7a:	00a3      	lsls	r3, r4, #2
 8002b7c:	f100 0514 	add.w	r5, r0, #20
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b90:	3301      	adds	r3, #1
 8002b92:	429a      	cmp	r2, r3
 8002b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b9c:	d32e      	bcc.n	8002bfc <quorem+0x96>
 8002b9e:	f04f 0a00 	mov.w	sl, #0
 8002ba2:	46c4      	mov	ip, r8
 8002ba4:	46ae      	mov	lr, r5
 8002ba6:	46d3      	mov	fp, sl
 8002ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002bac:	b298      	uxth	r0, r3
 8002bae:	fb06 a000 	mla	r0, r6, r0, sl
 8002bb2:	0c02      	lsrs	r2, r0, #16
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	fb06 2303 	mla	r3, r6, r3, r2
 8002bba:	f8de 2000 	ldr.w	r2, [lr]
 8002bbe:	b280      	uxth	r0, r0
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	1a12      	subs	r2, r2, r0
 8002bc4:	445a      	add	r2, fp
 8002bc6:	f8de 0000 	ldr.w	r0, [lr]
 8002bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002bd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002bde:	45e1      	cmp	r9, ip
 8002be0:	f84e 2b04 	str.w	r2, [lr], #4
 8002be4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002be8:	d2de      	bcs.n	8002ba8 <quorem+0x42>
 8002bea:	9b00      	ldr	r3, [sp, #0]
 8002bec:	58eb      	ldr	r3, [r5, r3]
 8002bee:	b92b      	cbnz	r3, 8002bfc <quorem+0x96>
 8002bf0:	9b01      	ldr	r3, [sp, #4]
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	429d      	cmp	r5, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	d32f      	bcc.n	8002c5a <quorem+0xf4>
 8002bfa:	613c      	str	r4, [r7, #16]
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	f001 f97d 	bl	8003efc <__mcmp>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	db25      	blt.n	8002c52 <quorem+0xec>
 8002c06:	4629      	mov	r1, r5
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8002c0e:	f8d1 c000 	ldr.w	ip, [r1]
 8002c12:	fa1f fe82 	uxth.w	lr, r2
 8002c16:	fa1f f38c 	uxth.w	r3, ip
 8002c1a:	eba3 030e 	sub.w	r3, r3, lr
 8002c1e:	4403      	add	r3, r0
 8002c20:	0c12      	lsrs	r2, r2, #16
 8002c22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002c26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c30:	45c1      	cmp	r9, r8
 8002c32:	f841 3b04 	str.w	r3, [r1], #4
 8002c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002c3a:	d2e6      	bcs.n	8002c0a <quorem+0xa4>
 8002c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c44:	b922      	cbnz	r2, 8002c50 <quorem+0xea>
 8002c46:	3b04      	subs	r3, #4
 8002c48:	429d      	cmp	r5, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	d30b      	bcc.n	8002c66 <quorem+0x100>
 8002c4e:	613c      	str	r4, [r7, #16]
 8002c50:	3601      	adds	r6, #1
 8002c52:	4630      	mov	r0, r6
 8002c54:	b003      	add	sp, #12
 8002c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	3b04      	subs	r3, #4
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d1cb      	bne.n	8002bfa <quorem+0x94>
 8002c62:	3c01      	subs	r4, #1
 8002c64:	e7c6      	b.n	8002bf4 <quorem+0x8e>
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	3b04      	subs	r3, #4
 8002c6a:	2a00      	cmp	r2, #0
 8002c6c:	d1ef      	bne.n	8002c4e <quorem+0xe8>
 8002c6e:	3c01      	subs	r4, #1
 8002c70:	e7ea      	b.n	8002c48 <quorem+0xe2>
 8002c72:	2000      	movs	r0, #0
 8002c74:	e7ee      	b.n	8002c54 <quorem+0xee>
	...

08002c78 <_dtoa_r>:
 8002c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7c:	69c7      	ldr	r7, [r0, #28]
 8002c7e:	b097      	sub	sp, #92	@ 0x5c
 8002c80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8002c84:	ec55 4b10 	vmov	r4, r5, d0
 8002c88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8002c8a:	9107      	str	r1, [sp, #28]
 8002c8c:	4681      	mov	r9, r0
 8002c8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8002c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8002c92:	b97f      	cbnz	r7, 8002cb4 <_dtoa_r+0x3c>
 8002c94:	2010      	movs	r0, #16
 8002c96:	f000 fe09 	bl	80038ac <malloc>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8002ca0:	b920      	cbnz	r0, 8002cac <_dtoa_r+0x34>
 8002ca2:	4ba9      	ldr	r3, [pc, #676]	@ (8002f48 <_dtoa_r+0x2d0>)
 8002ca4:	21ef      	movs	r1, #239	@ 0xef
 8002ca6:	48a9      	ldr	r0, [pc, #676]	@ (8002f4c <_dtoa_r+0x2d4>)
 8002ca8:	f001 fcc0 	bl	800462c <__assert_func>
 8002cac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002cb0:	6007      	str	r7, [r0, #0]
 8002cb2:	60c7      	str	r7, [r0, #12]
 8002cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	b159      	cbz	r1, 8002cd4 <_dtoa_r+0x5c>
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	604a      	str	r2, [r1, #4]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4093      	lsls	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
 8002cc6:	4648      	mov	r0, r9
 8002cc8:	f000 fee6 	bl	8003a98 <_Bfree>
 8002ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	1e2b      	subs	r3, r5, #0
 8002cd6:	bfb9      	ittee	lt
 8002cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002cdc:	9305      	strlt	r3, [sp, #20]
 8002cde:	2300      	movge	r3, #0
 8002ce0:	6033      	strge	r3, [r6, #0]
 8002ce2:	9f05      	ldr	r7, [sp, #20]
 8002ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f50 <_dtoa_r+0x2d8>)
 8002ce6:	bfbc      	itt	lt
 8002ce8:	2201      	movlt	r2, #1
 8002cea:	6032      	strlt	r2, [r6, #0]
 8002cec:	43bb      	bics	r3, r7
 8002cee:	d112      	bne.n	8002d16 <_dtoa_r+0x9e>
 8002cf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002cf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002cfc:	4323      	orrs	r3, r4
 8002cfe:	f000 855a 	beq.w	80037b6 <_dtoa_r+0xb3e>
 8002d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002d04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8002f64 <_dtoa_r+0x2ec>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 855c 	beq.w	80037c6 <_dtoa_r+0xb4e>
 8002d0e:	f10a 0303 	add.w	r3, sl, #3
 8002d12:	f000 bd56 	b.w	80037c2 <_dtoa_r+0xb4a>
 8002d16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	ec51 0b17 	vmov	r0, r1, d7
 8002d20:	2300      	movs	r3, #0
 8002d22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002d26:	f7fd fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	b158      	cbz	r0, 8002d46 <_dtoa_r+0xce>
 8002d2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002d30:	2301      	movs	r3, #1
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002d36:	b113      	cbz	r3, 8002d3e <_dtoa_r+0xc6>
 8002d38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002d3a:	4b86      	ldr	r3, [pc, #536]	@ (8002f54 <_dtoa_r+0x2dc>)
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8002f68 <_dtoa_r+0x2f0>
 8002d42:	f000 bd40 	b.w	80037c6 <_dtoa_r+0xb4e>
 8002d46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8002d4a:	aa14      	add	r2, sp, #80	@ 0x50
 8002d4c:	a915      	add	r1, sp, #84	@ 0x54
 8002d4e:	4648      	mov	r0, r9
 8002d50:	f001 f984 	bl	800405c <__d2b>
 8002d54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002d58:	9002      	str	r0, [sp, #8]
 8002d5a:	2e00      	cmp	r6, #0
 8002d5c:	d078      	beq.n	8002e50 <_dtoa_r+0x1d8>
 8002d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002d60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8002d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002d6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002d70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002d74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002d78:	4619      	mov	r1, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4b76      	ldr	r3, [pc, #472]	@ (8002f58 <_dtoa_r+0x2e0>)
 8002d7e:	f7fd fa83 	bl	8000288 <__aeabi_dsub>
 8002d82:	a36b      	add	r3, pc, #428	@ (adr r3, 8002f30 <_dtoa_r+0x2b8>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f7fd fc36 	bl	80005f8 <__aeabi_dmul>
 8002d8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8002f38 <_dtoa_r+0x2c0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fa7b 	bl	800028c <__adddf3>
 8002d96:	4604      	mov	r4, r0
 8002d98:	4630      	mov	r0, r6
 8002d9a:	460d      	mov	r5, r1
 8002d9c:	f7fd fbc2 	bl	8000524 <__aeabi_i2d>
 8002da0:	a367      	add	r3, pc, #412	@ (adr r3, 8002f40 <_dtoa_r+0x2c8>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fc27 	bl	80005f8 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fa6b 	bl	800028c <__adddf3>
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
 8002dba:	f7fd fecd 	bl	8000b58 <__aeabi_d2iz>
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4607      	mov	r7, r0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fe88 	bl	8000adc <__aeabi_dcmplt>
 8002dcc:	b140      	cbz	r0, 8002de0 <_dtoa_r+0x168>
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f7fd fba8 	bl	8000524 <__aeabi_i2d>
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	f7fd fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ddc:	b900      	cbnz	r0, 8002de0 <_dtoa_r+0x168>
 8002dde:	3f01      	subs	r7, #1
 8002de0:	2f16      	cmp	r7, #22
 8002de2:	d852      	bhi.n	8002e8a <_dtoa_r+0x212>
 8002de4:	4b5d      	ldr	r3, [pc, #372]	@ (8002f5c <_dtoa_r+0x2e4>)
 8002de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002df2:	f7fd fe73 	bl	8000adc <__aeabi_dcmplt>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d049      	beq.n	8002e8e <_dtoa_r+0x216>
 8002dfa:	3f01      	subs	r7, #1
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8002e00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002e02:	1b9b      	subs	r3, r3, r6
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	bf45      	ittet	mi
 8002e08:	f1c3 0301 	rsbmi	r3, r3, #1
 8002e0c:	9300      	strmi	r3, [sp, #0]
 8002e0e:	2300      	movpl	r3, #0
 8002e10:	2300      	movmi	r3, #0
 8002e12:	9206      	str	r2, [sp, #24]
 8002e14:	bf54      	ite	pl
 8002e16:	9300      	strpl	r3, [sp, #0]
 8002e18:	9306      	strmi	r3, [sp, #24]
 8002e1a:	2f00      	cmp	r7, #0
 8002e1c:	db39      	blt.n	8002e92 <_dtoa_r+0x21a>
 8002e1e:	9b06      	ldr	r3, [sp, #24]
 8002e20:	970d      	str	r7, [sp, #52]	@ 0x34
 8002e22:	443b      	add	r3, r7
 8002e24:	9306      	str	r3, [sp, #24]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9308      	str	r3, [sp, #32]
 8002e2a:	9b07      	ldr	r3, [sp, #28]
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d863      	bhi.n	8002ef8 <_dtoa_r+0x280>
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	bfc4      	itt	gt
 8002e34:	3b04      	subgt	r3, #4
 8002e36:	9307      	strgt	r3, [sp, #28]
 8002e38:	9b07      	ldr	r3, [sp, #28]
 8002e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8002e3e:	bfcc      	ite	gt
 8002e40:	2400      	movgt	r4, #0
 8002e42:	2401      	movle	r4, #1
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d863      	bhi.n	8002f10 <_dtoa_r+0x298>
 8002e48:	e8df f003 	tbb	[pc, r3]
 8002e4c:	2b375452 	.word	0x2b375452
 8002e50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8002e54:	441e      	add	r6, r3
 8002e56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	bfc1      	itttt	gt
 8002e5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002e62:	409f      	lslgt	r7, r3
 8002e64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002e68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002e6c:	bfd6      	itet	le
 8002e6e:	f1c3 0320 	rsble	r3, r3, #32
 8002e72:	ea47 0003 	orrgt.w	r0, r7, r3
 8002e76:	fa04 f003 	lslle.w	r0, r4, r3
 8002e7a:	f7fd fb43 	bl	8000504 <__aeabi_ui2d>
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002e84:	3e01      	subs	r6, #1
 8002e86:	9212      	str	r2, [sp, #72]	@ 0x48
 8002e88:	e776      	b.n	8002d78 <_dtoa_r+0x100>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e7b7      	b.n	8002dfe <_dtoa_r+0x186>
 8002e8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8002e90:	e7b6      	b.n	8002e00 <_dtoa_r+0x188>
 8002e92:	9b00      	ldr	r3, [sp, #0]
 8002e94:	1bdb      	subs	r3, r3, r7
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	427b      	negs	r3, r7
 8002e9a:	9308      	str	r3, [sp, #32]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002ea0:	e7c3      	b.n	8002e2a <_dtoa_r+0x1b2>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002ea8:	eb07 0b03 	add.w	fp, r7, r3
 8002eac:	f10b 0301 	add.w	r3, fp, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	9303      	str	r3, [sp, #12]
 8002eb4:	bfb8      	it	lt
 8002eb6:	2301      	movlt	r3, #1
 8002eb8:	e006      	b.n	8002ec8 <_dtoa_r+0x250>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dd28      	ble.n	8002f16 <_dtoa_r+0x29e>
 8002ec4:	469b      	mov	fp, r3
 8002ec6:	9303      	str	r3, [sp, #12]
 8002ec8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2204      	movs	r2, #4
 8002ed0:	f102 0514 	add.w	r5, r2, #20
 8002ed4:	429d      	cmp	r5, r3
 8002ed6:	d926      	bls.n	8002f26 <_dtoa_r+0x2ae>
 8002ed8:	6041      	str	r1, [r0, #4]
 8002eda:	4648      	mov	r0, r9
 8002edc:	f000 fd9c 	bl	8003a18 <_Balloc>
 8002ee0:	4682      	mov	sl, r0
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d142      	bne.n	8002f6c <_dtoa_r+0x2f4>
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <_dtoa_r+0x2e8>)
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f240 11af 	movw	r1, #431	@ 0x1af
 8002eee:	e6da      	b.n	8002ca6 <_dtoa_r+0x2e>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e7e3      	b.n	8002ebc <_dtoa_r+0x244>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e7d5      	b.n	8002ea4 <_dtoa_r+0x22c>
 8002ef8:	2401      	movs	r4, #1
 8002efa:	2300      	movs	r3, #0
 8002efc:	9307      	str	r3, [sp, #28]
 8002efe:	9409      	str	r4, [sp, #36]	@ 0x24
 8002f00:	f04f 3bff 	mov.w	fp, #4294967295
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8cd b00c 	str.w	fp, [sp, #12]
 8002f0a:	2312      	movs	r3, #18
 8002f0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8002f0e:	e7db      	b.n	8002ec8 <_dtoa_r+0x250>
 8002f10:	2301      	movs	r3, #1
 8002f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f14:	e7f4      	b.n	8002f00 <_dtoa_r+0x288>
 8002f16:	f04f 0b01 	mov.w	fp, #1
 8002f1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8002f1e:	465b      	mov	r3, fp
 8002f20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8002f24:	e7d0      	b.n	8002ec8 <_dtoa_r+0x250>
 8002f26:	3101      	adds	r1, #1
 8002f28:	0052      	lsls	r2, r2, #1
 8002f2a:	e7d1      	b.n	8002ed0 <_dtoa_r+0x258>
 8002f2c:	f3af 8000 	nop.w
 8002f30:	636f4361 	.word	0x636f4361
 8002f34:	3fd287a7 	.word	0x3fd287a7
 8002f38:	8b60c8b3 	.word	0x8b60c8b3
 8002f3c:	3fc68a28 	.word	0x3fc68a28
 8002f40:	509f79fb 	.word	0x509f79fb
 8002f44:	3fd34413 	.word	0x3fd34413
 8002f48:	08004aac 	.word	0x08004aac
 8002f4c:	08004ac3 	.word	0x08004ac3
 8002f50:	7ff00000 	.word	0x7ff00000
 8002f54:	08004a7c 	.word	0x08004a7c
 8002f58:	3ff80000 	.word	0x3ff80000
 8002f5c:	08004c10 	.word	0x08004c10
 8002f60:	08004b1b 	.word	0x08004b1b
 8002f64:	08004aa8 	.word	0x08004aa8
 8002f68:	08004a7b 	.word	0x08004a7b
 8002f6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002f70:	6018      	str	r0, [r3, #0]
 8002f72:	9b03      	ldr	r3, [sp, #12]
 8002f74:	2b0e      	cmp	r3, #14
 8002f76:	f200 80a1 	bhi.w	80030bc <_dtoa_r+0x444>
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	f000 809e 	beq.w	80030bc <_dtoa_r+0x444>
 8002f80:	2f00      	cmp	r7, #0
 8002f82:	dd33      	ble.n	8002fec <_dtoa_r+0x374>
 8002f84:	4b9c      	ldr	r3, [pc, #624]	@ (80031f8 <_dtoa_r+0x580>)
 8002f86:	f007 020f 	and.w	r2, r7, #15
 8002f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f8e:	ed93 7b00 	vldr	d7, [r3]
 8002f92:	05f8      	lsls	r0, r7, #23
 8002f94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002f9c:	d516      	bpl.n	8002fcc <_dtoa_r+0x354>
 8002f9e:	4b97      	ldr	r3, [pc, #604]	@ (80031fc <_dtoa_r+0x584>)
 8002fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002fa8:	f7fd fc50 	bl	800084c <__aeabi_ddiv>
 8002fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fb0:	f004 040f 	and.w	r4, r4, #15
 8002fb4:	2603      	movs	r6, #3
 8002fb6:	4d91      	ldr	r5, [pc, #580]	@ (80031fc <_dtoa_r+0x584>)
 8002fb8:	b954      	cbnz	r4, 8002fd0 <_dtoa_r+0x358>
 8002fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8002fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fc2:	f7fd fc43 	bl	800084c <__aeabi_ddiv>
 8002fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fca:	e028      	b.n	800301e <_dtoa_r+0x3a6>
 8002fcc:	2602      	movs	r6, #2
 8002fce:	e7f2      	b.n	8002fb6 <_dtoa_r+0x33e>
 8002fd0:	07e1      	lsls	r1, r4, #31
 8002fd2:	d508      	bpl.n	8002fe6 <_dtoa_r+0x36e>
 8002fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8002fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002fdc:	f7fd fb0c 	bl	80005f8 <__aeabi_dmul>
 8002fe0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	1064      	asrs	r4, r4, #1
 8002fe8:	3508      	adds	r5, #8
 8002fea:	e7e5      	b.n	8002fb8 <_dtoa_r+0x340>
 8002fec:	f000 80af 	beq.w	800314e <_dtoa_r+0x4d6>
 8002ff0:	427c      	negs	r4, r7
 8002ff2:	4b81      	ldr	r3, [pc, #516]	@ (80031f8 <_dtoa_r+0x580>)
 8002ff4:	4d81      	ldr	r5, [pc, #516]	@ (80031fc <_dtoa_r+0x584>)
 8002ff6:	f004 020f 	and.w	r2, r4, #15
 8002ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003006:	f7fd faf7 	bl	80005f8 <__aeabi_dmul>
 800300a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800300e:	1124      	asrs	r4, r4, #4
 8003010:	2300      	movs	r3, #0
 8003012:	2602      	movs	r6, #2
 8003014:	2c00      	cmp	r4, #0
 8003016:	f040 808f 	bne.w	8003138 <_dtoa_r+0x4c0>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1d3      	bne.n	8002fc6 <_dtoa_r+0x34e>
 800301e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003020:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8094 	beq.w	8003152 <_dtoa_r+0x4da>
 800302a:	4b75      	ldr	r3, [pc, #468]	@ (8003200 <_dtoa_r+0x588>)
 800302c:	2200      	movs	r2, #0
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd fd53 	bl	8000adc <__aeabi_dcmplt>
 8003036:	2800      	cmp	r0, #0
 8003038:	f000 808b 	beq.w	8003152 <_dtoa_r+0x4da>
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8087 	beq.w	8003152 <_dtoa_r+0x4da>
 8003044:	f1bb 0f00 	cmp.w	fp, #0
 8003048:	dd34      	ble.n	80030b4 <_dtoa_r+0x43c>
 800304a:	4620      	mov	r0, r4
 800304c:	4b6d      	ldr	r3, [pc, #436]	@ (8003204 <_dtoa_r+0x58c>)
 800304e:	2200      	movs	r2, #0
 8003050:	4629      	mov	r1, r5
 8003052:	f7fd fad1 	bl	80005f8 <__aeabi_dmul>
 8003056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800305a:	f107 38ff 	add.w	r8, r7, #4294967295
 800305e:	3601      	adds	r6, #1
 8003060:	465c      	mov	r4, fp
 8003062:	4630      	mov	r0, r6
 8003064:	f7fd fa5e 	bl	8000524 <__aeabi_i2d>
 8003068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800306c:	f7fd fac4 	bl	80005f8 <__aeabi_dmul>
 8003070:	4b65      	ldr	r3, [pc, #404]	@ (8003208 <_dtoa_r+0x590>)
 8003072:	2200      	movs	r2, #0
 8003074:	f7fd f90a 	bl	800028c <__adddf3>
 8003078:	4605      	mov	r5, r0
 800307a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800307e:	2c00      	cmp	r4, #0
 8003080:	d16a      	bne.n	8003158 <_dtoa_r+0x4e0>
 8003082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003086:	4b61      	ldr	r3, [pc, #388]	@ (800320c <_dtoa_r+0x594>)
 8003088:	2200      	movs	r2, #0
 800308a:	f7fd f8fd 	bl	8000288 <__aeabi_dsub>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003096:	462a      	mov	r2, r5
 8003098:	4633      	mov	r3, r6
 800309a:	f7fd fd3d 	bl	8000b18 <__aeabi_dcmpgt>
 800309e:	2800      	cmp	r0, #0
 80030a0:	f040 8298 	bne.w	80035d4 <_dtoa_r+0x95c>
 80030a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030a8:	462a      	mov	r2, r5
 80030aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80030ae:	f7fd fd15 	bl	8000adc <__aeabi_dcmplt>
 80030b2:	bb38      	cbnz	r0, 8003104 <_dtoa_r+0x48c>
 80030b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80030b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80030bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f2c0 8157 	blt.w	8003372 <_dtoa_r+0x6fa>
 80030c4:	2f0e      	cmp	r7, #14
 80030c6:	f300 8154 	bgt.w	8003372 <_dtoa_r+0x6fa>
 80030ca:	4b4b      	ldr	r3, [pc, #300]	@ (80031f8 <_dtoa_r+0x580>)
 80030cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80030d0:	ed93 7b00 	vldr	d7, [r3]
 80030d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	ed8d 7b00 	vstr	d7, [sp]
 80030dc:	f280 80e5 	bge.w	80032aa <_dtoa_r+0x632>
 80030e0:	9b03      	ldr	r3, [sp, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f300 80e1 	bgt.w	80032aa <_dtoa_r+0x632>
 80030e8:	d10c      	bne.n	8003104 <_dtoa_r+0x48c>
 80030ea:	4b48      	ldr	r3, [pc, #288]	@ (800320c <_dtoa_r+0x594>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	ec51 0b17 	vmov	r0, r1, d7
 80030f2:	f7fd fa81 	bl	80005f8 <__aeabi_dmul>
 80030f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030fa:	f7fd fd03 	bl	8000b04 <__aeabi_dcmpge>
 80030fe:	2800      	cmp	r0, #0
 8003100:	f000 8266 	beq.w	80035d0 <_dtoa_r+0x958>
 8003104:	2400      	movs	r4, #0
 8003106:	4625      	mov	r5, r4
 8003108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800310a:	4656      	mov	r6, sl
 800310c:	ea6f 0803 	mvn.w	r8, r3
 8003110:	2700      	movs	r7, #0
 8003112:	4621      	mov	r1, r4
 8003114:	4648      	mov	r0, r9
 8003116:	f000 fcbf 	bl	8003a98 <_Bfree>
 800311a:	2d00      	cmp	r5, #0
 800311c:	f000 80bd 	beq.w	800329a <_dtoa_r+0x622>
 8003120:	b12f      	cbz	r7, 800312e <_dtoa_r+0x4b6>
 8003122:	42af      	cmp	r7, r5
 8003124:	d003      	beq.n	800312e <_dtoa_r+0x4b6>
 8003126:	4639      	mov	r1, r7
 8003128:	4648      	mov	r0, r9
 800312a:	f000 fcb5 	bl	8003a98 <_Bfree>
 800312e:	4629      	mov	r1, r5
 8003130:	4648      	mov	r0, r9
 8003132:	f000 fcb1 	bl	8003a98 <_Bfree>
 8003136:	e0b0      	b.n	800329a <_dtoa_r+0x622>
 8003138:	07e2      	lsls	r2, r4, #31
 800313a:	d505      	bpl.n	8003148 <_dtoa_r+0x4d0>
 800313c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003140:	f7fd fa5a 	bl	80005f8 <__aeabi_dmul>
 8003144:	3601      	adds	r6, #1
 8003146:	2301      	movs	r3, #1
 8003148:	1064      	asrs	r4, r4, #1
 800314a:	3508      	adds	r5, #8
 800314c:	e762      	b.n	8003014 <_dtoa_r+0x39c>
 800314e:	2602      	movs	r6, #2
 8003150:	e765      	b.n	800301e <_dtoa_r+0x3a6>
 8003152:	9c03      	ldr	r4, [sp, #12]
 8003154:	46b8      	mov	r8, r7
 8003156:	e784      	b.n	8003062 <_dtoa_r+0x3ea>
 8003158:	4b27      	ldr	r3, [pc, #156]	@ (80031f8 <_dtoa_r+0x580>)
 800315a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800315c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003160:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003164:	4454      	add	r4, sl
 8003166:	2900      	cmp	r1, #0
 8003168:	d054      	beq.n	8003214 <_dtoa_r+0x59c>
 800316a:	4929      	ldr	r1, [pc, #164]	@ (8003210 <_dtoa_r+0x598>)
 800316c:	2000      	movs	r0, #0
 800316e:	f7fd fb6d 	bl	800084c <__aeabi_ddiv>
 8003172:	4633      	mov	r3, r6
 8003174:	462a      	mov	r2, r5
 8003176:	f7fd f887 	bl	8000288 <__aeabi_dsub>
 800317a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800317e:	4656      	mov	r6, sl
 8003180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003184:	f7fd fce8 	bl	8000b58 <__aeabi_d2iz>
 8003188:	4605      	mov	r5, r0
 800318a:	f7fd f9cb 	bl	8000524 <__aeabi_i2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003196:	f7fd f877 	bl	8000288 <__aeabi_dsub>
 800319a:	3530      	adds	r5, #48	@ 0x30
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031a4:	f806 5b01 	strb.w	r5, [r6], #1
 80031a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80031ac:	f7fd fc96 	bl	8000adc <__aeabi_dcmplt>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d172      	bne.n	800329a <_dtoa_r+0x622>
 80031b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031b8:	4911      	ldr	r1, [pc, #68]	@ (8003200 <_dtoa_r+0x588>)
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd f864 	bl	8000288 <__aeabi_dsub>
 80031c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80031c4:	f7fd fc8a 	bl	8000adc <__aeabi_dcmplt>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	f040 80b4 	bne.w	8003336 <_dtoa_r+0x6be>
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	f43f af70 	beq.w	80030b4 <_dtoa_r+0x43c>
 80031d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <_dtoa_r+0x58c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	f7fd fa0c 	bl	80005f8 <__aeabi_dmul>
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <_dtoa_r+0x58c>)
 80031e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80031e6:	2200      	movs	r2, #0
 80031e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031ec:	f7fd fa04 	bl	80005f8 <__aeabi_dmul>
 80031f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80031f4:	e7c4      	b.n	8003180 <_dtoa_r+0x508>
 80031f6:	bf00      	nop
 80031f8:	08004c10 	.word	0x08004c10
 80031fc:	08004be8 	.word	0x08004be8
 8003200:	3ff00000 	.word	0x3ff00000
 8003204:	40240000 	.word	0x40240000
 8003208:	401c0000 	.word	0x401c0000
 800320c:	40140000 	.word	0x40140000
 8003210:	3fe00000 	.word	0x3fe00000
 8003214:	4631      	mov	r1, r6
 8003216:	4628      	mov	r0, r5
 8003218:	f7fd f9ee 	bl	80005f8 <__aeabi_dmul>
 800321c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003220:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003222:	4656      	mov	r6, sl
 8003224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003228:	f7fd fc96 	bl	8000b58 <__aeabi_d2iz>
 800322c:	4605      	mov	r5, r0
 800322e:	f7fd f979 	bl	8000524 <__aeabi_i2d>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800323a:	f7fd f825 	bl	8000288 <__aeabi_dsub>
 800323e:	3530      	adds	r5, #48	@ 0x30
 8003240:	f806 5b01 	strb.w	r5, [r6], #1
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	42a6      	cmp	r6, r4
 800324a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	d124      	bne.n	800329e <_dtoa_r+0x626>
 8003254:	4baf      	ldr	r3, [pc, #700]	@ (8003514 <_dtoa_r+0x89c>)
 8003256:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800325a:	f7fd f817 	bl	800028c <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003266:	f7fd fc57 	bl	8000b18 <__aeabi_dcmpgt>
 800326a:	2800      	cmp	r0, #0
 800326c:	d163      	bne.n	8003336 <_dtoa_r+0x6be>
 800326e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003272:	49a8      	ldr	r1, [pc, #672]	@ (8003514 <_dtoa_r+0x89c>)
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd f807 	bl	8000288 <__aeabi_dsub>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003282:	f7fd fc2b 	bl	8000adc <__aeabi_dcmplt>
 8003286:	2800      	cmp	r0, #0
 8003288:	f43f af14 	beq.w	80030b4 <_dtoa_r+0x43c>
 800328c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800328e:	1e73      	subs	r3, r6, #1
 8003290:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003292:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003296:	2b30      	cmp	r3, #48	@ 0x30
 8003298:	d0f8      	beq.n	800328c <_dtoa_r+0x614>
 800329a:	4647      	mov	r7, r8
 800329c:	e03b      	b.n	8003316 <_dtoa_r+0x69e>
 800329e:	4b9e      	ldr	r3, [pc, #632]	@ (8003518 <_dtoa_r+0x8a0>)
 80032a0:	f7fd f9aa 	bl	80005f8 <__aeabi_dmul>
 80032a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032a8:	e7bc      	b.n	8003224 <_dtoa_r+0x5ac>
 80032aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80032ae:	4656      	mov	r6, sl
 80032b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	f7fd fac8 	bl	800084c <__aeabi_ddiv>
 80032bc:	f7fd fc4c 	bl	8000b58 <__aeabi_d2iz>
 80032c0:	4680      	mov	r8, r0
 80032c2:	f7fd f92f 	bl	8000524 <__aeabi_i2d>
 80032c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032ca:	f7fd f995 	bl	80005f8 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80032da:	f7fc ffd5 	bl	8000288 <__aeabi_dsub>
 80032de:	f806 4b01 	strb.w	r4, [r6], #1
 80032e2:	9d03      	ldr	r5, [sp, #12]
 80032e4:	eba6 040a 	sub.w	r4, r6, sl
 80032e8:	42a5      	cmp	r5, r4
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	d133      	bne.n	8003358 <_dtoa_r+0x6e0>
 80032f0:	f7fc ffcc 	bl	800028c <__adddf3>
 80032f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032f8:	4604      	mov	r4, r0
 80032fa:	460d      	mov	r5, r1
 80032fc:	f7fd fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8003300:	b9c0      	cbnz	r0, 8003334 <_dtoa_r+0x6bc>
 8003302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f7fd fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800330e:	b110      	cbz	r0, 8003316 <_dtoa_r+0x69e>
 8003310:	f018 0f01 	tst.w	r8, #1
 8003314:	d10e      	bne.n	8003334 <_dtoa_r+0x6bc>
 8003316:	9902      	ldr	r1, [sp, #8]
 8003318:	4648      	mov	r0, r9
 800331a:	f000 fbbd 	bl	8003a98 <_Bfree>
 800331e:	2300      	movs	r3, #0
 8003320:	7033      	strb	r3, [r6, #0]
 8003322:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003324:	3701      	adds	r7, #1
 8003326:	601f      	str	r7, [r3, #0]
 8003328:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 824b 	beq.w	80037c6 <_dtoa_r+0xb4e>
 8003330:	601e      	str	r6, [r3, #0]
 8003332:	e248      	b.n	80037c6 <_dtoa_r+0xb4e>
 8003334:	46b8      	mov	r8, r7
 8003336:	4633      	mov	r3, r6
 8003338:	461e      	mov	r6, r3
 800333a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800333e:	2a39      	cmp	r2, #57	@ 0x39
 8003340:	d106      	bne.n	8003350 <_dtoa_r+0x6d8>
 8003342:	459a      	cmp	sl, r3
 8003344:	d1f8      	bne.n	8003338 <_dtoa_r+0x6c0>
 8003346:	2230      	movs	r2, #48	@ 0x30
 8003348:	f108 0801 	add.w	r8, r8, #1
 800334c:	f88a 2000 	strb.w	r2, [sl]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	3201      	adds	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e7a0      	b.n	800329a <_dtoa_r+0x622>
 8003358:	4b6f      	ldr	r3, [pc, #444]	@ (8003518 <_dtoa_r+0x8a0>)
 800335a:	2200      	movs	r2, #0
 800335c:	f7fd f94c 	bl	80005f8 <__aeabi_dmul>
 8003360:	2200      	movs	r2, #0
 8003362:	2300      	movs	r3, #0
 8003364:	4604      	mov	r4, r0
 8003366:	460d      	mov	r5, r1
 8003368:	f7fd fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800336c:	2800      	cmp	r0, #0
 800336e:	d09f      	beq.n	80032b0 <_dtoa_r+0x638>
 8003370:	e7d1      	b.n	8003316 <_dtoa_r+0x69e>
 8003372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003374:	2a00      	cmp	r2, #0
 8003376:	f000 80ea 	beq.w	800354e <_dtoa_r+0x8d6>
 800337a:	9a07      	ldr	r2, [sp, #28]
 800337c:	2a01      	cmp	r2, #1
 800337e:	f300 80cd 	bgt.w	800351c <_dtoa_r+0x8a4>
 8003382:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003384:	2a00      	cmp	r2, #0
 8003386:	f000 80c1 	beq.w	800350c <_dtoa_r+0x894>
 800338a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800338e:	9c08      	ldr	r4, [sp, #32]
 8003390:	9e00      	ldr	r6, [sp, #0]
 8003392:	9a00      	ldr	r2, [sp, #0]
 8003394:	441a      	add	r2, r3
 8003396:	9200      	str	r2, [sp, #0]
 8003398:	9a06      	ldr	r2, [sp, #24]
 800339a:	2101      	movs	r1, #1
 800339c:	441a      	add	r2, r3
 800339e:	4648      	mov	r0, r9
 80033a0:	9206      	str	r2, [sp, #24]
 80033a2:	f000 fc2d 	bl	8003c00 <__i2b>
 80033a6:	4605      	mov	r5, r0
 80033a8:	b166      	cbz	r6, 80033c4 <_dtoa_r+0x74c>
 80033aa:	9b06      	ldr	r3, [sp, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	dd09      	ble.n	80033c4 <_dtoa_r+0x74c>
 80033b0:	42b3      	cmp	r3, r6
 80033b2:	9a00      	ldr	r2, [sp, #0]
 80033b4:	bfa8      	it	ge
 80033b6:	4633      	movge	r3, r6
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	9200      	str	r2, [sp, #0]
 80033bc:	9a06      	ldr	r2, [sp, #24]
 80033be:	1af6      	subs	r6, r6, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	9306      	str	r3, [sp, #24]
 80033c4:	9b08      	ldr	r3, [sp, #32]
 80033c6:	b30b      	cbz	r3, 800340c <_dtoa_r+0x794>
 80033c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80c6 	beq.w	800355c <_dtoa_r+0x8e4>
 80033d0:	2c00      	cmp	r4, #0
 80033d2:	f000 80c0 	beq.w	8003556 <_dtoa_r+0x8de>
 80033d6:	4629      	mov	r1, r5
 80033d8:	4622      	mov	r2, r4
 80033da:	4648      	mov	r0, r9
 80033dc:	f000 fcc8 	bl	8003d70 <__pow5mult>
 80033e0:	9a02      	ldr	r2, [sp, #8]
 80033e2:	4601      	mov	r1, r0
 80033e4:	4605      	mov	r5, r0
 80033e6:	4648      	mov	r0, r9
 80033e8:	f000 fc20 	bl	8003c2c <__multiply>
 80033ec:	9902      	ldr	r1, [sp, #8]
 80033ee:	4680      	mov	r8, r0
 80033f0:	4648      	mov	r0, r9
 80033f2:	f000 fb51 	bl	8003a98 <_Bfree>
 80033f6:	9b08      	ldr	r3, [sp, #32]
 80033f8:	1b1b      	subs	r3, r3, r4
 80033fa:	9308      	str	r3, [sp, #32]
 80033fc:	f000 80b1 	beq.w	8003562 <_dtoa_r+0x8ea>
 8003400:	9a08      	ldr	r2, [sp, #32]
 8003402:	4641      	mov	r1, r8
 8003404:	4648      	mov	r0, r9
 8003406:	f000 fcb3 	bl	8003d70 <__pow5mult>
 800340a:	9002      	str	r0, [sp, #8]
 800340c:	2101      	movs	r1, #1
 800340e:	4648      	mov	r0, r9
 8003410:	f000 fbf6 	bl	8003c00 <__i2b>
 8003414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003416:	4604      	mov	r4, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 81d8 	beq.w	80037ce <_dtoa_r+0xb56>
 800341e:	461a      	mov	r2, r3
 8003420:	4601      	mov	r1, r0
 8003422:	4648      	mov	r0, r9
 8003424:	f000 fca4 	bl	8003d70 <__pow5mult>
 8003428:	9b07      	ldr	r3, [sp, #28]
 800342a:	2b01      	cmp	r3, #1
 800342c:	4604      	mov	r4, r0
 800342e:	f300 809f 	bgt.w	8003570 <_dtoa_r+0x8f8>
 8003432:	9b04      	ldr	r3, [sp, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 8097 	bne.w	8003568 <_dtoa_r+0x8f0>
 800343a:	9b05      	ldr	r3, [sp, #20]
 800343c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 8093 	bne.w	800356c <_dtoa_r+0x8f4>
 8003446:	9b05      	ldr	r3, [sp, #20]
 8003448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	051b      	lsls	r3, r3, #20
 8003450:	b133      	cbz	r3, 8003460 <_dtoa_r+0x7e8>
 8003452:	9b00      	ldr	r3, [sp, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	9b06      	ldr	r3, [sp, #24]
 800345a:	3301      	adds	r3, #1
 800345c:	9306      	str	r3, [sp, #24]
 800345e:	2301      	movs	r3, #1
 8003460:	9308      	str	r3, [sp, #32]
 8003462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 81b8 	beq.w	80037da <_dtoa_r+0xb62>
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003470:	6918      	ldr	r0, [r3, #16]
 8003472:	f000 fb79 	bl	8003b68 <__hi0bits>
 8003476:	f1c0 0020 	rsb	r0, r0, #32
 800347a:	9b06      	ldr	r3, [sp, #24]
 800347c:	4418      	add	r0, r3
 800347e:	f010 001f 	ands.w	r0, r0, #31
 8003482:	f000 8082 	beq.w	800358a <_dtoa_r+0x912>
 8003486:	f1c0 0320 	rsb	r3, r0, #32
 800348a:	2b04      	cmp	r3, #4
 800348c:	dd73      	ble.n	8003576 <_dtoa_r+0x8fe>
 800348e:	9b00      	ldr	r3, [sp, #0]
 8003490:	f1c0 001c 	rsb	r0, r0, #28
 8003494:	4403      	add	r3, r0
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	9b06      	ldr	r3, [sp, #24]
 800349a:	4403      	add	r3, r0
 800349c:	4406      	add	r6, r0
 800349e:	9306      	str	r3, [sp, #24]
 80034a0:	9b00      	ldr	r3, [sp, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	dd05      	ble.n	80034b2 <_dtoa_r+0x83a>
 80034a6:	9902      	ldr	r1, [sp, #8]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4648      	mov	r0, r9
 80034ac:	f000 fcba 	bl	8003e24 <__lshift>
 80034b0:	9002      	str	r0, [sp, #8]
 80034b2:	9b06      	ldr	r3, [sp, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	dd05      	ble.n	80034c4 <_dtoa_r+0x84c>
 80034b8:	4621      	mov	r1, r4
 80034ba:	461a      	mov	r2, r3
 80034bc:	4648      	mov	r0, r9
 80034be:	f000 fcb1 	bl	8003e24 <__lshift>
 80034c2:	4604      	mov	r4, r0
 80034c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d061      	beq.n	800358e <_dtoa_r+0x916>
 80034ca:	9802      	ldr	r0, [sp, #8]
 80034cc:	4621      	mov	r1, r4
 80034ce:	f000 fd15 	bl	8003efc <__mcmp>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	da5b      	bge.n	800358e <_dtoa_r+0x916>
 80034d6:	2300      	movs	r3, #0
 80034d8:	9902      	ldr	r1, [sp, #8]
 80034da:	220a      	movs	r2, #10
 80034dc:	4648      	mov	r0, r9
 80034de:	f000 fafd 	bl	8003adc <__multadd>
 80034e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e4:	9002      	str	r0, [sp, #8]
 80034e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8177 	beq.w	80037de <_dtoa_r+0xb66>
 80034f0:	4629      	mov	r1, r5
 80034f2:	2300      	movs	r3, #0
 80034f4:	220a      	movs	r2, #10
 80034f6:	4648      	mov	r0, r9
 80034f8:	f000 faf0 	bl	8003adc <__multadd>
 80034fc:	f1bb 0f00 	cmp.w	fp, #0
 8003500:	4605      	mov	r5, r0
 8003502:	dc6f      	bgt.n	80035e4 <_dtoa_r+0x96c>
 8003504:	9b07      	ldr	r3, [sp, #28]
 8003506:	2b02      	cmp	r3, #2
 8003508:	dc49      	bgt.n	800359e <_dtoa_r+0x926>
 800350a:	e06b      	b.n	80035e4 <_dtoa_r+0x96c>
 800350c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800350e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003512:	e73c      	b.n	800338e <_dtoa_r+0x716>
 8003514:	3fe00000 	.word	0x3fe00000
 8003518:	40240000 	.word	0x40240000
 800351c:	9b03      	ldr	r3, [sp, #12]
 800351e:	1e5c      	subs	r4, r3, #1
 8003520:	9b08      	ldr	r3, [sp, #32]
 8003522:	42a3      	cmp	r3, r4
 8003524:	db09      	blt.n	800353a <_dtoa_r+0x8c2>
 8003526:	1b1c      	subs	r4, r3, r4
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f6bf af30 	bge.w	8003390 <_dtoa_r+0x718>
 8003530:	9b00      	ldr	r3, [sp, #0]
 8003532:	9a03      	ldr	r2, [sp, #12]
 8003534:	1a9e      	subs	r6, r3, r2
 8003536:	2300      	movs	r3, #0
 8003538:	e72b      	b.n	8003392 <_dtoa_r+0x71a>
 800353a:	9b08      	ldr	r3, [sp, #32]
 800353c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800353e:	9408      	str	r4, [sp, #32]
 8003540:	1ae3      	subs	r3, r4, r3
 8003542:	441a      	add	r2, r3
 8003544:	9e00      	ldr	r6, [sp, #0]
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	920d      	str	r2, [sp, #52]	@ 0x34
 800354a:	2400      	movs	r4, #0
 800354c:	e721      	b.n	8003392 <_dtoa_r+0x71a>
 800354e:	9c08      	ldr	r4, [sp, #32]
 8003550:	9e00      	ldr	r6, [sp, #0]
 8003552:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003554:	e728      	b.n	80033a8 <_dtoa_r+0x730>
 8003556:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800355a:	e751      	b.n	8003400 <_dtoa_r+0x788>
 800355c:	9a08      	ldr	r2, [sp, #32]
 800355e:	9902      	ldr	r1, [sp, #8]
 8003560:	e750      	b.n	8003404 <_dtoa_r+0x78c>
 8003562:	f8cd 8008 	str.w	r8, [sp, #8]
 8003566:	e751      	b.n	800340c <_dtoa_r+0x794>
 8003568:	2300      	movs	r3, #0
 800356a:	e779      	b.n	8003460 <_dtoa_r+0x7e8>
 800356c:	9b04      	ldr	r3, [sp, #16]
 800356e:	e777      	b.n	8003460 <_dtoa_r+0x7e8>
 8003570:	2300      	movs	r3, #0
 8003572:	9308      	str	r3, [sp, #32]
 8003574:	e779      	b.n	800346a <_dtoa_r+0x7f2>
 8003576:	d093      	beq.n	80034a0 <_dtoa_r+0x828>
 8003578:	9a00      	ldr	r2, [sp, #0]
 800357a:	331c      	adds	r3, #28
 800357c:	441a      	add	r2, r3
 800357e:	9200      	str	r2, [sp, #0]
 8003580:	9a06      	ldr	r2, [sp, #24]
 8003582:	441a      	add	r2, r3
 8003584:	441e      	add	r6, r3
 8003586:	9206      	str	r2, [sp, #24]
 8003588:	e78a      	b.n	80034a0 <_dtoa_r+0x828>
 800358a:	4603      	mov	r3, r0
 800358c:	e7f4      	b.n	8003578 <_dtoa_r+0x900>
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	46b8      	mov	r8, r7
 8003594:	dc20      	bgt.n	80035d8 <_dtoa_r+0x960>
 8003596:	469b      	mov	fp, r3
 8003598:	9b07      	ldr	r3, [sp, #28]
 800359a:	2b02      	cmp	r3, #2
 800359c:	dd1e      	ble.n	80035dc <_dtoa_r+0x964>
 800359e:	f1bb 0f00 	cmp.w	fp, #0
 80035a2:	f47f adb1 	bne.w	8003108 <_dtoa_r+0x490>
 80035a6:	4621      	mov	r1, r4
 80035a8:	465b      	mov	r3, fp
 80035aa:	2205      	movs	r2, #5
 80035ac:	4648      	mov	r0, r9
 80035ae:	f000 fa95 	bl	8003adc <__multadd>
 80035b2:	4601      	mov	r1, r0
 80035b4:	4604      	mov	r4, r0
 80035b6:	9802      	ldr	r0, [sp, #8]
 80035b8:	f000 fca0 	bl	8003efc <__mcmp>
 80035bc:	2800      	cmp	r0, #0
 80035be:	f77f ada3 	ble.w	8003108 <_dtoa_r+0x490>
 80035c2:	4656      	mov	r6, sl
 80035c4:	2331      	movs	r3, #49	@ 0x31
 80035c6:	f806 3b01 	strb.w	r3, [r6], #1
 80035ca:	f108 0801 	add.w	r8, r8, #1
 80035ce:	e59f      	b.n	8003110 <_dtoa_r+0x498>
 80035d0:	9c03      	ldr	r4, [sp, #12]
 80035d2:	46b8      	mov	r8, r7
 80035d4:	4625      	mov	r5, r4
 80035d6:	e7f4      	b.n	80035c2 <_dtoa_r+0x94a>
 80035d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80035dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8101 	beq.w	80037e6 <_dtoa_r+0xb6e>
 80035e4:	2e00      	cmp	r6, #0
 80035e6:	dd05      	ble.n	80035f4 <_dtoa_r+0x97c>
 80035e8:	4629      	mov	r1, r5
 80035ea:	4632      	mov	r2, r6
 80035ec:	4648      	mov	r0, r9
 80035ee:	f000 fc19 	bl	8003e24 <__lshift>
 80035f2:	4605      	mov	r5, r0
 80035f4:	9b08      	ldr	r3, [sp, #32]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d05c      	beq.n	80036b4 <_dtoa_r+0xa3c>
 80035fa:	6869      	ldr	r1, [r5, #4]
 80035fc:	4648      	mov	r0, r9
 80035fe:	f000 fa0b 	bl	8003a18 <_Balloc>
 8003602:	4606      	mov	r6, r0
 8003604:	b928      	cbnz	r0, 8003612 <_dtoa_r+0x99a>
 8003606:	4b82      	ldr	r3, [pc, #520]	@ (8003810 <_dtoa_r+0xb98>)
 8003608:	4602      	mov	r2, r0
 800360a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800360e:	f7ff bb4a 	b.w	8002ca6 <_dtoa_r+0x2e>
 8003612:	692a      	ldr	r2, [r5, #16]
 8003614:	3202      	adds	r2, #2
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	f105 010c 	add.w	r1, r5, #12
 800361c:	300c      	adds	r0, #12
 800361e:	f000 fff7 	bl	8004610 <memcpy>
 8003622:	2201      	movs	r2, #1
 8003624:	4631      	mov	r1, r6
 8003626:	4648      	mov	r0, r9
 8003628:	f000 fbfc 	bl	8003e24 <__lshift>
 800362c:	f10a 0301 	add.w	r3, sl, #1
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	eb0a 030b 	add.w	r3, sl, fp
 8003636:	9308      	str	r3, [sp, #32]
 8003638:	9b04      	ldr	r3, [sp, #16]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	462f      	mov	r7, r5
 8003640:	9306      	str	r3, [sp, #24]
 8003642:	4605      	mov	r5, r0
 8003644:	9b00      	ldr	r3, [sp, #0]
 8003646:	9802      	ldr	r0, [sp, #8]
 8003648:	4621      	mov	r1, r4
 800364a:	f103 3bff 	add.w	fp, r3, #4294967295
 800364e:	f7ff fa8a 	bl	8002b66 <quorem>
 8003652:	4603      	mov	r3, r0
 8003654:	3330      	adds	r3, #48	@ 0x30
 8003656:	9003      	str	r0, [sp, #12]
 8003658:	4639      	mov	r1, r7
 800365a:	9802      	ldr	r0, [sp, #8]
 800365c:	9309      	str	r3, [sp, #36]	@ 0x24
 800365e:	f000 fc4d 	bl	8003efc <__mcmp>
 8003662:	462a      	mov	r2, r5
 8003664:	9004      	str	r0, [sp, #16]
 8003666:	4621      	mov	r1, r4
 8003668:	4648      	mov	r0, r9
 800366a:	f000 fc63 	bl	8003f34 <__mdiff>
 800366e:	68c2      	ldr	r2, [r0, #12]
 8003670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003672:	4606      	mov	r6, r0
 8003674:	bb02      	cbnz	r2, 80036b8 <_dtoa_r+0xa40>
 8003676:	4601      	mov	r1, r0
 8003678:	9802      	ldr	r0, [sp, #8]
 800367a:	f000 fc3f 	bl	8003efc <__mcmp>
 800367e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003680:	4602      	mov	r2, r0
 8003682:	4631      	mov	r1, r6
 8003684:	4648      	mov	r0, r9
 8003686:	920c      	str	r2, [sp, #48]	@ 0x30
 8003688:	9309      	str	r3, [sp, #36]	@ 0x24
 800368a:	f000 fa05 	bl	8003a98 <_Bfree>
 800368e:	9b07      	ldr	r3, [sp, #28]
 8003690:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003692:	9e00      	ldr	r6, [sp, #0]
 8003694:	ea42 0103 	orr.w	r1, r2, r3
 8003698:	9b06      	ldr	r3, [sp, #24]
 800369a:	4319      	orrs	r1, r3
 800369c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800369e:	d10d      	bne.n	80036bc <_dtoa_r+0xa44>
 80036a0:	2b39      	cmp	r3, #57	@ 0x39
 80036a2:	d027      	beq.n	80036f4 <_dtoa_r+0xa7c>
 80036a4:	9a04      	ldr	r2, [sp, #16]
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	dd01      	ble.n	80036ae <_dtoa_r+0xa36>
 80036aa:	9b03      	ldr	r3, [sp, #12]
 80036ac:	3331      	adds	r3, #49	@ 0x31
 80036ae:	f88b 3000 	strb.w	r3, [fp]
 80036b2:	e52e      	b.n	8003112 <_dtoa_r+0x49a>
 80036b4:	4628      	mov	r0, r5
 80036b6:	e7b9      	b.n	800362c <_dtoa_r+0x9b4>
 80036b8:	2201      	movs	r2, #1
 80036ba:	e7e2      	b.n	8003682 <_dtoa_r+0xa0a>
 80036bc:	9904      	ldr	r1, [sp, #16]
 80036be:	2900      	cmp	r1, #0
 80036c0:	db04      	blt.n	80036cc <_dtoa_r+0xa54>
 80036c2:	9807      	ldr	r0, [sp, #28]
 80036c4:	4301      	orrs	r1, r0
 80036c6:	9806      	ldr	r0, [sp, #24]
 80036c8:	4301      	orrs	r1, r0
 80036ca:	d120      	bne.n	800370e <_dtoa_r+0xa96>
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	ddee      	ble.n	80036ae <_dtoa_r+0xa36>
 80036d0:	9902      	ldr	r1, [sp, #8]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4648      	mov	r0, r9
 80036d8:	f000 fba4 	bl	8003e24 <__lshift>
 80036dc:	4621      	mov	r1, r4
 80036de:	9002      	str	r0, [sp, #8]
 80036e0:	f000 fc0c 	bl	8003efc <__mcmp>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	9b00      	ldr	r3, [sp, #0]
 80036e8:	dc02      	bgt.n	80036f0 <_dtoa_r+0xa78>
 80036ea:	d1e0      	bne.n	80036ae <_dtoa_r+0xa36>
 80036ec:	07da      	lsls	r2, r3, #31
 80036ee:	d5de      	bpl.n	80036ae <_dtoa_r+0xa36>
 80036f0:	2b39      	cmp	r3, #57	@ 0x39
 80036f2:	d1da      	bne.n	80036aa <_dtoa_r+0xa32>
 80036f4:	2339      	movs	r3, #57	@ 0x39
 80036f6:	f88b 3000 	strb.w	r3, [fp]
 80036fa:	4633      	mov	r3, r6
 80036fc:	461e      	mov	r6, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003704:	2a39      	cmp	r2, #57	@ 0x39
 8003706:	d04e      	beq.n	80037a6 <_dtoa_r+0xb2e>
 8003708:	3201      	adds	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e501      	b.n	8003112 <_dtoa_r+0x49a>
 800370e:	2a00      	cmp	r2, #0
 8003710:	dd03      	ble.n	800371a <_dtoa_r+0xaa2>
 8003712:	2b39      	cmp	r3, #57	@ 0x39
 8003714:	d0ee      	beq.n	80036f4 <_dtoa_r+0xa7c>
 8003716:	3301      	adds	r3, #1
 8003718:	e7c9      	b.n	80036ae <_dtoa_r+0xa36>
 800371a:	9a00      	ldr	r2, [sp, #0]
 800371c:	9908      	ldr	r1, [sp, #32]
 800371e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003722:	428a      	cmp	r2, r1
 8003724:	d028      	beq.n	8003778 <_dtoa_r+0xb00>
 8003726:	9902      	ldr	r1, [sp, #8]
 8003728:	2300      	movs	r3, #0
 800372a:	220a      	movs	r2, #10
 800372c:	4648      	mov	r0, r9
 800372e:	f000 f9d5 	bl	8003adc <__multadd>
 8003732:	42af      	cmp	r7, r5
 8003734:	9002      	str	r0, [sp, #8]
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	f04f 020a 	mov.w	r2, #10
 800373e:	4639      	mov	r1, r7
 8003740:	4648      	mov	r0, r9
 8003742:	d107      	bne.n	8003754 <_dtoa_r+0xadc>
 8003744:	f000 f9ca 	bl	8003adc <__multadd>
 8003748:	4607      	mov	r7, r0
 800374a:	4605      	mov	r5, r0
 800374c:	9b00      	ldr	r3, [sp, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	e777      	b.n	8003644 <_dtoa_r+0x9cc>
 8003754:	f000 f9c2 	bl	8003adc <__multadd>
 8003758:	4629      	mov	r1, r5
 800375a:	4607      	mov	r7, r0
 800375c:	2300      	movs	r3, #0
 800375e:	220a      	movs	r2, #10
 8003760:	4648      	mov	r0, r9
 8003762:	f000 f9bb 	bl	8003adc <__multadd>
 8003766:	4605      	mov	r5, r0
 8003768:	e7f0      	b.n	800374c <_dtoa_r+0xad4>
 800376a:	f1bb 0f00 	cmp.w	fp, #0
 800376e:	bfcc      	ite	gt
 8003770:	465e      	movgt	r6, fp
 8003772:	2601      	movle	r6, #1
 8003774:	4456      	add	r6, sl
 8003776:	2700      	movs	r7, #0
 8003778:	9902      	ldr	r1, [sp, #8]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	4648      	mov	r0, r9
 8003780:	f000 fb50 	bl	8003e24 <__lshift>
 8003784:	4621      	mov	r1, r4
 8003786:	9002      	str	r0, [sp, #8]
 8003788:	f000 fbb8 	bl	8003efc <__mcmp>
 800378c:	2800      	cmp	r0, #0
 800378e:	dcb4      	bgt.n	80036fa <_dtoa_r+0xa82>
 8003790:	d102      	bne.n	8003798 <_dtoa_r+0xb20>
 8003792:	9b00      	ldr	r3, [sp, #0]
 8003794:	07db      	lsls	r3, r3, #31
 8003796:	d4b0      	bmi.n	80036fa <_dtoa_r+0xa82>
 8003798:	4633      	mov	r3, r6
 800379a:	461e      	mov	r6, r3
 800379c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80037a0:	2a30      	cmp	r2, #48	@ 0x30
 80037a2:	d0fa      	beq.n	800379a <_dtoa_r+0xb22>
 80037a4:	e4b5      	b.n	8003112 <_dtoa_r+0x49a>
 80037a6:	459a      	cmp	sl, r3
 80037a8:	d1a8      	bne.n	80036fc <_dtoa_r+0xa84>
 80037aa:	2331      	movs	r3, #49	@ 0x31
 80037ac:	f108 0801 	add.w	r8, r8, #1
 80037b0:	f88a 3000 	strb.w	r3, [sl]
 80037b4:	e4ad      	b.n	8003112 <_dtoa_r+0x49a>
 80037b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80037b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003814 <_dtoa_r+0xb9c>
 80037bc:	b11b      	cbz	r3, 80037c6 <_dtoa_r+0xb4e>
 80037be:	f10a 0308 	add.w	r3, sl, #8
 80037c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4650      	mov	r0, sl
 80037c8:	b017      	add	sp, #92	@ 0x5c
 80037ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ce:	9b07      	ldr	r3, [sp, #28]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f77f ae2e 	ble.w	8003432 <_dtoa_r+0x7ba>
 80037d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037d8:	9308      	str	r3, [sp, #32]
 80037da:	2001      	movs	r0, #1
 80037dc:	e64d      	b.n	800347a <_dtoa_r+0x802>
 80037de:	f1bb 0f00 	cmp.w	fp, #0
 80037e2:	f77f aed9 	ble.w	8003598 <_dtoa_r+0x920>
 80037e6:	4656      	mov	r6, sl
 80037e8:	9802      	ldr	r0, [sp, #8]
 80037ea:	4621      	mov	r1, r4
 80037ec:	f7ff f9bb 	bl	8002b66 <quorem>
 80037f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80037f4:	f806 3b01 	strb.w	r3, [r6], #1
 80037f8:	eba6 020a 	sub.w	r2, r6, sl
 80037fc:	4593      	cmp	fp, r2
 80037fe:	ddb4      	ble.n	800376a <_dtoa_r+0xaf2>
 8003800:	9902      	ldr	r1, [sp, #8]
 8003802:	2300      	movs	r3, #0
 8003804:	220a      	movs	r2, #10
 8003806:	4648      	mov	r0, r9
 8003808:	f000 f968 	bl	8003adc <__multadd>
 800380c:	9002      	str	r0, [sp, #8]
 800380e:	e7eb      	b.n	80037e8 <_dtoa_r+0xb70>
 8003810:	08004b1b 	.word	0x08004b1b
 8003814:	08004a9f 	.word	0x08004a9f

08003818 <_free_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4605      	mov	r5, r0
 800381c:	2900      	cmp	r1, #0
 800381e:	d041      	beq.n	80038a4 <_free_r+0x8c>
 8003820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003824:	1f0c      	subs	r4, r1, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	bfb8      	it	lt
 800382a:	18e4      	addlt	r4, r4, r3
 800382c:	f000 f8e8 	bl	8003a00 <__malloc_lock>
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <_free_r+0x90>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	b933      	cbnz	r3, 8003844 <_free_r+0x2c>
 8003836:	6063      	str	r3, [r4, #4]
 8003838:	6014      	str	r4, [r2, #0]
 800383a:	4628      	mov	r0, r5
 800383c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003840:	f000 b8e4 	b.w	8003a0c <__malloc_unlock>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d908      	bls.n	800385a <_free_r+0x42>
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	1821      	adds	r1, r4, r0
 800384c:	428b      	cmp	r3, r1
 800384e:	bf01      	itttt	eq
 8003850:	6819      	ldreq	r1, [r3, #0]
 8003852:	685b      	ldreq	r3, [r3, #4]
 8003854:	1809      	addeq	r1, r1, r0
 8003856:	6021      	streq	r1, [r4, #0]
 8003858:	e7ed      	b.n	8003836 <_free_r+0x1e>
 800385a:	461a      	mov	r2, r3
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b10b      	cbz	r3, 8003864 <_free_r+0x4c>
 8003860:	42a3      	cmp	r3, r4
 8003862:	d9fa      	bls.n	800385a <_free_r+0x42>
 8003864:	6811      	ldr	r1, [r2, #0]
 8003866:	1850      	adds	r0, r2, r1
 8003868:	42a0      	cmp	r0, r4
 800386a:	d10b      	bne.n	8003884 <_free_r+0x6c>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	4401      	add	r1, r0
 8003870:	1850      	adds	r0, r2, r1
 8003872:	4283      	cmp	r3, r0
 8003874:	6011      	str	r1, [r2, #0]
 8003876:	d1e0      	bne.n	800383a <_free_r+0x22>
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	6053      	str	r3, [r2, #4]
 800387e:	4408      	add	r0, r1
 8003880:	6010      	str	r0, [r2, #0]
 8003882:	e7da      	b.n	800383a <_free_r+0x22>
 8003884:	d902      	bls.n	800388c <_free_r+0x74>
 8003886:	230c      	movs	r3, #12
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	e7d6      	b.n	800383a <_free_r+0x22>
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	1821      	adds	r1, r4, r0
 8003890:	428b      	cmp	r3, r1
 8003892:	bf04      	itt	eq
 8003894:	6819      	ldreq	r1, [r3, #0]
 8003896:	685b      	ldreq	r3, [r3, #4]
 8003898:	6063      	str	r3, [r4, #4]
 800389a:	bf04      	itt	eq
 800389c:	1809      	addeq	r1, r1, r0
 800389e:	6021      	streq	r1, [r4, #0]
 80038a0:	6054      	str	r4, [r2, #4]
 80038a2:	e7ca      	b.n	800383a <_free_r+0x22>
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
 80038a6:	bf00      	nop
 80038a8:	2000037c 	.word	0x2000037c

080038ac <malloc>:
 80038ac:	4b02      	ldr	r3, [pc, #8]	@ (80038b8 <malloc+0xc>)
 80038ae:	4601      	mov	r1, r0
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	f000 b825 	b.w	8003900 <_malloc_r>
 80038b6:	bf00      	nop
 80038b8:	2000000c 	.word	0x2000000c

080038bc <sbrk_aligned>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4e0f      	ldr	r6, [pc, #60]	@ (80038fc <sbrk_aligned+0x40>)
 80038c0:	460c      	mov	r4, r1
 80038c2:	6831      	ldr	r1, [r6, #0]
 80038c4:	4605      	mov	r5, r0
 80038c6:	b911      	cbnz	r1, 80038ce <sbrk_aligned+0x12>
 80038c8:	f000 fe92 	bl	80045f0 <_sbrk_r>
 80038cc:	6030      	str	r0, [r6, #0]
 80038ce:	4621      	mov	r1, r4
 80038d0:	4628      	mov	r0, r5
 80038d2:	f000 fe8d 	bl	80045f0 <_sbrk_r>
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	d103      	bne.n	80038e2 <sbrk_aligned+0x26>
 80038da:	f04f 34ff 	mov.w	r4, #4294967295
 80038de:	4620      	mov	r0, r4
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
 80038e2:	1cc4      	adds	r4, r0, #3
 80038e4:	f024 0403 	bic.w	r4, r4, #3
 80038e8:	42a0      	cmp	r0, r4
 80038ea:	d0f8      	beq.n	80038de <sbrk_aligned+0x22>
 80038ec:	1a21      	subs	r1, r4, r0
 80038ee:	4628      	mov	r0, r5
 80038f0:	f000 fe7e 	bl	80045f0 <_sbrk_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	d1f2      	bne.n	80038de <sbrk_aligned+0x22>
 80038f8:	e7ef      	b.n	80038da <sbrk_aligned+0x1e>
 80038fa:	bf00      	nop
 80038fc:	20000378 	.word	0x20000378

08003900 <_malloc_r>:
 8003900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003904:	1ccd      	adds	r5, r1, #3
 8003906:	f025 0503 	bic.w	r5, r5, #3
 800390a:	3508      	adds	r5, #8
 800390c:	2d0c      	cmp	r5, #12
 800390e:	bf38      	it	cc
 8003910:	250c      	movcc	r5, #12
 8003912:	2d00      	cmp	r5, #0
 8003914:	4606      	mov	r6, r0
 8003916:	db01      	blt.n	800391c <_malloc_r+0x1c>
 8003918:	42a9      	cmp	r1, r5
 800391a:	d904      	bls.n	8003926 <_malloc_r+0x26>
 800391c:	230c      	movs	r3, #12
 800391e:	6033      	str	r3, [r6, #0]
 8003920:	2000      	movs	r0, #0
 8003922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039fc <_malloc_r+0xfc>
 800392a:	f000 f869 	bl	8003a00 <__malloc_lock>
 800392e:	f8d8 3000 	ldr.w	r3, [r8]
 8003932:	461c      	mov	r4, r3
 8003934:	bb44      	cbnz	r4, 8003988 <_malloc_r+0x88>
 8003936:	4629      	mov	r1, r5
 8003938:	4630      	mov	r0, r6
 800393a:	f7ff ffbf 	bl	80038bc <sbrk_aligned>
 800393e:	1c43      	adds	r3, r0, #1
 8003940:	4604      	mov	r4, r0
 8003942:	d158      	bne.n	80039f6 <_malloc_r+0xf6>
 8003944:	f8d8 4000 	ldr.w	r4, [r8]
 8003948:	4627      	mov	r7, r4
 800394a:	2f00      	cmp	r7, #0
 800394c:	d143      	bne.n	80039d6 <_malloc_r+0xd6>
 800394e:	2c00      	cmp	r4, #0
 8003950:	d04b      	beq.n	80039ea <_malloc_r+0xea>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	4639      	mov	r1, r7
 8003956:	4630      	mov	r0, r6
 8003958:	eb04 0903 	add.w	r9, r4, r3
 800395c:	f000 fe48 	bl	80045f0 <_sbrk_r>
 8003960:	4581      	cmp	r9, r0
 8003962:	d142      	bne.n	80039ea <_malloc_r+0xea>
 8003964:	6821      	ldr	r1, [r4, #0]
 8003966:	1a6d      	subs	r5, r5, r1
 8003968:	4629      	mov	r1, r5
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff ffa6 	bl	80038bc <sbrk_aligned>
 8003970:	3001      	adds	r0, #1
 8003972:	d03a      	beq.n	80039ea <_malloc_r+0xea>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	442b      	add	r3, r5
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	f8d8 3000 	ldr.w	r3, [r8]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	bb62      	cbnz	r2, 80039dc <_malloc_r+0xdc>
 8003982:	f8c8 7000 	str.w	r7, [r8]
 8003986:	e00f      	b.n	80039a8 <_malloc_r+0xa8>
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	1b52      	subs	r2, r2, r5
 800398c:	d420      	bmi.n	80039d0 <_malloc_r+0xd0>
 800398e:	2a0b      	cmp	r2, #11
 8003990:	d917      	bls.n	80039c2 <_malloc_r+0xc2>
 8003992:	1961      	adds	r1, r4, r5
 8003994:	42a3      	cmp	r3, r4
 8003996:	6025      	str	r5, [r4, #0]
 8003998:	bf18      	it	ne
 800399a:	6059      	strne	r1, [r3, #4]
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	bf08      	it	eq
 80039a0:	f8c8 1000 	streq.w	r1, [r8]
 80039a4:	5162      	str	r2, [r4, r5]
 80039a6:	604b      	str	r3, [r1, #4]
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f82f 	bl	8003a0c <__malloc_unlock>
 80039ae:	f104 000b 	add.w	r0, r4, #11
 80039b2:	1d23      	adds	r3, r4, #4
 80039b4:	f020 0007 	bic.w	r0, r0, #7
 80039b8:	1ac2      	subs	r2, r0, r3
 80039ba:	bf1c      	itt	ne
 80039bc:	1a1b      	subne	r3, r3, r0
 80039be:	50a3      	strne	r3, [r4, r2]
 80039c0:	e7af      	b.n	8003922 <_malloc_r+0x22>
 80039c2:	6862      	ldr	r2, [r4, #4]
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	bf0c      	ite	eq
 80039c8:	f8c8 2000 	streq.w	r2, [r8]
 80039cc:	605a      	strne	r2, [r3, #4]
 80039ce:	e7eb      	b.n	80039a8 <_malloc_r+0xa8>
 80039d0:	4623      	mov	r3, r4
 80039d2:	6864      	ldr	r4, [r4, #4]
 80039d4:	e7ae      	b.n	8003934 <_malloc_r+0x34>
 80039d6:	463c      	mov	r4, r7
 80039d8:	687f      	ldr	r7, [r7, #4]
 80039da:	e7b6      	b.n	800394a <_malloc_r+0x4a>
 80039dc:	461a      	mov	r2, r3
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	d1fb      	bne.n	80039dc <_malloc_r+0xdc>
 80039e4:	2300      	movs	r3, #0
 80039e6:	6053      	str	r3, [r2, #4]
 80039e8:	e7de      	b.n	80039a8 <_malloc_r+0xa8>
 80039ea:	230c      	movs	r3, #12
 80039ec:	6033      	str	r3, [r6, #0]
 80039ee:	4630      	mov	r0, r6
 80039f0:	f000 f80c 	bl	8003a0c <__malloc_unlock>
 80039f4:	e794      	b.n	8003920 <_malloc_r+0x20>
 80039f6:	6005      	str	r5, [r0, #0]
 80039f8:	e7d6      	b.n	80039a8 <_malloc_r+0xa8>
 80039fa:	bf00      	nop
 80039fc:	2000037c 	.word	0x2000037c

08003a00 <__malloc_lock>:
 8003a00:	4801      	ldr	r0, [pc, #4]	@ (8003a08 <__malloc_lock+0x8>)
 8003a02:	f7ff b8ae 	b.w	8002b62 <__retarget_lock_acquire_recursive>
 8003a06:	bf00      	nop
 8003a08:	20000374 	.word	0x20000374

08003a0c <__malloc_unlock>:
 8003a0c:	4801      	ldr	r0, [pc, #4]	@ (8003a14 <__malloc_unlock+0x8>)
 8003a0e:	f7ff b8a9 	b.w	8002b64 <__retarget_lock_release_recursive>
 8003a12:	bf00      	nop
 8003a14:	20000374 	.word	0x20000374

08003a18 <_Balloc>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	69c6      	ldr	r6, [r0, #28]
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	b976      	cbnz	r6, 8003a40 <_Balloc+0x28>
 8003a22:	2010      	movs	r0, #16
 8003a24:	f7ff ff42 	bl	80038ac <malloc>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	61e0      	str	r0, [r4, #28]
 8003a2c:	b920      	cbnz	r0, 8003a38 <_Balloc+0x20>
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <_Balloc+0x78>)
 8003a30:	4818      	ldr	r0, [pc, #96]	@ (8003a94 <_Balloc+0x7c>)
 8003a32:	216b      	movs	r1, #107	@ 0x6b
 8003a34:	f000 fdfa 	bl	800462c <__assert_func>
 8003a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a3c:	6006      	str	r6, [r0, #0]
 8003a3e:	60c6      	str	r6, [r0, #12]
 8003a40:	69e6      	ldr	r6, [r4, #28]
 8003a42:	68f3      	ldr	r3, [r6, #12]
 8003a44:	b183      	cbz	r3, 8003a68 <_Balloc+0x50>
 8003a46:	69e3      	ldr	r3, [r4, #28]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003a4e:	b9b8      	cbnz	r0, 8003a80 <_Balloc+0x68>
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f605 	lsl.w	r6, r1, r5
 8003a56:	1d72      	adds	r2, r6, #5
 8003a58:	0092      	lsls	r2, r2, #2
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 fe04 	bl	8004668 <_calloc_r>
 8003a60:	b160      	cbz	r0, 8003a7c <_Balloc+0x64>
 8003a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003a66:	e00e      	b.n	8003a86 <_Balloc+0x6e>
 8003a68:	2221      	movs	r2, #33	@ 0x21
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f000 fdfb 	bl	8004668 <_calloc_r>
 8003a72:	69e3      	ldr	r3, [r4, #28]
 8003a74:	60f0      	str	r0, [r6, #12]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e4      	bne.n	8003a46 <_Balloc+0x2e>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	6802      	ldr	r2, [r0, #0]
 8003a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003a86:	2300      	movs	r3, #0
 8003a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003a8c:	e7f7      	b.n	8003a7e <_Balloc+0x66>
 8003a8e:	bf00      	nop
 8003a90:	08004aac 	.word	0x08004aac
 8003a94:	08004b2c 	.word	0x08004b2c

08003a98 <_Bfree>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	69c6      	ldr	r6, [r0, #28]
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	b976      	cbnz	r6, 8003ac0 <_Bfree+0x28>
 8003aa2:	2010      	movs	r0, #16
 8003aa4:	f7ff ff02 	bl	80038ac <malloc>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	61e8      	str	r0, [r5, #28]
 8003aac:	b920      	cbnz	r0, 8003ab8 <_Bfree+0x20>
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <_Bfree+0x3c>)
 8003ab0:	4809      	ldr	r0, [pc, #36]	@ (8003ad8 <_Bfree+0x40>)
 8003ab2:	218f      	movs	r1, #143	@ 0x8f
 8003ab4:	f000 fdba 	bl	800462c <__assert_func>
 8003ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003abc:	6006      	str	r6, [r0, #0]
 8003abe:	60c6      	str	r6, [r0, #12]
 8003ac0:	b13c      	cbz	r4, 8003ad2 <_Bfree+0x3a>
 8003ac2:	69eb      	ldr	r3, [r5, #28]
 8003ac4:	6862      	ldr	r2, [r4, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003acc:	6021      	str	r1, [r4, #0]
 8003ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	08004aac 	.word	0x08004aac
 8003ad8:	08004b2c 	.word	0x08004b2c

08003adc <__multadd>:
 8003adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae0:	690d      	ldr	r5, [r1, #16]
 8003ae2:	4607      	mov	r7, r0
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	461e      	mov	r6, r3
 8003ae8:	f101 0c14 	add.w	ip, r1, #20
 8003aec:	2000      	movs	r0, #0
 8003aee:	f8dc 3000 	ldr.w	r3, [ip]
 8003af2:	b299      	uxth	r1, r3
 8003af4:	fb02 6101 	mla	r1, r2, r1, r6
 8003af8:	0c1e      	lsrs	r6, r3, #16
 8003afa:	0c0b      	lsrs	r3, r1, #16
 8003afc:	fb02 3306 	mla	r3, r2, r6, r3
 8003b00:	b289      	uxth	r1, r1
 8003b02:	3001      	adds	r0, #1
 8003b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003b08:	4285      	cmp	r5, r0
 8003b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8003b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003b12:	dcec      	bgt.n	8003aee <__multadd+0x12>
 8003b14:	b30e      	cbz	r6, 8003b5a <__multadd+0x7e>
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	42ab      	cmp	r3, r5
 8003b1a:	dc19      	bgt.n	8003b50 <__multadd+0x74>
 8003b1c:	6861      	ldr	r1, [r4, #4]
 8003b1e:	4638      	mov	r0, r7
 8003b20:	3101      	adds	r1, #1
 8003b22:	f7ff ff79 	bl	8003a18 <_Balloc>
 8003b26:	4680      	mov	r8, r0
 8003b28:	b928      	cbnz	r0, 8003b36 <__multadd+0x5a>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <__multadd+0x84>)
 8003b2e:	480d      	ldr	r0, [pc, #52]	@ (8003b64 <__multadd+0x88>)
 8003b30:	21ba      	movs	r1, #186	@ 0xba
 8003b32:	f000 fd7b 	bl	800462c <__assert_func>
 8003b36:	6922      	ldr	r2, [r4, #16]
 8003b38:	3202      	adds	r2, #2
 8003b3a:	f104 010c 	add.w	r1, r4, #12
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	300c      	adds	r0, #12
 8003b42:	f000 fd65 	bl	8004610 <memcpy>
 8003b46:	4621      	mov	r1, r4
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f7ff ffa5 	bl	8003a98 <_Bfree>
 8003b4e:	4644      	mov	r4, r8
 8003b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003b54:	3501      	adds	r5, #1
 8003b56:	615e      	str	r6, [r3, #20]
 8003b58:	6125      	str	r5, [r4, #16]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b60:	08004b1b 	.word	0x08004b1b
 8003b64:	08004b2c 	.word	0x08004b2c

08003b68 <__hi0bits>:
 8003b68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	bf36      	itet	cc
 8003b70:	0403      	lslcc	r3, r0, #16
 8003b72:	2000      	movcs	r0, #0
 8003b74:	2010      	movcc	r0, #16
 8003b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b7a:	bf3c      	itt	cc
 8003b7c:	021b      	lslcc	r3, r3, #8
 8003b7e:	3008      	addcc	r0, #8
 8003b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b84:	bf3c      	itt	cc
 8003b86:	011b      	lslcc	r3, r3, #4
 8003b88:	3004      	addcc	r0, #4
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8e:	bf3c      	itt	cc
 8003b90:	009b      	lslcc	r3, r3, #2
 8003b92:	3002      	addcc	r0, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db05      	blt.n	8003ba4 <__hi0bits+0x3c>
 8003b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003b9c:	f100 0001 	add.w	r0, r0, #1
 8003ba0:	bf08      	it	eq
 8003ba2:	2020      	moveq	r0, #32
 8003ba4:	4770      	bx	lr

08003ba6 <__lo0bits>:
 8003ba6:	6803      	ldr	r3, [r0, #0]
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f013 0007 	ands.w	r0, r3, #7
 8003bae:	d00b      	beq.n	8003bc8 <__lo0bits+0x22>
 8003bb0:	07d9      	lsls	r1, r3, #31
 8003bb2:	d421      	bmi.n	8003bf8 <__lo0bits+0x52>
 8003bb4:	0798      	lsls	r0, r3, #30
 8003bb6:	bf49      	itett	mi
 8003bb8:	085b      	lsrmi	r3, r3, #1
 8003bba:	089b      	lsrpl	r3, r3, #2
 8003bbc:	2001      	movmi	r0, #1
 8003bbe:	6013      	strmi	r3, [r2, #0]
 8003bc0:	bf5c      	itt	pl
 8003bc2:	6013      	strpl	r3, [r2, #0]
 8003bc4:	2002      	movpl	r0, #2
 8003bc6:	4770      	bx	lr
 8003bc8:	b299      	uxth	r1, r3
 8003bca:	b909      	cbnz	r1, 8003bd0 <__lo0bits+0x2a>
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	2010      	movs	r0, #16
 8003bd0:	b2d9      	uxtb	r1, r3
 8003bd2:	b909      	cbnz	r1, 8003bd8 <__lo0bits+0x32>
 8003bd4:	3008      	adds	r0, #8
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	0719      	lsls	r1, r3, #28
 8003bda:	bf04      	itt	eq
 8003bdc:	091b      	lsreq	r3, r3, #4
 8003bde:	3004      	addeq	r0, #4
 8003be0:	0799      	lsls	r1, r3, #30
 8003be2:	bf04      	itt	eq
 8003be4:	089b      	lsreq	r3, r3, #2
 8003be6:	3002      	addeq	r0, #2
 8003be8:	07d9      	lsls	r1, r3, #31
 8003bea:	d403      	bmi.n	8003bf4 <__lo0bits+0x4e>
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	f100 0001 	add.w	r0, r0, #1
 8003bf2:	d003      	beq.n	8003bfc <__lo0bits+0x56>
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4770      	bx	lr
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	4770      	bx	lr
 8003bfc:	2020      	movs	r0, #32
 8003bfe:	4770      	bx	lr

08003c00 <__i2b>:
 8003c00:	b510      	push	{r4, lr}
 8003c02:	460c      	mov	r4, r1
 8003c04:	2101      	movs	r1, #1
 8003c06:	f7ff ff07 	bl	8003a18 <_Balloc>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	b928      	cbnz	r0, 8003c1a <__i2b+0x1a>
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <__i2b+0x24>)
 8003c10:	4805      	ldr	r0, [pc, #20]	@ (8003c28 <__i2b+0x28>)
 8003c12:	f240 1145 	movw	r1, #325	@ 0x145
 8003c16:	f000 fd09 	bl	800462c <__assert_func>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	6144      	str	r4, [r0, #20]
 8003c1e:	6103      	str	r3, [r0, #16]
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	bf00      	nop
 8003c24:	08004b1b 	.word	0x08004b1b
 8003c28:	08004b2c 	.word	0x08004b2c

08003c2c <__multiply>:
 8003c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c30:	4617      	mov	r7, r2
 8003c32:	690a      	ldr	r2, [r1, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	bfa8      	it	ge
 8003c3a:	463b      	movge	r3, r7
 8003c3c:	4689      	mov	r9, r1
 8003c3e:	bfa4      	itt	ge
 8003c40:	460f      	movge	r7, r1
 8003c42:	4699      	movge	r9, r3
 8003c44:	693d      	ldr	r5, [r7, #16]
 8003c46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	eb05 060a 	add.w	r6, r5, sl
 8003c52:	42b3      	cmp	r3, r6
 8003c54:	b085      	sub	sp, #20
 8003c56:	bfb8      	it	lt
 8003c58:	3101      	addlt	r1, #1
 8003c5a:	f7ff fedd 	bl	8003a18 <_Balloc>
 8003c5e:	b930      	cbnz	r0, 8003c6e <__multiply+0x42>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <__multiply+0x13c>)
 8003c64:	4841      	ldr	r0, [pc, #260]	@ (8003d6c <__multiply+0x140>)
 8003c66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003c6a:	f000 fcdf 	bl	800462c <__assert_func>
 8003c6e:	f100 0414 	add.w	r4, r0, #20
 8003c72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8003c76:	4623      	mov	r3, r4
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4573      	cmp	r3, lr
 8003c7c:	d320      	bcc.n	8003cc0 <__multiply+0x94>
 8003c7e:	f107 0814 	add.w	r8, r7, #20
 8003c82:	f109 0114 	add.w	r1, r9, #20
 8003c86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8003c8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8003c8e:	9302      	str	r3, [sp, #8]
 8003c90:	1beb      	subs	r3, r5, r7
 8003c92:	3b15      	subs	r3, #21
 8003c94:	f023 0303 	bic.w	r3, r3, #3
 8003c98:	3304      	adds	r3, #4
 8003c9a:	3715      	adds	r7, #21
 8003c9c:	42bd      	cmp	r5, r7
 8003c9e:	bf38      	it	cc
 8003ca0:	2304      	movcc	r3, #4
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	9b02      	ldr	r3, [sp, #8]
 8003ca6:	9103      	str	r1, [sp, #12]
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d80c      	bhi.n	8003cc6 <__multiply+0x9a>
 8003cac:	2e00      	cmp	r6, #0
 8003cae:	dd03      	ble.n	8003cb8 <__multiply+0x8c>
 8003cb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d055      	beq.n	8003d64 <__multiply+0x138>
 8003cb8:	6106      	str	r6, [r0, #16]
 8003cba:	b005      	add	sp, #20
 8003cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc0:	f843 2b04 	str.w	r2, [r3], #4
 8003cc4:	e7d9      	b.n	8003c7a <__multiply+0x4e>
 8003cc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8003cca:	f1ba 0f00 	cmp.w	sl, #0
 8003cce:	d01f      	beq.n	8003d10 <__multiply+0xe4>
 8003cd0:	46c4      	mov	ip, r8
 8003cd2:	46a1      	mov	r9, r4
 8003cd4:	2700      	movs	r7, #0
 8003cd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003cda:	f8d9 3000 	ldr.w	r3, [r9]
 8003cde:	fa1f fb82 	uxth.w	fp, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	fb0a 330b 	mla	r3, sl, fp, r3
 8003ce8:	443b      	add	r3, r7
 8003cea:	f8d9 7000 	ldr.w	r7, [r9]
 8003cee:	0c12      	lsrs	r2, r2, #16
 8003cf0:	0c3f      	lsrs	r7, r7, #16
 8003cf2:	fb0a 7202 	mla	r2, sl, r2, r7
 8003cf6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d00:	4565      	cmp	r5, ip
 8003d02:	f849 3b04 	str.w	r3, [r9], #4
 8003d06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8003d0a:	d8e4      	bhi.n	8003cd6 <__multiply+0xaa>
 8003d0c:	9b01      	ldr	r3, [sp, #4]
 8003d0e:	50e7      	str	r7, [r4, r3]
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003d16:	3104      	adds	r1, #4
 8003d18:	f1b9 0f00 	cmp.w	r9, #0
 8003d1c:	d020      	beq.n	8003d60 <__multiply+0x134>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	4647      	mov	r7, r8
 8003d22:	46a4      	mov	ip, r4
 8003d24:	f04f 0a00 	mov.w	sl, #0
 8003d28:	f8b7 b000 	ldrh.w	fp, [r7]
 8003d2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8003d30:	fb09 220b 	mla	r2, r9, fp, r2
 8003d34:	4452      	add	r2, sl
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d3c:	f84c 3b04 	str.w	r3, [ip], #4
 8003d40:	f857 3b04 	ldr.w	r3, [r7], #4
 8003d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003d48:	f8bc 3000 	ldrh.w	r3, [ip]
 8003d4c:	fb09 330a 	mla	r3, r9, sl, r3
 8003d50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8003d54:	42bd      	cmp	r5, r7
 8003d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003d5a:	d8e5      	bhi.n	8003d28 <__multiply+0xfc>
 8003d5c:	9a01      	ldr	r2, [sp, #4]
 8003d5e:	50a3      	str	r3, [r4, r2]
 8003d60:	3404      	adds	r4, #4
 8003d62:	e79f      	b.n	8003ca4 <__multiply+0x78>
 8003d64:	3e01      	subs	r6, #1
 8003d66:	e7a1      	b.n	8003cac <__multiply+0x80>
 8003d68:	08004b1b 	.word	0x08004b1b
 8003d6c:	08004b2c 	.word	0x08004b2c

08003d70 <__pow5mult>:
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	4615      	mov	r5, r2
 8003d76:	f012 0203 	ands.w	r2, r2, #3
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	460e      	mov	r6, r1
 8003d7e:	d007      	beq.n	8003d90 <__pow5mult+0x20>
 8003d80:	4c25      	ldr	r4, [pc, #148]	@ (8003e18 <__pow5mult+0xa8>)
 8003d82:	3a01      	subs	r2, #1
 8003d84:	2300      	movs	r3, #0
 8003d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003d8a:	f7ff fea7 	bl	8003adc <__multadd>
 8003d8e:	4606      	mov	r6, r0
 8003d90:	10ad      	asrs	r5, r5, #2
 8003d92:	d03d      	beq.n	8003e10 <__pow5mult+0xa0>
 8003d94:	69fc      	ldr	r4, [r7, #28]
 8003d96:	b97c      	cbnz	r4, 8003db8 <__pow5mult+0x48>
 8003d98:	2010      	movs	r0, #16
 8003d9a:	f7ff fd87 	bl	80038ac <malloc>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	61f8      	str	r0, [r7, #28]
 8003da2:	b928      	cbnz	r0, 8003db0 <__pow5mult+0x40>
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <__pow5mult+0xac>)
 8003da6:	481e      	ldr	r0, [pc, #120]	@ (8003e20 <__pow5mult+0xb0>)
 8003da8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003dac:	f000 fc3e 	bl	800462c <__assert_func>
 8003db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003db4:	6004      	str	r4, [r0, #0]
 8003db6:	60c4      	str	r4, [r0, #12]
 8003db8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003dc0:	b94c      	cbnz	r4, 8003dd6 <__pow5mult+0x66>
 8003dc2:	f240 2171 	movw	r1, #625	@ 0x271
 8003dc6:	4638      	mov	r0, r7
 8003dc8:	f7ff ff1a 	bl	8003c00 <__i2b>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	6003      	str	r3, [r0, #0]
 8003dd6:	f04f 0900 	mov.w	r9, #0
 8003dda:	07eb      	lsls	r3, r5, #31
 8003ddc:	d50a      	bpl.n	8003df4 <__pow5mult+0x84>
 8003dde:	4631      	mov	r1, r6
 8003de0:	4622      	mov	r2, r4
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7ff ff22 	bl	8003c2c <__multiply>
 8003de8:	4631      	mov	r1, r6
 8003dea:	4680      	mov	r8, r0
 8003dec:	4638      	mov	r0, r7
 8003dee:	f7ff fe53 	bl	8003a98 <_Bfree>
 8003df2:	4646      	mov	r6, r8
 8003df4:	106d      	asrs	r5, r5, #1
 8003df6:	d00b      	beq.n	8003e10 <__pow5mult+0xa0>
 8003df8:	6820      	ldr	r0, [r4, #0]
 8003dfa:	b938      	cbnz	r0, 8003e0c <__pow5mult+0x9c>
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4638      	mov	r0, r7
 8003e02:	f7ff ff13 	bl	8003c2c <__multiply>
 8003e06:	6020      	str	r0, [r4, #0]
 8003e08:	f8c0 9000 	str.w	r9, [r0]
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	e7e4      	b.n	8003dda <__pow5mult+0x6a>
 8003e10:	4630      	mov	r0, r6
 8003e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e16:	bf00      	nop
 8003e18:	08004bdc 	.word	0x08004bdc
 8003e1c:	08004aac 	.word	0x08004aac
 8003e20:	08004b2c 	.word	0x08004b2c

08003e24 <__lshift>:
 8003e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	460c      	mov	r4, r1
 8003e2a:	6849      	ldr	r1, [r1, #4]
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	4607      	mov	r7, r0
 8003e36:	4691      	mov	r9, r2
 8003e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e3c:	f108 0601 	add.w	r6, r8, #1
 8003e40:	42b3      	cmp	r3, r6
 8003e42:	db0b      	blt.n	8003e5c <__lshift+0x38>
 8003e44:	4638      	mov	r0, r7
 8003e46:	f7ff fde7 	bl	8003a18 <_Balloc>
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	b948      	cbnz	r0, 8003e62 <__lshift+0x3e>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b28      	ldr	r3, [pc, #160]	@ (8003ef4 <__lshift+0xd0>)
 8003e52:	4829      	ldr	r0, [pc, #164]	@ (8003ef8 <__lshift+0xd4>)
 8003e54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003e58:	f000 fbe8 	bl	800462c <__assert_func>
 8003e5c:	3101      	adds	r1, #1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	e7ee      	b.n	8003e40 <__lshift+0x1c>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f100 0114 	add.w	r1, r0, #20
 8003e68:	f100 0210 	add.w	r2, r0, #16
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4553      	cmp	r3, sl
 8003e70:	db33      	blt.n	8003eda <__lshift+0xb6>
 8003e72:	6920      	ldr	r0, [r4, #16]
 8003e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003e78:	f104 0314 	add.w	r3, r4, #20
 8003e7c:	f019 091f 	ands.w	r9, r9, #31
 8003e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003e88:	d02b      	beq.n	8003ee2 <__lshift+0xbe>
 8003e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8003e8e:	468a      	mov	sl, r1
 8003e90:	2200      	movs	r2, #0
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	fa00 f009 	lsl.w	r0, r0, r9
 8003e98:	4310      	orrs	r0, r2
 8003e9a:	f84a 0b04 	str.w	r0, [sl], #4
 8003e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ea2:	459c      	cmp	ip, r3
 8003ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003ea8:	d8f3      	bhi.n	8003e92 <__lshift+0x6e>
 8003eaa:	ebac 0304 	sub.w	r3, ip, r4
 8003eae:	3b15      	subs	r3, #21
 8003eb0:	f023 0303 	bic.w	r3, r3, #3
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	f104 0015 	add.w	r0, r4, #21
 8003eba:	4560      	cmp	r0, ip
 8003ebc:	bf88      	it	hi
 8003ebe:	2304      	movhi	r3, #4
 8003ec0:	50ca      	str	r2, [r1, r3]
 8003ec2:	b10a      	cbz	r2, 8003ec8 <__lshift+0xa4>
 8003ec4:	f108 0602 	add.w	r6, r8, #2
 8003ec8:	3e01      	subs	r6, #1
 8003eca:	4638      	mov	r0, r7
 8003ecc:	612e      	str	r6, [r5, #16]
 8003ece:	4621      	mov	r1, r4
 8003ed0:	f7ff fde2 	bl	8003a98 <_Bfree>
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8003ede:	3301      	adds	r3, #1
 8003ee0:	e7c5      	b.n	8003e6e <__lshift+0x4a>
 8003ee2:	3904      	subs	r1, #4
 8003ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003eec:	459c      	cmp	ip, r3
 8003eee:	d8f9      	bhi.n	8003ee4 <__lshift+0xc0>
 8003ef0:	e7ea      	b.n	8003ec8 <__lshift+0xa4>
 8003ef2:	bf00      	nop
 8003ef4:	08004b1b 	.word	0x08004b1b
 8003ef8:	08004b2c 	.word	0x08004b2c

08003efc <__mcmp>:
 8003efc:	690a      	ldr	r2, [r1, #16]
 8003efe:	4603      	mov	r3, r0
 8003f00:	6900      	ldr	r0, [r0, #16]
 8003f02:	1a80      	subs	r0, r0, r2
 8003f04:	b530      	push	{r4, r5, lr}
 8003f06:	d10e      	bne.n	8003f26 <__mcmp+0x2a>
 8003f08:	3314      	adds	r3, #20
 8003f0a:	3114      	adds	r1, #20
 8003f0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003f10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003f14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003f18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003f1c:	4295      	cmp	r5, r2
 8003f1e:	d003      	beq.n	8003f28 <__mcmp+0x2c>
 8003f20:	d205      	bcs.n	8003f2e <__mcmp+0x32>
 8003f22:	f04f 30ff 	mov.w	r0, #4294967295
 8003f26:	bd30      	pop	{r4, r5, pc}
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d3f3      	bcc.n	8003f14 <__mcmp+0x18>
 8003f2c:	e7fb      	b.n	8003f26 <__mcmp+0x2a>
 8003f2e:	2001      	movs	r0, #1
 8003f30:	e7f9      	b.n	8003f26 <__mcmp+0x2a>
	...

08003f34 <__mdiff>:
 8003f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	4689      	mov	r9, r1
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4648      	mov	r0, r9
 8003f40:	4614      	mov	r4, r2
 8003f42:	f7ff ffdb 	bl	8003efc <__mcmp>
 8003f46:	1e05      	subs	r5, r0, #0
 8003f48:	d112      	bne.n	8003f70 <__mdiff+0x3c>
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff fd63 	bl	8003a18 <_Balloc>
 8003f52:	4602      	mov	r2, r0
 8003f54:	b928      	cbnz	r0, 8003f62 <__mdiff+0x2e>
 8003f56:	4b3f      	ldr	r3, [pc, #252]	@ (8004054 <__mdiff+0x120>)
 8003f58:	f240 2137 	movw	r1, #567	@ 0x237
 8003f5c:	483e      	ldr	r0, [pc, #248]	@ (8004058 <__mdiff+0x124>)
 8003f5e:	f000 fb65 	bl	800462c <__assert_func>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003f68:	4610      	mov	r0, r2
 8003f6a:	b003      	add	sp, #12
 8003f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f70:	bfbc      	itt	lt
 8003f72:	464b      	movlt	r3, r9
 8003f74:	46a1      	movlt	r9, r4
 8003f76:	4630      	mov	r0, r6
 8003f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003f7c:	bfba      	itte	lt
 8003f7e:	461c      	movlt	r4, r3
 8003f80:	2501      	movlt	r5, #1
 8003f82:	2500      	movge	r5, #0
 8003f84:	f7ff fd48 	bl	8003a18 <_Balloc>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	b918      	cbnz	r0, 8003f94 <__mdiff+0x60>
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <__mdiff+0x120>)
 8003f8e:	f240 2145 	movw	r1, #581	@ 0x245
 8003f92:	e7e3      	b.n	8003f5c <__mdiff+0x28>
 8003f94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003f98:	6926      	ldr	r6, [r4, #16]
 8003f9a:	60c5      	str	r5, [r0, #12]
 8003f9c:	f109 0310 	add.w	r3, r9, #16
 8003fa0:	f109 0514 	add.w	r5, r9, #20
 8003fa4:	f104 0e14 	add.w	lr, r4, #20
 8003fa8:	f100 0b14 	add.w	fp, r0, #20
 8003fac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003fb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	46d9      	mov	r9, fp
 8003fb8:	f04f 0c00 	mov.w	ip, #0
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003fc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	fa1f f38a 	uxth.w	r3, sl
 8003fcc:	4619      	mov	r1, r3
 8003fce:	b283      	uxth	r3, r0
 8003fd0:	1acb      	subs	r3, r1, r3
 8003fd2:	0c00      	lsrs	r0, r0, #16
 8003fd4:	4463      	add	r3, ip
 8003fd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003fda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003fe4:	4576      	cmp	r6, lr
 8003fe6:	f849 3b04 	str.w	r3, [r9], #4
 8003fea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003fee:	d8e5      	bhi.n	8003fbc <__mdiff+0x88>
 8003ff0:	1b33      	subs	r3, r6, r4
 8003ff2:	3b15      	subs	r3, #21
 8003ff4:	f023 0303 	bic.w	r3, r3, #3
 8003ff8:	3415      	adds	r4, #21
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	bf38      	it	cc
 8004000:	2304      	movcc	r3, #4
 8004002:	441d      	add	r5, r3
 8004004:	445b      	add	r3, fp
 8004006:	461e      	mov	r6, r3
 8004008:	462c      	mov	r4, r5
 800400a:	4544      	cmp	r4, r8
 800400c:	d30e      	bcc.n	800402c <__mdiff+0xf8>
 800400e:	f108 0103 	add.w	r1, r8, #3
 8004012:	1b49      	subs	r1, r1, r5
 8004014:	f021 0103 	bic.w	r1, r1, #3
 8004018:	3d03      	subs	r5, #3
 800401a:	45a8      	cmp	r8, r5
 800401c:	bf38      	it	cc
 800401e:	2100      	movcc	r1, #0
 8004020:	440b      	add	r3, r1
 8004022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004026:	b191      	cbz	r1, 800404e <__mdiff+0x11a>
 8004028:	6117      	str	r7, [r2, #16]
 800402a:	e79d      	b.n	8003f68 <__mdiff+0x34>
 800402c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004030:	46e6      	mov	lr, ip
 8004032:	0c08      	lsrs	r0, r1, #16
 8004034:	fa1c fc81 	uxtah	ip, ip, r1
 8004038:	4471      	add	r1, lr
 800403a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800403e:	b289      	uxth	r1, r1
 8004040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004044:	f846 1b04 	str.w	r1, [r6], #4
 8004048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800404c:	e7dd      	b.n	800400a <__mdiff+0xd6>
 800404e:	3f01      	subs	r7, #1
 8004050:	e7e7      	b.n	8004022 <__mdiff+0xee>
 8004052:	bf00      	nop
 8004054:	08004b1b 	.word	0x08004b1b
 8004058:	08004b2c 	.word	0x08004b2c

0800405c <__d2b>:
 800405c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004060:	460f      	mov	r7, r1
 8004062:	2101      	movs	r1, #1
 8004064:	ec59 8b10 	vmov	r8, r9, d0
 8004068:	4616      	mov	r6, r2
 800406a:	f7ff fcd5 	bl	8003a18 <_Balloc>
 800406e:	4604      	mov	r4, r0
 8004070:	b930      	cbnz	r0, 8004080 <__d2b+0x24>
 8004072:	4602      	mov	r2, r0
 8004074:	4b23      	ldr	r3, [pc, #140]	@ (8004104 <__d2b+0xa8>)
 8004076:	4824      	ldr	r0, [pc, #144]	@ (8004108 <__d2b+0xac>)
 8004078:	f240 310f 	movw	r1, #783	@ 0x30f
 800407c:	f000 fad6 	bl	800462c <__assert_func>
 8004080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004088:	b10d      	cbz	r5, 800408e <__d2b+0x32>
 800408a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	f1b8 0300 	subs.w	r3, r8, #0
 8004094:	d023      	beq.n	80040de <__d2b+0x82>
 8004096:	4668      	mov	r0, sp
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f7ff fd84 	bl	8003ba6 <__lo0bits>
 800409e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80040a2:	b1d0      	cbz	r0, 80040da <__d2b+0x7e>
 80040a4:	f1c0 0320 	rsb	r3, r0, #32
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	430b      	orrs	r3, r1
 80040ae:	40c2      	lsrs	r2, r0
 80040b0:	6163      	str	r3, [r4, #20]
 80040b2:	9201      	str	r2, [sp, #4]
 80040b4:	9b01      	ldr	r3, [sp, #4]
 80040b6:	61a3      	str	r3, [r4, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2201      	moveq	r2, #1
 80040be:	2202      	movne	r2, #2
 80040c0:	6122      	str	r2, [r4, #16]
 80040c2:	b1a5      	cbz	r5, 80040ee <__d2b+0x92>
 80040c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80040c8:	4405      	add	r5, r0
 80040ca:	603d      	str	r5, [r7, #0]
 80040cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80040d0:	6030      	str	r0, [r6, #0]
 80040d2:	4620      	mov	r0, r4
 80040d4:	b003      	add	sp, #12
 80040d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040da:	6161      	str	r1, [r4, #20]
 80040dc:	e7ea      	b.n	80040b4 <__d2b+0x58>
 80040de:	a801      	add	r0, sp, #4
 80040e0:	f7ff fd61 	bl	8003ba6 <__lo0bits>
 80040e4:	9b01      	ldr	r3, [sp, #4]
 80040e6:	6163      	str	r3, [r4, #20]
 80040e8:	3020      	adds	r0, #32
 80040ea:	2201      	movs	r2, #1
 80040ec:	e7e8      	b.n	80040c0 <__d2b+0x64>
 80040ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80040f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80040f6:	6038      	str	r0, [r7, #0]
 80040f8:	6918      	ldr	r0, [r3, #16]
 80040fa:	f7ff fd35 	bl	8003b68 <__hi0bits>
 80040fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004102:	e7e5      	b.n	80040d0 <__d2b+0x74>
 8004104:	08004b1b 	.word	0x08004b1b
 8004108:	08004b2c 	.word	0x08004b2c

0800410c <__sfputc_r>:
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	3b01      	subs	r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	b410      	push	{r4}
 8004114:	6093      	str	r3, [r2, #8]
 8004116:	da08      	bge.n	800412a <__sfputc_r+0x1e>
 8004118:	6994      	ldr	r4, [r2, #24]
 800411a:	42a3      	cmp	r3, r4
 800411c:	db01      	blt.n	8004122 <__sfputc_r+0x16>
 800411e:	290a      	cmp	r1, #10
 8004120:	d103      	bne.n	800412a <__sfputc_r+0x1e>
 8004122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004126:	f7fe bc0a 	b.w	800293e <__swbuf_r>
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	1c58      	adds	r0, r3, #1
 800412e:	6010      	str	r0, [r2, #0]
 8004130:	7019      	strb	r1, [r3, #0]
 8004132:	4608      	mov	r0, r1
 8004134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004138:	4770      	bx	lr

0800413a <__sfputs_r>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	4606      	mov	r6, r0
 800413e:	460f      	mov	r7, r1
 8004140:	4614      	mov	r4, r2
 8004142:	18d5      	adds	r5, r2, r3
 8004144:	42ac      	cmp	r4, r5
 8004146:	d101      	bne.n	800414c <__sfputs_r+0x12>
 8004148:	2000      	movs	r0, #0
 800414a:	e007      	b.n	800415c <__sfputs_r+0x22>
 800414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004150:	463a      	mov	r2, r7
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff ffda 	bl	800410c <__sfputc_r>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d1f3      	bne.n	8004144 <__sfputs_r+0xa>
 800415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004160 <_vfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	460d      	mov	r5, r1
 8004166:	b09d      	sub	sp, #116	@ 0x74
 8004168:	4614      	mov	r4, r2
 800416a:	4698      	mov	r8, r3
 800416c:	4606      	mov	r6, r0
 800416e:	b118      	cbz	r0, 8004178 <_vfiprintf_r+0x18>
 8004170:	6a03      	ldr	r3, [r0, #32]
 8004172:	b90b      	cbnz	r3, 8004178 <_vfiprintf_r+0x18>
 8004174:	f7fe fafa 	bl	800276c <__sinit>
 8004178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	d405      	bmi.n	800418a <_vfiprintf_r+0x2a>
 800417e:	89ab      	ldrh	r3, [r5, #12]
 8004180:	059a      	lsls	r2, r3, #22
 8004182:	d402      	bmi.n	800418a <_vfiprintf_r+0x2a>
 8004184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004186:	f7fe fcec 	bl	8002b62 <__retarget_lock_acquire_recursive>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	d501      	bpl.n	8004194 <_vfiprintf_r+0x34>
 8004190:	692b      	ldr	r3, [r5, #16]
 8004192:	b99b      	cbnz	r3, 80041bc <_vfiprintf_r+0x5c>
 8004194:	4629      	mov	r1, r5
 8004196:	4630      	mov	r0, r6
 8004198:	f7fe fc10 	bl	80029bc <__swsetup_r>
 800419c:	b170      	cbz	r0, 80041bc <_vfiprintf_r+0x5c>
 800419e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041a0:	07dc      	lsls	r4, r3, #31
 80041a2:	d504      	bpl.n	80041ae <_vfiprintf_r+0x4e>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	b01d      	add	sp, #116	@ 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	0598      	lsls	r0, r3, #22
 80041b2:	d4f7      	bmi.n	80041a4 <_vfiprintf_r+0x44>
 80041b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041b6:	f7fe fcd5 	bl	8002b64 <__retarget_lock_release_recursive>
 80041ba:	e7f3      	b.n	80041a4 <_vfiprintf_r+0x44>
 80041bc:	2300      	movs	r3, #0
 80041be:	9309      	str	r3, [sp, #36]	@ 0x24
 80041c0:	2320      	movs	r3, #32
 80041c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ca:	2330      	movs	r3, #48	@ 0x30
 80041cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800437c <_vfiprintf_r+0x21c>
 80041d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041d4:	f04f 0901 	mov.w	r9, #1
 80041d8:	4623      	mov	r3, r4
 80041da:	469a      	mov	sl, r3
 80041dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041e0:	b10a      	cbz	r2, 80041e6 <_vfiprintf_r+0x86>
 80041e2:	2a25      	cmp	r2, #37	@ 0x25
 80041e4:	d1f9      	bne.n	80041da <_vfiprintf_r+0x7a>
 80041e6:	ebba 0b04 	subs.w	fp, sl, r4
 80041ea:	d00b      	beq.n	8004204 <_vfiprintf_r+0xa4>
 80041ec:	465b      	mov	r3, fp
 80041ee:	4622      	mov	r2, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7ff ffa1 	bl	800413a <__sfputs_r>
 80041f8:	3001      	adds	r0, #1
 80041fa:	f000 80a7 	beq.w	800434c <_vfiprintf_r+0x1ec>
 80041fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004200:	445a      	add	r2, fp
 8004202:	9209      	str	r2, [sp, #36]	@ 0x24
 8004204:	f89a 3000 	ldrb.w	r3, [sl]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 809f 	beq.w	800434c <_vfiprintf_r+0x1ec>
 800420e:	2300      	movs	r3, #0
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004218:	f10a 0a01 	add.w	sl, sl, #1
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	9307      	str	r3, [sp, #28]
 8004220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004224:	931a      	str	r3, [sp, #104]	@ 0x68
 8004226:	4654      	mov	r4, sl
 8004228:	2205      	movs	r2, #5
 800422a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800422e:	4853      	ldr	r0, [pc, #332]	@ (800437c <_vfiprintf_r+0x21c>)
 8004230:	f7fb ffce 	bl	80001d0 <memchr>
 8004234:	9a04      	ldr	r2, [sp, #16]
 8004236:	b9d8      	cbnz	r0, 8004270 <_vfiprintf_r+0x110>
 8004238:	06d1      	lsls	r1, r2, #27
 800423a:	bf44      	itt	mi
 800423c:	2320      	movmi	r3, #32
 800423e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004242:	0713      	lsls	r3, r2, #28
 8004244:	bf44      	itt	mi
 8004246:	232b      	movmi	r3, #43	@ 0x2b
 8004248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800424c:	f89a 3000 	ldrb.w	r3, [sl]
 8004250:	2b2a      	cmp	r3, #42	@ 0x2a
 8004252:	d015      	beq.n	8004280 <_vfiprintf_r+0x120>
 8004254:	9a07      	ldr	r2, [sp, #28]
 8004256:	4654      	mov	r4, sl
 8004258:	2000      	movs	r0, #0
 800425a:	f04f 0c0a 	mov.w	ip, #10
 800425e:	4621      	mov	r1, r4
 8004260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004264:	3b30      	subs	r3, #48	@ 0x30
 8004266:	2b09      	cmp	r3, #9
 8004268:	d94b      	bls.n	8004302 <_vfiprintf_r+0x1a2>
 800426a:	b1b0      	cbz	r0, 800429a <_vfiprintf_r+0x13a>
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	e014      	b.n	800429a <_vfiprintf_r+0x13a>
 8004270:	eba0 0308 	sub.w	r3, r0, r8
 8004274:	fa09 f303 	lsl.w	r3, r9, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	46a2      	mov	sl, r4
 800427e:	e7d2      	b.n	8004226 <_vfiprintf_r+0xc6>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	1d19      	adds	r1, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	9103      	str	r1, [sp, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfbb      	ittet	lt
 800428c:	425b      	neglt	r3, r3
 800428e:	f042 0202 	orrlt.w	r2, r2, #2
 8004292:	9307      	strge	r3, [sp, #28]
 8004294:	9307      	strlt	r3, [sp, #28]
 8004296:	bfb8      	it	lt
 8004298:	9204      	strlt	r2, [sp, #16]
 800429a:	7823      	ldrb	r3, [r4, #0]
 800429c:	2b2e      	cmp	r3, #46	@ 0x2e
 800429e:	d10a      	bne.n	80042b6 <_vfiprintf_r+0x156>
 80042a0:	7863      	ldrb	r3, [r4, #1]
 80042a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a4:	d132      	bne.n	800430c <_vfiprintf_r+0x1ac>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9203      	str	r2, [sp, #12]
 80042ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042b2:	3402      	adds	r4, #2
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800438c <_vfiprintf_r+0x22c>
 80042ba:	7821      	ldrb	r1, [r4, #0]
 80042bc:	2203      	movs	r2, #3
 80042be:	4650      	mov	r0, sl
 80042c0:	f7fb ff86 	bl	80001d0 <memchr>
 80042c4:	b138      	cbz	r0, 80042d6 <_vfiprintf_r+0x176>
 80042c6:	9b04      	ldr	r3, [sp, #16]
 80042c8:	eba0 000a 	sub.w	r0, r0, sl
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	4082      	lsls	r2, r0
 80042d0:	4313      	orrs	r3, r2
 80042d2:	3401      	adds	r4, #1
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042da:	4829      	ldr	r0, [pc, #164]	@ (8004380 <_vfiprintf_r+0x220>)
 80042dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042e0:	2206      	movs	r2, #6
 80042e2:	f7fb ff75 	bl	80001d0 <memchr>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d03f      	beq.n	800436a <_vfiprintf_r+0x20a>
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <_vfiprintf_r+0x224>)
 80042ec:	bb1b      	cbnz	r3, 8004336 <_vfiprintf_r+0x1d6>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	3307      	adds	r3, #7
 80042f2:	f023 0307 	bic.w	r3, r3, #7
 80042f6:	3308      	adds	r3, #8
 80042f8:	9303      	str	r3, [sp, #12]
 80042fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042fc:	443b      	add	r3, r7
 80042fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004300:	e76a      	b.n	80041d8 <_vfiprintf_r+0x78>
 8004302:	fb0c 3202 	mla	r2, ip, r2, r3
 8004306:	460c      	mov	r4, r1
 8004308:	2001      	movs	r0, #1
 800430a:	e7a8      	b.n	800425e <_vfiprintf_r+0xfe>
 800430c:	2300      	movs	r3, #0
 800430e:	3401      	adds	r4, #1
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0c0a 	mov.w	ip, #10
 8004318:	4620      	mov	r0, r4
 800431a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800431e:	3a30      	subs	r2, #48	@ 0x30
 8004320:	2a09      	cmp	r2, #9
 8004322:	d903      	bls.n	800432c <_vfiprintf_r+0x1cc>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0c6      	beq.n	80042b6 <_vfiprintf_r+0x156>
 8004328:	9105      	str	r1, [sp, #20]
 800432a:	e7c4      	b.n	80042b6 <_vfiprintf_r+0x156>
 800432c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004330:	4604      	mov	r4, r0
 8004332:	2301      	movs	r3, #1
 8004334:	e7f0      	b.n	8004318 <_vfiprintf_r+0x1b8>
 8004336:	ab03      	add	r3, sp, #12
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	462a      	mov	r2, r5
 800433c:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <_vfiprintf_r+0x228>)
 800433e:	a904      	add	r1, sp, #16
 8004340:	4630      	mov	r0, r6
 8004342:	f7fd fdd1 	bl	8001ee8 <_printf_float>
 8004346:	4607      	mov	r7, r0
 8004348:	1c78      	adds	r0, r7, #1
 800434a:	d1d6      	bne.n	80042fa <_vfiprintf_r+0x19a>
 800434c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	d405      	bmi.n	800435e <_vfiprintf_r+0x1fe>
 8004352:	89ab      	ldrh	r3, [r5, #12]
 8004354:	059a      	lsls	r2, r3, #22
 8004356:	d402      	bmi.n	800435e <_vfiprintf_r+0x1fe>
 8004358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800435a:	f7fe fc03 	bl	8002b64 <__retarget_lock_release_recursive>
 800435e:	89ab      	ldrh	r3, [r5, #12]
 8004360:	065b      	lsls	r3, r3, #25
 8004362:	f53f af1f 	bmi.w	80041a4 <_vfiprintf_r+0x44>
 8004366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004368:	e71e      	b.n	80041a8 <_vfiprintf_r+0x48>
 800436a:	ab03      	add	r3, sp, #12
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	462a      	mov	r2, r5
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <_vfiprintf_r+0x228>)
 8004372:	a904      	add	r1, sp, #16
 8004374:	4630      	mov	r0, r6
 8004376:	f7fe f84f 	bl	8002418 <_printf_i>
 800437a:	e7e4      	b.n	8004346 <_vfiprintf_r+0x1e6>
 800437c:	08004b85 	.word	0x08004b85
 8004380:	08004b8f 	.word	0x08004b8f
 8004384:	08001ee9 	.word	0x08001ee9
 8004388:	0800413b 	.word	0x0800413b
 800438c:	08004b8b 	.word	0x08004b8b

08004390 <__sflush_r>:
 8004390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004398:	0716      	lsls	r6, r2, #28
 800439a:	4605      	mov	r5, r0
 800439c:	460c      	mov	r4, r1
 800439e:	d454      	bmi.n	800444a <__sflush_r+0xba>
 80043a0:	684b      	ldr	r3, [r1, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	dc02      	bgt.n	80043ac <__sflush_r+0x1c>
 80043a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	dd48      	ble.n	800443e <__sflush_r+0xae>
 80043ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	d045      	beq.n	800443e <__sflush_r+0xae>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043b8:	682f      	ldr	r7, [r5, #0]
 80043ba:	6a21      	ldr	r1, [r4, #32]
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	d030      	beq.n	8004422 <__sflush_r+0x92>
 80043c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	0759      	lsls	r1, r3, #29
 80043c6:	d505      	bpl.n	80043d4 <__sflush_r+0x44>
 80043c8:	6863      	ldr	r3, [r4, #4]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043ce:	b10b      	cbz	r3, 80043d4 <__sflush_r+0x44>
 80043d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043d2:	1ad2      	subs	r2, r2, r3
 80043d4:	2300      	movs	r3, #0
 80043d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043d8:	6a21      	ldr	r1, [r4, #32]
 80043da:	4628      	mov	r0, r5
 80043dc:	47b0      	blx	r6
 80043de:	1c43      	adds	r3, r0, #1
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	d106      	bne.n	80043f2 <__sflush_r+0x62>
 80043e4:	6829      	ldr	r1, [r5, #0]
 80043e6:	291d      	cmp	r1, #29
 80043e8:	d82b      	bhi.n	8004442 <__sflush_r+0xb2>
 80043ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004494 <__sflush_r+0x104>)
 80043ec:	40ca      	lsrs	r2, r1
 80043ee:	07d6      	lsls	r6, r2, #31
 80043f0:	d527      	bpl.n	8004442 <__sflush_r+0xb2>
 80043f2:	2200      	movs	r2, #0
 80043f4:	6062      	str	r2, [r4, #4]
 80043f6:	04d9      	lsls	r1, r3, #19
 80043f8:	6922      	ldr	r2, [r4, #16]
 80043fa:	6022      	str	r2, [r4, #0]
 80043fc:	d504      	bpl.n	8004408 <__sflush_r+0x78>
 80043fe:	1c42      	adds	r2, r0, #1
 8004400:	d101      	bne.n	8004406 <__sflush_r+0x76>
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	b903      	cbnz	r3, 8004408 <__sflush_r+0x78>
 8004406:	6560      	str	r0, [r4, #84]	@ 0x54
 8004408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800440a:	602f      	str	r7, [r5, #0]
 800440c:	b1b9      	cbz	r1, 800443e <__sflush_r+0xae>
 800440e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004412:	4299      	cmp	r1, r3
 8004414:	d002      	beq.n	800441c <__sflush_r+0x8c>
 8004416:	4628      	mov	r0, r5
 8004418:	f7ff f9fe 	bl	8003818 <_free_r>
 800441c:	2300      	movs	r3, #0
 800441e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004420:	e00d      	b.n	800443e <__sflush_r+0xae>
 8004422:	2301      	movs	r3, #1
 8004424:	4628      	mov	r0, r5
 8004426:	47b0      	blx	r6
 8004428:	4602      	mov	r2, r0
 800442a:	1c50      	adds	r0, r2, #1
 800442c:	d1c9      	bne.n	80043c2 <__sflush_r+0x32>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0c6      	beq.n	80043c2 <__sflush_r+0x32>
 8004434:	2b1d      	cmp	r3, #29
 8004436:	d001      	beq.n	800443c <__sflush_r+0xac>
 8004438:	2b16      	cmp	r3, #22
 800443a:	d11e      	bne.n	800447a <__sflush_r+0xea>
 800443c:	602f      	str	r7, [r5, #0]
 800443e:	2000      	movs	r0, #0
 8004440:	e022      	b.n	8004488 <__sflush_r+0xf8>
 8004442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004446:	b21b      	sxth	r3, r3
 8004448:	e01b      	b.n	8004482 <__sflush_r+0xf2>
 800444a:	690f      	ldr	r7, [r1, #16]
 800444c:	2f00      	cmp	r7, #0
 800444e:	d0f6      	beq.n	800443e <__sflush_r+0xae>
 8004450:	0793      	lsls	r3, r2, #30
 8004452:	680e      	ldr	r6, [r1, #0]
 8004454:	bf08      	it	eq
 8004456:	694b      	ldreq	r3, [r1, #20]
 8004458:	600f      	str	r7, [r1, #0]
 800445a:	bf18      	it	ne
 800445c:	2300      	movne	r3, #0
 800445e:	eba6 0807 	sub.w	r8, r6, r7
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	f1b8 0f00 	cmp.w	r8, #0
 8004468:	dde9      	ble.n	800443e <__sflush_r+0xae>
 800446a:	6a21      	ldr	r1, [r4, #32]
 800446c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800446e:	4643      	mov	r3, r8
 8004470:	463a      	mov	r2, r7
 8004472:	4628      	mov	r0, r5
 8004474:	47b0      	blx	r6
 8004476:	2800      	cmp	r0, #0
 8004478:	dc08      	bgt.n	800448c <__sflush_r+0xfc>
 800447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004482:	81a3      	strh	r3, [r4, #12]
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800448c:	4407      	add	r7, r0
 800448e:	eba8 0800 	sub.w	r8, r8, r0
 8004492:	e7e7      	b.n	8004464 <__sflush_r+0xd4>
 8004494:	20400001 	.word	0x20400001

08004498 <_fflush_r>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	690b      	ldr	r3, [r1, #16]
 800449c:	4605      	mov	r5, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	b913      	cbnz	r3, 80044a8 <_fflush_r+0x10>
 80044a2:	2500      	movs	r5, #0
 80044a4:	4628      	mov	r0, r5
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	b118      	cbz	r0, 80044b2 <_fflush_r+0x1a>
 80044aa:	6a03      	ldr	r3, [r0, #32]
 80044ac:	b90b      	cbnz	r3, 80044b2 <_fflush_r+0x1a>
 80044ae:	f7fe f95d 	bl	800276c <__sinit>
 80044b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f3      	beq.n	80044a2 <_fflush_r+0xa>
 80044ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044bc:	07d0      	lsls	r0, r2, #31
 80044be:	d404      	bmi.n	80044ca <_fflush_r+0x32>
 80044c0:	0599      	lsls	r1, r3, #22
 80044c2:	d402      	bmi.n	80044ca <_fflush_r+0x32>
 80044c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044c6:	f7fe fb4c 	bl	8002b62 <__retarget_lock_acquire_recursive>
 80044ca:	4628      	mov	r0, r5
 80044cc:	4621      	mov	r1, r4
 80044ce:	f7ff ff5f 	bl	8004390 <__sflush_r>
 80044d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044d4:	07da      	lsls	r2, r3, #31
 80044d6:	4605      	mov	r5, r0
 80044d8:	d4e4      	bmi.n	80044a4 <_fflush_r+0xc>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	059b      	lsls	r3, r3, #22
 80044de:	d4e1      	bmi.n	80044a4 <_fflush_r+0xc>
 80044e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044e2:	f7fe fb3f 	bl	8002b64 <__retarget_lock_release_recursive>
 80044e6:	e7dd      	b.n	80044a4 <_fflush_r+0xc>

080044e8 <__swhatbuf_r>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	460c      	mov	r4, r1
 80044ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f0:	2900      	cmp	r1, #0
 80044f2:	b096      	sub	sp, #88	@ 0x58
 80044f4:	4615      	mov	r5, r2
 80044f6:	461e      	mov	r6, r3
 80044f8:	da0d      	bge.n	8004516 <__swhatbuf_r+0x2e>
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	bf14      	ite	ne
 8004506:	2340      	movne	r3, #64	@ 0x40
 8004508:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800450c:	2000      	movs	r0, #0
 800450e:	6031      	str	r1, [r6, #0]
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	b016      	add	sp, #88	@ 0x58
 8004514:	bd70      	pop	{r4, r5, r6, pc}
 8004516:	466a      	mov	r2, sp
 8004518:	f000 f848 	bl	80045ac <_fstat_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	dbec      	blt.n	80044fa <__swhatbuf_r+0x12>
 8004520:	9901      	ldr	r1, [sp, #4]
 8004522:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004526:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800452a:	4259      	negs	r1, r3
 800452c:	4159      	adcs	r1, r3
 800452e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004532:	e7eb      	b.n	800450c <__swhatbuf_r+0x24>

08004534 <__smakebuf_r>:
 8004534:	898b      	ldrh	r3, [r1, #12]
 8004536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004538:	079d      	lsls	r5, r3, #30
 800453a:	4606      	mov	r6, r0
 800453c:	460c      	mov	r4, r1
 800453e:	d507      	bpl.n	8004550 <__smakebuf_r+0x1c>
 8004540:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	2301      	movs	r3, #1
 800454a:	6163      	str	r3, [r4, #20]
 800454c:	b003      	add	sp, #12
 800454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004550:	ab01      	add	r3, sp, #4
 8004552:	466a      	mov	r2, sp
 8004554:	f7ff ffc8 	bl	80044e8 <__swhatbuf_r>
 8004558:	9f00      	ldr	r7, [sp, #0]
 800455a:	4605      	mov	r5, r0
 800455c:	4639      	mov	r1, r7
 800455e:	4630      	mov	r0, r6
 8004560:	f7ff f9ce 	bl	8003900 <_malloc_r>
 8004564:	b948      	cbnz	r0, 800457a <__smakebuf_r+0x46>
 8004566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800456a:	059a      	lsls	r2, r3, #22
 800456c:	d4ee      	bmi.n	800454c <__smakebuf_r+0x18>
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	f043 0302 	orr.w	r3, r3, #2
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	e7e2      	b.n	8004540 <__smakebuf_r+0xc>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	6020      	str	r0, [r4, #0]
 800457e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	9b01      	ldr	r3, [sp, #4]
 8004586:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800458a:	b15b      	cbz	r3, 80045a4 <__smakebuf_r+0x70>
 800458c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004590:	4630      	mov	r0, r6
 8004592:	f000 f81d 	bl	80045d0 <_isatty_r>
 8004596:	b128      	cbz	r0, 80045a4 <__smakebuf_r+0x70>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	431d      	orrs	r5, r3
 80045a8:	81a5      	strh	r5, [r4, #12]
 80045aa:	e7cf      	b.n	800454c <__smakebuf_r+0x18>

080045ac <_fstat_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	@ (80045cc <_fstat_r+0x20>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	f7fd fb6f 	bl	8001c9c <_fstat>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d102      	bne.n	80045c8 <_fstat_r+0x1c>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	b103      	cbz	r3, 80045c8 <_fstat_r+0x1c>
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop
 80045cc:	20000370 	.word	0x20000370

080045d0 <_isatty_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d06      	ldr	r5, [pc, #24]	@ (80045ec <_isatty_r+0x1c>)
 80045d4:	2300      	movs	r3, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f7fd fb6e 	bl	8001cbc <_isatty>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_isatty_r+0x1a>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_isatty_r+0x1a>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	20000370 	.word	0x20000370

080045f0 <_sbrk_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4d06      	ldr	r5, [pc, #24]	@ (800460c <_sbrk_r+0x1c>)
 80045f4:	2300      	movs	r3, #0
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	f7fd fb76 	bl	8001cec <_sbrk>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	d102      	bne.n	800460a <_sbrk_r+0x1a>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	b103      	cbz	r3, 800460a <_sbrk_r+0x1a>
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	bd38      	pop	{r3, r4, r5, pc}
 800460c:	20000370 	.word	0x20000370

08004610 <memcpy>:
 8004610:	440a      	add	r2, r1
 8004612:	4291      	cmp	r1, r2
 8004614:	f100 33ff 	add.w	r3, r0, #4294967295
 8004618:	d100      	bne.n	800461c <memcpy+0xc>
 800461a:	4770      	bx	lr
 800461c:	b510      	push	{r4, lr}
 800461e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004626:	4291      	cmp	r1, r2
 8004628:	d1f9      	bne.n	800461e <memcpy+0xe>
 800462a:	bd10      	pop	{r4, pc}

0800462c <__assert_func>:
 800462c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800462e:	4614      	mov	r4, r2
 8004630:	461a      	mov	r2, r3
 8004632:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <__assert_func+0x2c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4605      	mov	r5, r0
 8004638:	68d8      	ldr	r0, [r3, #12]
 800463a:	b14c      	cbz	r4, 8004650 <__assert_func+0x24>
 800463c:	4b07      	ldr	r3, [pc, #28]	@ (800465c <__assert_func+0x30>)
 800463e:	9100      	str	r1, [sp, #0]
 8004640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004644:	4906      	ldr	r1, [pc, #24]	@ (8004660 <__assert_func+0x34>)
 8004646:	462b      	mov	r3, r5
 8004648:	f000 f842 	bl	80046d0 <fiprintf>
 800464c:	f000 f852 	bl	80046f4 <abort>
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <__assert_func+0x38>)
 8004652:	461c      	mov	r4, r3
 8004654:	e7f3      	b.n	800463e <__assert_func+0x12>
 8004656:	bf00      	nop
 8004658:	2000000c 	.word	0x2000000c
 800465c:	08004ba0 	.word	0x08004ba0
 8004660:	08004bad 	.word	0x08004bad
 8004664:	08004bdb 	.word	0x08004bdb

08004668 <_calloc_r>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	fba1 5402 	umull	r5, r4, r1, r2
 800466e:	b934      	cbnz	r4, 800467e <_calloc_r+0x16>
 8004670:	4629      	mov	r1, r5
 8004672:	f7ff f945 	bl	8003900 <_malloc_r>
 8004676:	4606      	mov	r6, r0
 8004678:	b928      	cbnz	r0, 8004686 <_calloc_r+0x1e>
 800467a:	4630      	mov	r0, r6
 800467c:	bd70      	pop	{r4, r5, r6, pc}
 800467e:	220c      	movs	r2, #12
 8004680:	6002      	str	r2, [r0, #0]
 8004682:	2600      	movs	r6, #0
 8004684:	e7f9      	b.n	800467a <_calloc_r+0x12>
 8004686:	462a      	mov	r2, r5
 8004688:	4621      	mov	r1, r4
 800468a:	f7fe f9ed 	bl	8002a68 <memset>
 800468e:	e7f4      	b.n	800467a <_calloc_r+0x12>

08004690 <__ascii_mbtowc>:
 8004690:	b082      	sub	sp, #8
 8004692:	b901      	cbnz	r1, 8004696 <__ascii_mbtowc+0x6>
 8004694:	a901      	add	r1, sp, #4
 8004696:	b142      	cbz	r2, 80046aa <__ascii_mbtowc+0x1a>
 8004698:	b14b      	cbz	r3, 80046ae <__ascii_mbtowc+0x1e>
 800469a:	7813      	ldrb	r3, [r2, #0]
 800469c:	600b      	str	r3, [r1, #0]
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	1e10      	subs	r0, r2, #0
 80046a2:	bf18      	it	ne
 80046a4:	2001      	movne	r0, #1
 80046a6:	b002      	add	sp, #8
 80046a8:	4770      	bx	lr
 80046aa:	4610      	mov	r0, r2
 80046ac:	e7fb      	b.n	80046a6 <__ascii_mbtowc+0x16>
 80046ae:	f06f 0001 	mvn.w	r0, #1
 80046b2:	e7f8      	b.n	80046a6 <__ascii_mbtowc+0x16>

080046b4 <__ascii_wctomb>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	4608      	mov	r0, r1
 80046b8:	b141      	cbz	r1, 80046cc <__ascii_wctomb+0x18>
 80046ba:	2aff      	cmp	r2, #255	@ 0xff
 80046bc:	d904      	bls.n	80046c8 <__ascii_wctomb+0x14>
 80046be:	228a      	movs	r2, #138	@ 0x8a
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295
 80046c6:	4770      	bx	lr
 80046c8:	700a      	strb	r2, [r1, #0]
 80046ca:	2001      	movs	r0, #1
 80046cc:	4770      	bx	lr
	...

080046d0 <fiprintf>:
 80046d0:	b40e      	push	{r1, r2, r3}
 80046d2:	b503      	push	{r0, r1, lr}
 80046d4:	4601      	mov	r1, r0
 80046d6:	ab03      	add	r3, sp, #12
 80046d8:	4805      	ldr	r0, [pc, #20]	@ (80046f0 <fiprintf+0x20>)
 80046da:	f853 2b04 	ldr.w	r2, [r3], #4
 80046de:	6800      	ldr	r0, [r0, #0]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	f7ff fd3d 	bl	8004160 <_vfiprintf_r>
 80046e6:	b002      	add	sp, #8
 80046e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ec:	b003      	add	sp, #12
 80046ee:	4770      	bx	lr
 80046f0:	2000000c 	.word	0x2000000c

080046f4 <abort>:
 80046f4:	b508      	push	{r3, lr}
 80046f6:	2006      	movs	r0, #6
 80046f8:	f000 f82c 	bl	8004754 <raise>
 80046fc:	2001      	movs	r0, #1
 80046fe:	f7fd fa7d 	bl	8001bfc <_exit>

08004702 <_raise_r>:
 8004702:	291f      	cmp	r1, #31
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4605      	mov	r5, r0
 8004708:	460c      	mov	r4, r1
 800470a:	d904      	bls.n	8004716 <_raise_r+0x14>
 800470c:	2316      	movs	r3, #22
 800470e:	6003      	str	r3, [r0, #0]
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004718:	b112      	cbz	r2, 8004720 <_raise_r+0x1e>
 800471a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800471e:	b94b      	cbnz	r3, 8004734 <_raise_r+0x32>
 8004720:	4628      	mov	r0, r5
 8004722:	f000 f831 	bl	8004788 <_getpid_r>
 8004726:	4622      	mov	r2, r4
 8004728:	4601      	mov	r1, r0
 800472a:	4628      	mov	r0, r5
 800472c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004730:	f000 b818 	b.w	8004764 <_kill_r>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d00a      	beq.n	800474e <_raise_r+0x4c>
 8004738:	1c59      	adds	r1, r3, #1
 800473a:	d103      	bne.n	8004744 <_raise_r+0x42>
 800473c:	2316      	movs	r3, #22
 800473e:	6003      	str	r3, [r0, #0]
 8004740:	2001      	movs	r0, #1
 8004742:	e7e7      	b.n	8004714 <_raise_r+0x12>
 8004744:	2100      	movs	r1, #0
 8004746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800474a:	4620      	mov	r0, r4
 800474c:	4798      	blx	r3
 800474e:	2000      	movs	r0, #0
 8004750:	e7e0      	b.n	8004714 <_raise_r+0x12>
	...

08004754 <raise>:
 8004754:	4b02      	ldr	r3, [pc, #8]	@ (8004760 <raise+0xc>)
 8004756:	4601      	mov	r1, r0
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f7ff bfd2 	b.w	8004702 <_raise_r>
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c

08004764 <_kill_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d07      	ldr	r5, [pc, #28]	@ (8004784 <_kill_r+0x20>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	f7fd fa33 	bl	8001bdc <_kill>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d102      	bne.n	8004780 <_kill_r+0x1c>
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	b103      	cbz	r3, 8004780 <_kill_r+0x1c>
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	bd38      	pop	{r3, r4, r5, pc}
 8004782:	bf00      	nop
 8004784:	20000370 	.word	0x20000370

08004788 <_getpid_r>:
 8004788:	f7fd ba20 	b.w	8001bcc <_getpid>

0800478c <asinf>:
 800478c:	b508      	push	{r3, lr}
 800478e:	ed2d 8b02 	vpush	{d8}
 8004792:	eeb0 8a40 	vmov.f32	s16, s0
 8004796:	f000 f833 	bl	8004800 <__ieee754_asinf>
 800479a:	eeb4 8a48 	vcmp.f32	s16, s16
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	eef0 8a40 	vmov.f32	s17, s0
 80047a6:	d615      	bvs.n	80047d4 <asinf+0x48>
 80047a8:	eeb0 0a48 	vmov.f32	s0, s16
 80047ac:	f000 f81a 	bl	80047e4 <fabsf>
 80047b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80047b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	dd0a      	ble.n	80047d4 <asinf+0x48>
 80047be:	f7fe f9a5 	bl	8002b0c <__errno>
 80047c2:	ecbd 8b02 	vpop	{d8}
 80047c6:	2321      	movs	r3, #33	@ 0x21
 80047c8:	6003      	str	r3, [r0, #0]
 80047ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80047ce:	4804      	ldr	r0, [pc, #16]	@ (80047e0 <asinf+0x54>)
 80047d0:	f000 b810 	b.w	80047f4 <nanf>
 80047d4:	eeb0 0a68 	vmov.f32	s0, s17
 80047d8:	ecbd 8b02 	vpop	{d8}
 80047dc:	bd08      	pop	{r3, pc}
 80047de:	bf00      	nop
 80047e0:	08004bdb 	.word	0x08004bdb

080047e4 <fabsf>:
 80047e4:	ee10 3a10 	vmov	r3, s0
 80047e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047ec:	ee00 3a10 	vmov	s0, r3
 80047f0:	4770      	bx	lr
	...

080047f4 <nanf>:
 80047f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80047fc <nanf+0x8>
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	7fc00000 	.word	0x7fc00000

08004800 <__ieee754_asinf>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	ee10 5a10 	vmov	r5, s0
 8004806:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800480a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800480e:	ed2d 8b04 	vpush	{d8-d9}
 8004812:	d10c      	bne.n	800482e <__ieee754_asinf+0x2e>
 8004814:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004988 <__ieee754_asinf+0x188>
 8004818:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800498c <__ieee754_asinf+0x18c>
 800481c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004820:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004824:	eeb0 0a67 	vmov.f32	s0, s15
 8004828:	ecbd 8b04 	vpop	{d8-d9}
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	d904      	bls.n	800483a <__ieee754_asinf+0x3a>
 8004830:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004834:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004838:	e7f6      	b.n	8004828 <__ieee754_asinf+0x28>
 800483a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800483e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8004842:	d20b      	bcs.n	800485c <__ieee754_asinf+0x5c>
 8004844:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8004848:	d252      	bcs.n	80048f0 <__ieee754_asinf+0xf0>
 800484a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8004990 <__ieee754_asinf+0x190>
 800484e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004852:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	dce5      	bgt.n	8004828 <__ieee754_asinf+0x28>
 800485c:	f7ff ffc2 	bl	80047e4 <fabsf>
 8004860:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8004864:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004868:	ee28 8a27 	vmul.f32	s16, s16, s15
 800486c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004994 <__ieee754_asinf+0x194>
 8004870:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8004998 <__ieee754_asinf+0x198>
 8004874:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800499c <__ieee754_asinf+0x19c>
 8004878:	eea8 7a27 	vfma.f32	s14, s16, s15
 800487c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80049a0 <__ieee754_asinf+0x1a0>
 8004880:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004884:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80049a4 <__ieee754_asinf+0x1a4>
 8004888:	eea7 7a88 	vfma.f32	s14, s15, s16
 800488c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80049a8 <__ieee754_asinf+0x1a8>
 8004890:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004894:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80049ac <__ieee754_asinf+0x1ac>
 8004898:	eea7 9a88 	vfma.f32	s18, s15, s16
 800489c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80049b0 <__ieee754_asinf+0x1b0>
 80048a0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80048a4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80049b4 <__ieee754_asinf+0x1b4>
 80048a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80048ac:	eddf 7a42 	vldr	s15, [pc, #264]	@ 80049b8 <__ieee754_asinf+0x1b8>
 80048b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80048b4:	eeb0 0a48 	vmov.f32	s0, s16
 80048b8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80048bc:	f000 f884 	bl	80049c8 <__ieee754_sqrtf>
 80048c0:	4b3e      	ldr	r3, [pc, #248]	@ (80049bc <__ieee754_asinf+0x1bc>)
 80048c2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80048c6:	429c      	cmp	r4, r3
 80048c8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80048cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80048d0:	d93d      	bls.n	800494e <__ieee754_asinf+0x14e>
 80048d2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80048d6:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80049c0 <__ieee754_asinf+0x1c0>
 80048da:	eee0 7a26 	vfma.f32	s15, s0, s13
 80048de:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800498c <__ieee754_asinf+0x18c>
 80048e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	bfd8      	it	le
 80048ea:	eeb1 0a40 	vnegle.f32	s0, s0
 80048ee:	e79b      	b.n	8004828 <__ieee754_asinf+0x28>
 80048f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80048f4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8004998 <__ieee754_asinf+0x198>
 80048f8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004994 <__ieee754_asinf+0x194>
 80048fc:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 80049ac <__ieee754_asinf+0x1ac>
 8004900:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004904:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80049a0 <__ieee754_asinf+0x1a0>
 8004908:	eee7 6a27 	vfma.f32	s13, s14, s15
 800490c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80049a4 <__ieee754_asinf+0x1a4>
 8004910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004914:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80049a8 <__ieee754_asinf+0x1a8>
 8004918:	eee7 6a27 	vfma.f32	s13, s14, s15
 800491c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800499c <__ieee754_asinf+0x19c>
 8004920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004924:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80049b0 <__ieee754_asinf+0x1b0>
 8004928:	eee7 6a86 	vfma.f32	s13, s15, s12
 800492c:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80049b4 <__ieee754_asinf+0x1b4>
 8004930:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8004934:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80049b8 <__ieee754_asinf+0x1b8>
 8004938:	eee6 6a27 	vfma.f32	s13, s12, s15
 800493c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004940:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8004944:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004948:	eea0 0a27 	vfma.f32	s0, s0, s15
 800494c:	e76c      	b.n	8004828 <__ieee754_asinf+0x28>
 800494e:	ee10 3a10 	vmov	r3, s0
 8004952:	f36f 030b 	bfc	r3, #0, #12
 8004956:	ee07 3a10 	vmov	s14, r3
 800495a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800495e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8004962:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004966:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004988 <__ieee754_asinf+0x188>
 800496a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800496e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80049c4 <__ieee754_asinf+0x1c4>
 8004972:	eee5 7a66 	vfms.f32	s15, s10, s13
 8004976:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800497a:	eeb0 6a40 	vmov.f32	s12, s0
 800497e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004982:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004986:	e7ac      	b.n	80048e2 <__ieee754_asinf+0xe2>
 8004988:	b33bbd2e 	.word	0xb33bbd2e
 800498c:	3fc90fdb 	.word	0x3fc90fdb
 8004990:	7149f2ca 	.word	0x7149f2ca
 8004994:	3a4f7f04 	.word	0x3a4f7f04
 8004998:	3811ef08 	.word	0x3811ef08
 800499c:	3e2aaaab 	.word	0x3e2aaaab
 80049a0:	bd241146 	.word	0xbd241146
 80049a4:	3e4e0aa8 	.word	0x3e4e0aa8
 80049a8:	bea6b090 	.word	0xbea6b090
 80049ac:	3d9dc62e 	.word	0x3d9dc62e
 80049b0:	bf303361 	.word	0xbf303361
 80049b4:	4001572d 	.word	0x4001572d
 80049b8:	c019d139 	.word	0xc019d139
 80049bc:	3f799999 	.word	0x3f799999
 80049c0:	333bbd2e 	.word	0x333bbd2e
 80049c4:	3f490fdb 	.word	0x3f490fdb

080049c8 <__ieee754_sqrtf>:
 80049c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80049cc:	4770      	bx	lr
	...

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
